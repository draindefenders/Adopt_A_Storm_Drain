{"ast":null,"code":"/**\n * @module ol/source/IIIF\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { DEFAULT_TILE_SIZE } from '../tilegrid/common.js';\nimport { getTopLeft } from '../extent.js';\nimport { CustomTile } from './Zoomify.js';\nimport { Versions } from '../format/IIIFInfo.js';\nimport { assert } from '../asserts.js';\nimport TileGrid from '../tilegrid/TileGrid.js';\nimport TileImage from './TileImage.js';\nimport { toSize } from '../size.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize]\n * @property {null|string} [crossOrigin]\n * @property {import(\"../extent.js\").Extent} [extent=[0, -height, width, 0]]\n * @property {string} [format='jpg'] Requested image format.\n * @property {import(\"../proj.js\").ProjectionLike} [projection]\n * @property {string} [quality] Requested IIIF image quality. Default is 'native'\n * for version 1, 'default' for versions 2 and 3.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {Array<number>} [resolutions] Supported resolutions as given in IIIF 'scaleFactors'\n * @property {import(\"../size.js\").Size} size Size of the image [width, height].\n * @property {Array<import(\"../size.js\").Size>} [sizes] Supported scaled image sizes.\n * Content of the IIIF info.json 'sizes' property, but as array of Size objects.\n * @property {import(\"./State.js\").default} [state] Source state.\n * @property {Array<string>} [supports=[]] Supported IIIF region and size calculation\n * features.\n * @property {number} [tilePixelRatio]\n * @property {number|import(\"../size.js\").Size} [tileSize] Tile size.\n * Same tile size is used for all zoom levels. If tile size is a number,\n * a square tile is assumed. If the IIIF image service supports arbitrary\n * tiling (sizeByH, sizeByW, sizeByWh or sizeByPct as well as regionByPx or regionByPct\n * are supported), the default tilesize is 256.\n * @property {number} [transition]\n * @property {string} [url] Base URL of the IIIF Image service.\n * This should be the same as the IIIF Image ID.\n * @property {Versions} [version=Versions.VERSION2] Service's IIIF Image API version.\n * @property {number} [zDirection=0] Indicate which resolution should be used\n * by a renderer if the view resolution does not match any resolution of the tile source.\n * If 0, the nearest resolution will be used. If 1, the nearest lower resolution\n * will be used. If -1, the nearest higher resolution will be used.\n */\n\nfunction formatPercentage(percentage) {\n  return percentage.toLocaleString('en', {\n    maximumFractionDigits: 10\n  });\n}\n/**\n * @classdesc\n * Layer source for IIIF Image API services.\n * @api\n */\n\n\nvar IIIF =\n/** @class */\nfunction (_super) {\n  __extends(IIIF, _super);\n  /**\n   * @param {Options} opt_options Tile source options. Use {@link import(\"../format/IIIFInfo.js\").IIIFInfo}\n   * to parse Image API service information responses into constructor options.\n   * @api\n   */\n\n\n  function IIIF(opt_options) {\n    var _this = this;\n    /**\n     * @type {Partial<Options>}\n     */\n\n\n    var options = opt_options || {};\n    var baseUrl = options.url || '';\n    baseUrl = baseUrl + (baseUrl.lastIndexOf('/') === baseUrl.length - 1 || baseUrl === '' ? '' : '/');\n    var version = options.version || Versions.VERSION2;\n    var sizes = options.sizes || [];\n    var size = options.size;\n    assert(size != undefined && Array.isArray(size) && size.length == 2 && !isNaN(size[0]) && size[0] > 0 && !isNaN(size[1]) && size[1] > 0, 60);\n    var width = size[0];\n    var height = size[1];\n    var tileSize = options.tileSize;\n    var tilePixelRatio = options.tilePixelRatio || 1;\n    var format = options.format || 'jpg';\n    var quality = options.quality || (options.version == Versions.VERSION1 ? 'native' : 'default');\n    var resolutions = options.resolutions || [];\n    var supports = options.supports || [];\n    var extent = options.extent || [0, -height, width, 0];\n    var supportsListedSizes = sizes != undefined && Array.isArray(sizes) && sizes.length > 0;\n    var supportsListedTiles = tileSize !== undefined && (typeof tileSize === 'number' && Number.isInteger(tileSize) && tileSize > 0 || Array.isArray(tileSize) && tileSize.length > 0);\n    var supportsArbitraryTiling = supports != undefined && Array.isArray(supports) && (supports.includes('regionByPx') || supports.includes('regionByPct')) && (supports.includes('sizeByWh') || supports.includes('sizeByH') || supports.includes('sizeByW') || supports.includes('sizeByPct'));\n    var tileWidth, tileHeight, maxZoom;\n    resolutions.sort(function (a, b) {\n      return b - a;\n    });\n\n    if (supportsListedTiles || supportsArbitraryTiling) {\n      if (tileSize != undefined) {\n        if (typeof tileSize === 'number' && Number.isInteger(tileSize) && tileSize > 0) {\n          tileWidth = tileSize;\n          tileHeight = tileSize;\n        } else if (Array.isArray(tileSize) && tileSize.length > 0) {\n          if (tileSize.length == 1 || tileSize[1] == undefined && Number.isInteger(tileSize[0])) {\n            tileWidth = tileSize[0];\n            tileHeight = tileSize[0];\n          }\n\n          if (tileSize.length == 2) {\n            if (Number.isInteger(tileSize[0]) && Number.isInteger(tileSize[1])) {\n              tileWidth = tileSize[0];\n              tileHeight = tileSize[1];\n            } else if (tileSize[0] == undefined && Number.isInteger(tileSize[1])) {\n              tileWidth = tileSize[1];\n              tileHeight = tileSize[1];\n            }\n          }\n        }\n      }\n\n      if (tileWidth === undefined || tileHeight === undefined) {\n        tileWidth = DEFAULT_TILE_SIZE;\n        tileHeight = DEFAULT_TILE_SIZE;\n      }\n\n      if (resolutions.length == 0) {\n        maxZoom = Math.max(Math.ceil(Math.log(width / tileWidth) / Math.LN2), Math.ceil(Math.log(height / tileHeight) / Math.LN2));\n\n        for (var i = maxZoom; i >= 0; i--) {\n          resolutions.push(Math.pow(2, i));\n        }\n      } else {\n        var maxScaleFactor = Math.max.apply(Math, resolutions); // TODO maxScaleFactor might not be a power to 2\n\n        maxZoom = Math.round(Math.log(maxScaleFactor) / Math.LN2);\n      }\n    } else {\n      // No tile support.\n      tileWidth = width;\n      tileHeight = height;\n      resolutions = [];\n\n      if (supportsListedSizes) {\n        /*\n         * 'sizes' provided. Use full region in different resolutions. Every\n         * resolution has only one tile.\n         */\n        sizes.sort(function (a, b) {\n          return a[0] - b[0];\n        });\n        maxZoom = -1;\n        var ignoredSizesIndex = [];\n\n        for (var i = 0; i < sizes.length; i++) {\n          var resolution = width / sizes[i][0];\n\n          if (resolutions.length > 0 && resolutions[resolutions.length - 1] == resolution) {\n            ignoredSizesIndex.push(i);\n            continue;\n          }\n\n          resolutions.push(resolution);\n          maxZoom++;\n        }\n\n        if (ignoredSizesIndex.length > 0) {\n          for (var i = 0; i < ignoredSizesIndex.length; i++) {\n            sizes.splice(ignoredSizesIndex[i] - i, 1);\n          }\n        }\n      } else {\n        // No useful image information at all. Try pseudo tile with full image.\n        resolutions.push(1);\n        sizes.push([width, height]);\n        maxZoom = 0;\n      }\n    }\n\n    var tileGrid = new TileGrid({\n      tileSize: [tileWidth, tileHeight],\n      extent: extent,\n      origin: getTopLeft(extent),\n      resolutions: resolutions\n    });\n\n    var tileUrlFunction = function (tileCoord, pixelRatio, projection) {\n      var regionParam, sizeParam;\n      var zoom = tileCoord[0];\n\n      if (zoom > maxZoom) {\n        return;\n      }\n\n      var tileX = tileCoord[1],\n          tileY = tileCoord[2],\n          scale = resolutions[zoom];\n\n      if (tileX === undefined || tileY === undefined || scale === undefined || tileX < 0 || Math.ceil(width / scale / tileWidth) <= tileX || tileY < 0 || Math.ceil(height / scale / tileHeight) <= tileY) {\n        return;\n      }\n\n      if (supportsArbitraryTiling || supportsListedTiles) {\n        var regionX = tileX * tileWidth * scale,\n            regionY = tileY * tileHeight * scale;\n        var regionW = tileWidth * scale,\n            regionH = tileHeight * scale,\n            sizeW = tileWidth,\n            sizeH = tileHeight;\n\n        if (regionX + regionW > width) {\n          regionW = width - regionX;\n        }\n\n        if (regionY + regionH > height) {\n          regionH = height - regionY;\n        }\n\n        if (regionX + tileWidth * scale > width) {\n          sizeW = Math.floor((width - regionX + scale - 1) / scale);\n        }\n\n        if (regionY + tileHeight * scale > height) {\n          sizeH = Math.floor((height - regionY + scale - 1) / scale);\n        }\n\n        if (regionX == 0 && regionW == width && regionY == 0 && regionH == height) {\n          // canonical full image region parameter is 'full', not 'x,y,w,h'\n          regionParam = 'full';\n        } else if (!supportsArbitraryTiling || supports.includes('regionByPx')) {\n          regionParam = regionX + ',' + regionY + ',' + regionW + ',' + regionH;\n        } else if (supports.includes('regionByPct')) {\n          var pctX = formatPercentage(regionX / width * 100),\n              pctY = formatPercentage(regionY / height * 100),\n              pctW = formatPercentage(regionW / width * 100),\n              pctH = formatPercentage(regionH / height * 100);\n          regionParam = 'pct:' + pctX + ',' + pctY + ',' + pctW + ',' + pctH;\n        }\n\n        if (version == Versions.VERSION3 && (!supportsArbitraryTiling || supports.includes('sizeByWh'))) {\n          sizeParam = sizeW + ',' + sizeH;\n        } else if (!supportsArbitraryTiling || supports.includes('sizeByW')) {\n          sizeParam = sizeW + ',';\n        } else if (supports.includes('sizeByH')) {\n          sizeParam = ',' + sizeH;\n        } else if (supports.includes('sizeByWh')) {\n          sizeParam = sizeW + ',' + sizeH;\n        } else if (supports.includes('sizeByPct')) {\n          sizeParam = 'pct:' + formatPercentage(100 / scale);\n        }\n      } else {\n        regionParam = 'full';\n\n        if (supportsListedSizes) {\n          var regionWidth = sizes[zoom][0],\n              regionHeight = sizes[zoom][1];\n\n          if (version == Versions.VERSION3) {\n            if (regionWidth == width && regionHeight == height) {\n              sizeParam = 'max';\n            } else {\n              sizeParam = regionWidth + ',' + regionHeight;\n            }\n          } else {\n            if (regionWidth == width) {\n              sizeParam = 'full';\n            } else {\n              sizeParam = regionWidth + ',';\n            }\n          }\n        } else {\n          sizeParam = version == Versions.VERSION3 ? 'max' : 'full';\n        }\n      }\n\n      return baseUrl + regionParam + '/' + sizeParam + '/0/' + quality + '.' + format;\n    };\n\n    var IiifTileClass = CustomTile.bind(null, toSize(tileSize || 256).map(function (size) {\n      return size * tilePixelRatio;\n    }));\n    _this = _super.call(this, {\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      projection: options.projection,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      state: options.state,\n      tileClass: IiifTileClass,\n      tileGrid: tileGrid,\n      tilePixelRatio: options.tilePixelRatio,\n      tileUrlFunction: tileUrlFunction,\n      transition: options.transition\n    }) || this;\n    /**\n     * @inheritDoc\n     */\n\n    _this.zDirection = options.zDirection;\n    return _this;\n  }\n\n  return IIIF;\n}(TileImage);\n\nexport default IIIF;","map":{"version":3,"sources":["../src/source/IIIF.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @module ol/source/IIIF\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { DEFAULT_TILE_SIZE } from '../tilegrid/common.js';\nimport { getTopLeft } from '../extent.js';\nimport { CustomTile } from './Zoomify.js';\nimport { Versions } from '../format/IIIFInfo.js';\nimport { assert } from '../asserts.js';\nimport TileGrid from '../tilegrid/TileGrid.js';\nimport TileImage from './TileImage.js';\nimport { toSize } from '../size.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize]\n * @property {null|string} [crossOrigin]\n * @property {import(\"../extent.js\").Extent} [extent=[0, -height, width, 0]]\n * @property {string} [format='jpg'] Requested image format.\n * @property {import(\"../proj.js\").ProjectionLike} [projection]\n * @property {string} [quality] Requested IIIF image quality. Default is 'native'\n * for version 1, 'default' for versions 2 and 3.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {Array<number>} [resolutions] Supported resolutions as given in IIIF 'scaleFactors'\n * @property {import(\"../size.js\").Size} size Size of the image [width, height].\n * @property {Array<import(\"../size.js\").Size>} [sizes] Supported scaled image sizes.\n * Content of the IIIF info.json 'sizes' property, but as array of Size objects.\n * @property {import(\"./State.js\").default} [state] Source state.\n * @property {Array<string>} [supports=[]] Supported IIIF region and size calculation\n * features.\n * @property {number} [tilePixelRatio]\n * @property {number|import(\"../size.js\").Size} [tileSize] Tile size.\n * Same tile size is used for all zoom levels. If tile size is a number,\n * a square tile is assumed. If the IIIF image service supports arbitrary\n * tiling (sizeByH, sizeByW, sizeByWh or sizeByPct as well as regionByPx or regionByPct\n * are supported), the default tilesize is 256.\n * @property {number} [transition]\n * @property {string} [url] Base URL of the IIIF Image service.\n * This should be the same as the IIIF Image ID.\n * @property {Versions} [version=Versions.VERSION2] Service's IIIF Image API version.\n * @property {number} [zDirection=0] Indicate which resolution should be used\n * by a renderer if the view resolution does not match any resolution of the tile source.\n * If 0, the nearest resolution will be used. If 1, the nearest lower resolution\n * will be used. If -1, the nearest higher resolution will be used.\n */\nfunction formatPercentage(percentage) {\n    return percentage.toLocaleString('en', { maximumFractionDigits: 10 });\n}\n/**\n * @classdesc\n * Layer source for IIIF Image API services.\n * @api\n */\nvar IIIF = /** @class */ (function (_super) {\n    __extends(IIIF, _super);\n    /**\n     * @param {Options} opt_options Tile source options. Use {@link import(\"../format/IIIFInfo.js\").IIIFInfo}\n     * to parse Image API service information responses into constructor options.\n     * @api\n     */\n    function IIIF(opt_options) {\n        var _this = this;\n        /**\n         * @type {Partial<Options>}\n         */\n        var options = opt_options || {};\n        var baseUrl = options.url || '';\n        baseUrl = baseUrl + (baseUrl.lastIndexOf('/') === baseUrl.length - 1 || baseUrl === '' ? '' : '/');\n        var version = options.version || Versions.VERSION2;\n        var sizes = options.sizes || [];\n        var size = options.size;\n        assert(size != undefined && Array.isArray(size) && size.length == 2 &&\n            !isNaN(size[0]) && size[0] > 0 && !isNaN(size[1]) && size[1] > 0, 60);\n        var width = size[0];\n        var height = size[1];\n        var tileSize = options.tileSize;\n        var tilePixelRatio = options.tilePixelRatio || 1;\n        var format = options.format || 'jpg';\n        var quality = options.quality || (options.version == Versions.VERSION1 ? 'native' : 'default');\n        var resolutions = options.resolutions || [];\n        var supports = options.supports || [];\n        var extent = options.extent || [0, -height, width, 0];\n        var supportsListedSizes = sizes != undefined && Array.isArray(sizes) && sizes.length > 0;\n        var supportsListedTiles = tileSize !== undefined && (typeof tileSize === 'number' && Number.isInteger(tileSize) && tileSize > 0 || Array.isArray(tileSize) && tileSize.length > 0);\n        var supportsArbitraryTiling = supports != undefined && Array.isArray(supports) &&\n            (supports.includes('regionByPx') || supports.includes('regionByPct')) &&\n            (supports.includes('sizeByWh') || supports.includes('sizeByH') ||\n                supports.includes('sizeByW') || supports.includes('sizeByPct'));\n        var tileWidth, tileHeight, maxZoom;\n        resolutions.sort(function (a, b) {\n            return b - a;\n        });\n        if (supportsListedTiles || supportsArbitraryTiling) {\n            if (tileSize != undefined) {\n                if (typeof tileSize === 'number' && Number.isInteger(tileSize) && tileSize > 0) {\n                    tileWidth = tileSize;\n                    tileHeight = tileSize;\n                }\n                else if (Array.isArray(tileSize) && tileSize.length > 0) {\n                    if (tileSize.length == 1 || tileSize[1] == undefined && Number.isInteger(tileSize[0])) {\n                        tileWidth = tileSize[0];\n                        tileHeight = tileSize[0];\n                    }\n                    if (tileSize.length == 2) {\n                        if (Number.isInteger(tileSize[0]) && Number.isInteger(tileSize[1])) {\n                            tileWidth = tileSize[0];\n                            tileHeight = tileSize[1];\n                        }\n                        else if (tileSize[0] == undefined && Number.isInteger(tileSize[1])) {\n                            tileWidth = tileSize[1];\n                            tileHeight = tileSize[1];\n                        }\n                    }\n                }\n            }\n            if (tileWidth === undefined || tileHeight === undefined) {\n                tileWidth = DEFAULT_TILE_SIZE;\n                tileHeight = DEFAULT_TILE_SIZE;\n            }\n            if (resolutions.length == 0) {\n                maxZoom = Math.max(Math.ceil(Math.log(width / tileWidth) / Math.LN2), Math.ceil(Math.log(height / tileHeight) / Math.LN2));\n                for (var i = maxZoom; i >= 0; i--) {\n                    resolutions.push(Math.pow(2, i));\n                }\n            }\n            else {\n                var maxScaleFactor = Math.max.apply(Math, resolutions);\n                // TODO maxScaleFactor might not be a power to 2\n                maxZoom = Math.round(Math.log(maxScaleFactor) / Math.LN2);\n            }\n        }\n        else {\n            // No tile support.\n            tileWidth = width;\n            tileHeight = height;\n            resolutions = [];\n            if (supportsListedSizes) {\n                /*\n                 * 'sizes' provided. Use full region in different resolutions. Every\n                 * resolution has only one tile.\n                 */\n                sizes.sort(function (a, b) {\n                    return a[0] - b[0];\n                });\n                maxZoom = -1;\n                var ignoredSizesIndex = [];\n                for (var i = 0; i < sizes.length; i++) {\n                    var resolution = width / sizes[i][0];\n                    if (resolutions.length > 0 && resolutions[resolutions.length - 1] == resolution) {\n                        ignoredSizesIndex.push(i);\n                        continue;\n                    }\n                    resolutions.push(resolution);\n                    maxZoom++;\n                }\n                if (ignoredSizesIndex.length > 0) {\n                    for (var i = 0; i < ignoredSizesIndex.length; i++) {\n                        sizes.splice(ignoredSizesIndex[i] - i, 1);\n                    }\n                }\n            }\n            else {\n                // No useful image information at all. Try pseudo tile with full image.\n                resolutions.push(1);\n                sizes.push([width, height]);\n                maxZoom = 0;\n            }\n        }\n        var tileGrid = new TileGrid({\n            tileSize: [tileWidth, tileHeight],\n            extent: extent,\n            origin: getTopLeft(extent),\n            resolutions: resolutions\n        });\n        var tileUrlFunction = function (tileCoord, pixelRatio, projection) {\n            var regionParam, sizeParam;\n            var zoom = tileCoord[0];\n            if (zoom > maxZoom) {\n                return;\n            }\n            var tileX = tileCoord[1], tileY = tileCoord[2], scale = resolutions[zoom];\n            if (tileX === undefined || tileY === undefined || scale === undefined ||\n                tileX < 0 || Math.ceil(width / scale / tileWidth) <= tileX ||\n                tileY < 0 || Math.ceil(height / scale / tileHeight) <= tileY) {\n                return;\n            }\n            if (supportsArbitraryTiling || supportsListedTiles) {\n                var regionX = tileX * tileWidth * scale, regionY = tileY * tileHeight * scale;\n                var regionW = tileWidth * scale, regionH = tileHeight * scale, sizeW = tileWidth, sizeH = tileHeight;\n                if (regionX + regionW > width) {\n                    regionW = width - regionX;\n                }\n                if (regionY + regionH > height) {\n                    regionH = height - regionY;\n                }\n                if (regionX + tileWidth * scale > width) {\n                    sizeW = Math.floor((width - regionX + scale - 1) / scale);\n                }\n                if (regionY + tileHeight * scale > height) {\n                    sizeH = Math.floor((height - regionY + scale - 1) / scale);\n                }\n                if (regionX == 0 && regionW == width && regionY == 0 && regionH == height) {\n                    // canonical full image region parameter is 'full', not 'x,y,w,h'\n                    regionParam = 'full';\n                }\n                else if (!supportsArbitraryTiling || supports.includes('regionByPx')) {\n                    regionParam = regionX + ',' + regionY + ',' + regionW + ',' + regionH;\n                }\n                else if (supports.includes('regionByPct')) {\n                    var pctX = formatPercentage(regionX / width * 100), pctY = formatPercentage(regionY / height * 100), pctW = formatPercentage(regionW / width * 100), pctH = formatPercentage(regionH / height * 100);\n                    regionParam = 'pct:' + pctX + ',' + pctY + ',' + pctW + ',' + pctH;\n                }\n                if (version == Versions.VERSION3 && (!supportsArbitraryTiling || supports.includes('sizeByWh'))) {\n                    sizeParam = sizeW + ',' + sizeH;\n                }\n                else if (!supportsArbitraryTiling || supports.includes('sizeByW')) {\n                    sizeParam = sizeW + ',';\n                }\n                else if (supports.includes('sizeByH')) {\n                    sizeParam = ',' + sizeH;\n                }\n                else if (supports.includes('sizeByWh')) {\n                    sizeParam = sizeW + ',' + sizeH;\n                }\n                else if (supports.includes('sizeByPct')) {\n                    sizeParam = 'pct:' + formatPercentage(100 / scale);\n                }\n            }\n            else {\n                regionParam = 'full';\n                if (supportsListedSizes) {\n                    var regionWidth = sizes[zoom][0], regionHeight = sizes[zoom][1];\n                    if (version == Versions.VERSION3) {\n                        if (regionWidth == width && regionHeight == height) {\n                            sizeParam = 'max';\n                        }\n                        else {\n                            sizeParam = regionWidth + ',' + regionHeight;\n                        }\n                    }\n                    else {\n                        if (regionWidth == width) {\n                            sizeParam = 'full';\n                        }\n                        else {\n                            sizeParam = regionWidth + ',';\n                        }\n                    }\n                }\n                else {\n                    sizeParam = version == Versions.VERSION3 ? 'max' : 'full';\n                }\n            }\n            return baseUrl + regionParam + '/' + sizeParam + '/0/' + quality + '.' + format;\n        };\n        var IiifTileClass = CustomTile.bind(null, toSize(tileSize || 256).map(function (size) {\n            return size * tilePixelRatio;\n        }));\n        _this = _super.call(this, {\n            attributions: options.attributions,\n            attributionsCollapsible: options.attributionsCollapsible,\n            cacheSize: options.cacheSize,\n            crossOrigin: options.crossOrigin,\n            projection: options.projection,\n            reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n            state: options.state,\n            tileClass: IiifTileClass,\n            tileGrid: tileGrid,\n            tilePixelRatio: options.tilePixelRatio,\n            tileUrlFunction: tileUrlFunction,\n            transition: options.transition\n        }) || this;\n        /**\n         * @inheritDoc\n         */\n        _this.zDirection = options.zDirection;\n        return _this;\n    }\n    return IIIF;\n}(TileImage));\nexport default IIIF;\n//# sourceMappingURL=IIIF.js.map"]},"metadata":{},"sourceType":"module"}