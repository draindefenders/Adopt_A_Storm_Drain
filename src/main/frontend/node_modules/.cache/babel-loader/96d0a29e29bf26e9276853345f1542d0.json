{"ast":null,"code":"/**\n * @module ol/render/canvas\n */\nimport { getFontParameters } from '../css.js';\nimport { createCanvasContext2D } from '../dom.js';\nimport { clear } from '../obj.js';\nimport BaseObject from '../Object.js';\nimport EventTarget from '../events/Target.js';\n/**\n * @typedef {Object} FillState\n * @property {import(\"../colorlike.js\").ColorLike} fillStyle\n */\n\n/**\n * @typedef Label\n * @property {number} width\n * @property {number} height\n * @property {Array<string|number>} contextInstructions\n */\n\n/**\n * @typedef {Object} FillStrokeState\n * @property {import(\"../colorlike.js\").ColorLike} [currentFillStyle]\n * @property {import(\"../colorlike.js\").ColorLike} [currentStrokeStyle]\n * @property {CanvasLineCap} [currentLineCap]\n * @property {Array<number>} currentLineDash\n * @property {number} [currentLineDashOffset]\n * @property {CanvasLineJoin} [currentLineJoin]\n * @property {number} [currentLineWidth]\n * @property {number} [currentMiterLimit]\n * @property {number} [lastStroke]\n * @property {import(\"../colorlike.js\").ColorLike} [fillStyle]\n * @property {import(\"../colorlike.js\").ColorLike} [strokeStyle]\n * @property {CanvasLineCap} [lineCap]\n * @property {Array<number>} lineDash\n * @property {number} [lineDashOffset]\n * @property {CanvasLineJoin} [lineJoin]\n * @property {number} [lineWidth]\n * @property {number} [miterLimit]\n */\n\n/**\n * @typedef {Object} StrokeState\n * @property {CanvasLineCap} lineCap\n * @property {Array<number>} lineDash\n * @property {number} lineDashOffset\n * @property {CanvasLineJoin} lineJoin\n * @property {number} lineWidth\n * @property {number} miterLimit\n * @property {import(\"../colorlike.js\").ColorLike} strokeStyle\n */\n\n/**\n * @typedef {Object} TextState\n * @property {string} font\n * @property {string} [textAlign]\n * @property {string} textBaseline\n * @property {string} [placement]\n * @property {number} [maxAngle]\n * @property {boolean} [overflow]\n * @property {import(\"../style/Fill.js\").default} [backgroundFill]\n * @property {import(\"../style/Stroke.js\").default} [backgroundStroke]\n * @property {number} [scale]\n * @property {Array<number>} [padding]\n */\n\n/**\n * Container for decluttered replay instructions that need to be rendered or\n * omitted together, i.e. when styles render both an image and text, or for the\n * characters that form text along lines. The basic elements of this array are\n * `[minX, minY, maxX, maxY, count]`, where the first four entries are the\n * rendered extent of the group in pixel space. `count` is the number of styles\n * in the group, i.e. 2 when an image and a text are grouped, or 1 otherwise.\n * In addition to these four elements, declutter instruction arrays (i.e. the\n * arguments to {@link module:ol/render/canvas~drawImage} are appended to the array.\n * @typedef {Array<*>} DeclutterGroup\n */\n\n/**\n * Declutter groups for support of multi geometries.\n * @typedef {Array<DeclutterGroup>} DeclutterGroups\n */\n\n/**\n * @const\n * @type {string}\n */\n\nexport var defaultFont = '10px sans-serif';\n/**\n * @const\n * @type {import(\"../colorlike.js\").ColorLike}\n */\n\nexport var defaultFillStyle = '#000';\n/**\n * @const\n * @type {CanvasLineCap}\n */\n\nexport var defaultLineCap = 'round';\n/**\n * @const\n * @type {Array<number>}\n */\n\nexport var defaultLineDash = [];\n/**\n * @const\n * @type {number}\n */\n\nexport var defaultLineDashOffset = 0;\n/**\n * @const\n * @type {CanvasLineJoin}\n */\n\nexport var defaultLineJoin = 'round';\n/**\n * @const\n * @type {number}\n */\n\nexport var defaultMiterLimit = 10;\n/**\n * @const\n * @type {import(\"../colorlike.js\").ColorLike}\n */\n\nexport var defaultStrokeStyle = '#000';\n/**\n * @const\n * @type {string}\n */\n\nexport var defaultTextAlign = 'center';\n/**\n * @const\n * @type {string}\n */\n\nexport var defaultTextBaseline = 'middle';\n/**\n * @const\n * @type {Array<number>}\n */\n\nexport var defaultPadding = [0, 0, 0, 0];\n/**\n * @const\n * @type {number}\n */\n\nexport var defaultLineWidth = 1;\n/**\n * @type {BaseObject}\n */\n\nexport var checkedFonts = new BaseObject();\n/**\n * The label cache for text rendering. To change the default cache size of 2048\n * entries, use {@link module:ol/structs/LRUCache#setSize}.\n * Deprecated - there is no label cache any more.\n * @type {?}\n * @api\n * @deprecated\n */\n\nexport var labelCache = new EventTarget();\n\nlabelCache.setSize = function () {\n  console.warn('labelCache is deprecated.'); //eslint-disable-line\n};\n/**\n * @type {CanvasRenderingContext2D}\n */\n\n\nvar measureContext = null;\n/**\n * @type {string}\n */\n\nvar measureFont;\n/**\n * @type {!Object<string, number>}\n */\n\nexport var textHeights = {};\n/**\n * Clears the label cache when a font becomes available.\n * @param {string} fontSpec CSS font spec.\n */\n\nexport var registerFont = function () {\n  var retries = 100;\n  var size = '32px ';\n  var referenceFonts = ['monospace', 'serif'];\n  var len = referenceFonts.length;\n  var text = 'wmytzilWMYTZIL@#/&?$%10\\uF013';\n  var interval, referenceWidth;\n  /**\n   * @param {string} fontStyle Css font-style\n   * @param {string} fontWeight Css font-weight\n   * @param {*} fontFamily Css font-family\n   * @return {boolean} Font with style and weight is available\n   */\n\n  function isAvailable(fontStyle, fontWeight, fontFamily) {\n    var available = true;\n\n    for (var i = 0; i < len; ++i) {\n      var referenceFont = referenceFonts[i];\n      referenceWidth = measureTextWidth(fontStyle + ' ' + fontWeight + ' ' + size + referenceFont, text);\n\n      if (fontFamily != referenceFont) {\n        var width = measureTextWidth(fontStyle + ' ' + fontWeight + ' ' + size + fontFamily + ',' + referenceFont, text); // If width and referenceWidth are the same, then the fallback was used\n        // instead of the font we wanted, so the font is not available.\n\n        available = available && width != referenceWidth;\n      }\n    }\n\n    if (available) {\n      return true;\n    }\n\n    return false;\n  }\n\n  function check() {\n    var done = true;\n    var fonts = checkedFonts.getKeys();\n\n    for (var i = 0, ii = fonts.length; i < ii; ++i) {\n      var font = fonts[i];\n\n      if (checkedFonts.get(font) < retries) {\n        if (isAvailable.apply(this, font.split('\\n'))) {\n          clear(textHeights); // Make sure that loaded fonts are picked up by Safari\n\n          measureContext = null;\n          measureFont = undefined;\n          checkedFonts.set(font, retries);\n        } else {\n          checkedFonts.set(font, checkedFonts.get(font) + 1, true);\n          done = false;\n        }\n      }\n    }\n\n    if (done) {\n      clearInterval(interval);\n      interval = undefined;\n    }\n  }\n\n  return function (fontSpec) {\n    var font = getFontParameters(fontSpec);\n\n    if (!font) {\n      return;\n    }\n\n    var families = font.families;\n\n    for (var i = 0, ii = families.length; i < ii; ++i) {\n      var family = families[i];\n      var key = font.style + '\\n' + font.weight + '\\n' + family;\n\n      if (checkedFonts.get(key) === undefined) {\n        checkedFonts.set(key, retries, true);\n\n        if (!isAvailable(font.style, font.weight, family)) {\n          checkedFonts.set(key, 0, true);\n\n          if (interval === undefined) {\n            interval = setInterval(check, 32);\n          }\n        }\n      }\n    }\n  };\n}();\n/**\n * @param {string} font Font to use for measuring.\n * @return {import(\"../size.js\").Size} Measurement.\n */\n\nexport var measureTextHeight = function () {\n  /**\n   * @type {HTMLDivElement}\n   */\n  var div;\n  var heights = textHeights;\n  return function (font) {\n    var height = heights[font];\n\n    if (height == undefined) {\n      if (!div) {\n        div = document.createElement('div');\n        div.innerHTML = 'M';\n        div.style.margin = '0 !important';\n        div.style.padding = '0 !important';\n        div.style.position = 'absolute !important';\n        div.style.left = '-99999px !important';\n      }\n\n      div.style.font = font;\n      document.body.appendChild(div);\n      height = div.offsetHeight;\n      heights[font] = height;\n      document.body.removeChild(div);\n    }\n\n    return height;\n  };\n}();\n/**\n * @param {string} font Font.\n * @param {string} text Text.\n * @return {number} Width.\n */\n\nexport function measureTextWidth(font, text) {\n  if (!measureContext) {\n    measureContext = createCanvasContext2D(1, 1);\n  }\n\n  if (font != measureFont) {\n    measureContext.font = font;\n    measureFont = measureContext.font;\n  }\n\n  return measureContext.measureText(text).width;\n}\n/**\n * Measure text width using a cache.\n * @param {string} font The font.\n * @param {string} text The text to measure.\n * @param {Object<string, number>} cache A lookup of cached widths by text.\n * @returns {number} The text width.\n */\n\nexport function measureAndCacheTextWidth(font, text, cache) {\n  if (text in cache) {\n    return cache[text];\n  }\n\n  var width = measureTextWidth(font, text);\n  cache[text] = width;\n  return width;\n}\n/**\n * @param {string} font Font to use for measuring.\n * @param {Array<string>} lines Lines to measure.\n * @param {Array<number>} widths Array will be populated with the widths of\n * each line.\n * @return {number} Width of the whole text.\n */\n\nexport function measureTextWidths(font, lines, widths) {\n  var numLines = lines.length;\n  var width = 0;\n\n  for (var i = 0; i < numLines; ++i) {\n    var currentWidth = measureTextWidth(font, lines[i]);\n    width = Math.max(width, currentWidth);\n    widths.push(currentWidth);\n  }\n\n  return width;\n}\n/**\n * @param {CanvasRenderingContext2D} context Context.\n * @param {number} rotation Rotation.\n * @param {number} offsetX X offset.\n * @param {number} offsetY Y offset.\n */\n\nexport function rotateAtOffset(context, rotation, offsetX, offsetY) {\n  if (rotation !== 0) {\n    context.translate(offsetX, offsetY);\n    context.rotate(rotation);\n    context.translate(-offsetX, -offsetY);\n  }\n}\n/**\n * @param {CanvasRenderingContext2D} context Context.\n * @param {import(\"../transform.js\").Transform|null} transform Transform.\n * @param {number} opacity Opacity.\n * @param {Label|HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} labelOrImage Label.\n * @param {number} originX Origin X.\n * @param {number} originY Origin Y.\n * @param {number} w Width.\n * @param {number} h Height.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {number} scale Scale.\n */\n\nexport function drawImageOrLabel(context, transform, opacity, labelOrImage, originX, originY, w, h, x, y, scale) {\n  context.save();\n\n  if (transform) {\n    context.setTransform.apply(context, transform);\n  }\n\n  if (\n  /** @type {*} */\n  labelOrImage.contextInstructions) {\n    // label\n    context.translate(x, y);\n    context.scale(scale, scale);\n    executeLabelInstructions(\n    /** @type {Label} */\n    labelOrImage, context);\n  } else {\n    // image\n    context.drawImage(\n    /** @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} */\n    labelOrImage, originX, originY, w, h, x, y, w * scale, h * scale);\n  }\n\n  context.restore();\n}\n/**\n * @param {Label} label Label.\n * @param {CanvasRenderingContext2D} context Context.\n */\n\nfunction executeLabelInstructions(label, context) {\n  var contextInstructions = label.contextInstructions;\n\n  for (var i = 0, ii = contextInstructions.length; i < ii; i += 2) {\n    if (Array.isArray(contextInstructions[i + 1])) {\n      CanvasRenderingContext2D.prototype[contextInstructions[i]].apply(context, contextInstructions[i + 1]);\n    } else {\n      context[contextInstructions[i]] = contextInstructions[i + 1];\n    }\n  }\n}","map":{"version":3,"sources":["../src/render/canvas.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @module ol/render/canvas\n */\nimport { getFontParameters } from '../css.js';\nimport { createCanvasContext2D } from '../dom.js';\nimport { clear } from '../obj.js';\nimport BaseObject from '../Object.js';\nimport EventTarget from '../events/Target.js';\n/**\n * @typedef {Object} FillState\n * @property {import(\"../colorlike.js\").ColorLike} fillStyle\n */\n/**\n * @typedef Label\n * @property {number} width\n * @property {number} height\n * @property {Array<string|number>} contextInstructions\n */\n/**\n * @typedef {Object} FillStrokeState\n * @property {import(\"../colorlike.js\").ColorLike} [currentFillStyle]\n * @property {import(\"../colorlike.js\").ColorLike} [currentStrokeStyle]\n * @property {CanvasLineCap} [currentLineCap]\n * @property {Array<number>} currentLineDash\n * @property {number} [currentLineDashOffset]\n * @property {CanvasLineJoin} [currentLineJoin]\n * @property {number} [currentLineWidth]\n * @property {number} [currentMiterLimit]\n * @property {number} [lastStroke]\n * @property {import(\"../colorlike.js\").ColorLike} [fillStyle]\n * @property {import(\"../colorlike.js\").ColorLike} [strokeStyle]\n * @property {CanvasLineCap} [lineCap]\n * @property {Array<number>} lineDash\n * @property {number} [lineDashOffset]\n * @property {CanvasLineJoin} [lineJoin]\n * @property {number} [lineWidth]\n * @property {number} [miterLimit]\n */\n/**\n * @typedef {Object} StrokeState\n * @property {CanvasLineCap} lineCap\n * @property {Array<number>} lineDash\n * @property {number} lineDashOffset\n * @property {CanvasLineJoin} lineJoin\n * @property {number} lineWidth\n * @property {number} miterLimit\n * @property {import(\"../colorlike.js\").ColorLike} strokeStyle\n */\n/**\n * @typedef {Object} TextState\n * @property {string} font\n * @property {string} [textAlign]\n * @property {string} textBaseline\n * @property {string} [placement]\n * @property {number} [maxAngle]\n * @property {boolean} [overflow]\n * @property {import(\"../style/Fill.js\").default} [backgroundFill]\n * @property {import(\"../style/Stroke.js\").default} [backgroundStroke]\n * @property {number} [scale]\n * @property {Array<number>} [padding]\n */\n/**\n * Container for decluttered replay instructions that need to be rendered or\n * omitted together, i.e. when styles render both an image and text, or for the\n * characters that form text along lines. The basic elements of this array are\n * `[minX, minY, maxX, maxY, count]`, where the first four entries are the\n * rendered extent of the group in pixel space. `count` is the number of styles\n * in the group, i.e. 2 when an image and a text are grouped, or 1 otherwise.\n * In addition to these four elements, declutter instruction arrays (i.e. the\n * arguments to {@link module:ol/render/canvas~drawImage} are appended to the array.\n * @typedef {Array<*>} DeclutterGroup\n */\n/**\n * Declutter groups for support of multi geometries.\n * @typedef {Array<DeclutterGroup>} DeclutterGroups\n */\n/**\n * @const\n * @type {string}\n */\nexport var defaultFont = '10px sans-serif';\n/**\n * @const\n * @type {import(\"../colorlike.js\").ColorLike}\n */\nexport var defaultFillStyle = '#000';\n/**\n * @const\n * @type {CanvasLineCap}\n */\nexport var defaultLineCap = 'round';\n/**\n * @const\n * @type {Array<number>}\n */\nexport var defaultLineDash = [];\n/**\n * @const\n * @type {number}\n */\nexport var defaultLineDashOffset = 0;\n/**\n * @const\n * @type {CanvasLineJoin}\n */\nexport var defaultLineJoin = 'round';\n/**\n * @const\n * @type {number}\n */\nexport var defaultMiterLimit = 10;\n/**\n * @const\n * @type {import(\"../colorlike.js\").ColorLike}\n */\nexport var defaultStrokeStyle = '#000';\n/**\n * @const\n * @type {string}\n */\nexport var defaultTextAlign = 'center';\n/**\n * @const\n * @type {string}\n */\nexport var defaultTextBaseline = 'middle';\n/**\n * @const\n * @type {Array<number>}\n */\nexport var defaultPadding = [0, 0, 0, 0];\n/**\n * @const\n * @type {number}\n */\nexport var defaultLineWidth = 1;\n/**\n * @type {BaseObject}\n */\nexport var checkedFonts = new BaseObject();\n/**\n * The label cache for text rendering. To change the default cache size of 2048\n * entries, use {@link module:ol/structs/LRUCache#setSize}.\n * Deprecated - there is no label cache any more.\n * @type {?}\n * @api\n * @deprecated\n */\nexport var labelCache = new EventTarget();\nlabelCache.setSize = function () {\n    console.warn('labelCache is deprecated.'); //eslint-disable-line\n};\n/**\n * @type {CanvasRenderingContext2D}\n */\nvar measureContext = null;\n/**\n * @type {string}\n */\nvar measureFont;\n/**\n * @type {!Object<string, number>}\n */\nexport var textHeights = {};\n/**\n * Clears the label cache when a font becomes available.\n * @param {string} fontSpec CSS font spec.\n */\nexport var registerFont = (function () {\n    var retries = 100;\n    var size = '32px ';\n    var referenceFonts = ['monospace', 'serif'];\n    var len = referenceFonts.length;\n    var text = 'wmytzilWMYTZIL@#/&?$%10\\uF013';\n    var interval, referenceWidth;\n    /**\n     * @param {string} fontStyle Css font-style\n     * @param {string} fontWeight Css font-weight\n     * @param {*} fontFamily Css font-family\n     * @return {boolean} Font with style and weight is available\n     */\n    function isAvailable(fontStyle, fontWeight, fontFamily) {\n        var available = true;\n        for (var i = 0; i < len; ++i) {\n            var referenceFont = referenceFonts[i];\n            referenceWidth = measureTextWidth(fontStyle + ' ' + fontWeight + ' ' + size + referenceFont, text);\n            if (fontFamily != referenceFont) {\n                var width = measureTextWidth(fontStyle + ' ' + fontWeight + ' ' + size + fontFamily + ',' + referenceFont, text);\n                // If width and referenceWidth are the same, then the fallback was used\n                // instead of the font we wanted, so the font is not available.\n                available = available && width != referenceWidth;\n            }\n        }\n        if (available) {\n            return true;\n        }\n        return false;\n    }\n    function check() {\n        var done = true;\n        var fonts = checkedFonts.getKeys();\n        for (var i = 0, ii = fonts.length; i < ii; ++i) {\n            var font = fonts[i];\n            if (checkedFonts.get(font) < retries) {\n                if (isAvailable.apply(this, font.split('\\n'))) {\n                    clear(textHeights);\n                    // Make sure that loaded fonts are picked up by Safari\n                    measureContext = null;\n                    measureFont = undefined;\n                    checkedFonts.set(font, retries);\n                }\n                else {\n                    checkedFonts.set(font, checkedFonts.get(font) + 1, true);\n                    done = false;\n                }\n            }\n        }\n        if (done) {\n            clearInterval(interval);\n            interval = undefined;\n        }\n    }\n    return function (fontSpec) {\n        var font = getFontParameters(fontSpec);\n        if (!font) {\n            return;\n        }\n        var families = font.families;\n        for (var i = 0, ii = families.length; i < ii; ++i) {\n            var family = families[i];\n            var key = font.style + '\\n' + font.weight + '\\n' + family;\n            if (checkedFonts.get(key) === undefined) {\n                checkedFonts.set(key, retries, true);\n                if (!isAvailable(font.style, font.weight, family)) {\n                    checkedFonts.set(key, 0, true);\n                    if (interval === undefined) {\n                        interval = setInterval(check, 32);\n                    }\n                }\n            }\n        }\n    };\n})();\n/**\n * @param {string} font Font to use for measuring.\n * @return {import(\"../size.js\").Size} Measurement.\n */\nexport var measureTextHeight = (function () {\n    /**\n     * @type {HTMLDivElement}\n     */\n    var div;\n    var heights = textHeights;\n    return function (font) {\n        var height = heights[font];\n        if (height == undefined) {\n            if (!div) {\n                div = document.createElement('div');\n                div.innerHTML = 'M';\n                div.style.margin = '0 !important';\n                div.style.padding = '0 !important';\n                div.style.position = 'absolute !important';\n                div.style.left = '-99999px !important';\n            }\n            div.style.font = font;\n            document.body.appendChild(div);\n            height = div.offsetHeight;\n            heights[font] = height;\n            document.body.removeChild(div);\n        }\n        return height;\n    };\n})();\n/**\n * @param {string} font Font.\n * @param {string} text Text.\n * @return {number} Width.\n */\nexport function measureTextWidth(font, text) {\n    if (!measureContext) {\n        measureContext = createCanvasContext2D(1, 1);\n    }\n    if (font != measureFont) {\n        measureContext.font = font;\n        measureFont = measureContext.font;\n    }\n    return measureContext.measureText(text).width;\n}\n/**\n * Measure text width using a cache.\n * @param {string} font The font.\n * @param {string} text The text to measure.\n * @param {Object<string, number>} cache A lookup of cached widths by text.\n * @returns {number} The text width.\n */\nexport function measureAndCacheTextWidth(font, text, cache) {\n    if (text in cache) {\n        return cache[text];\n    }\n    var width = measureTextWidth(font, text);\n    cache[text] = width;\n    return width;\n}\n/**\n * @param {string} font Font to use for measuring.\n * @param {Array<string>} lines Lines to measure.\n * @param {Array<number>} widths Array will be populated with the widths of\n * each line.\n * @return {number} Width of the whole text.\n */\nexport function measureTextWidths(font, lines, widths) {\n    var numLines = lines.length;\n    var width = 0;\n    for (var i = 0; i < numLines; ++i) {\n        var currentWidth = measureTextWidth(font, lines[i]);\n        width = Math.max(width, currentWidth);\n        widths.push(currentWidth);\n    }\n    return width;\n}\n/**\n * @param {CanvasRenderingContext2D} context Context.\n * @param {number} rotation Rotation.\n * @param {number} offsetX X offset.\n * @param {number} offsetY Y offset.\n */\nexport function rotateAtOffset(context, rotation, offsetX, offsetY) {\n    if (rotation !== 0) {\n        context.translate(offsetX, offsetY);\n        context.rotate(rotation);\n        context.translate(-offsetX, -offsetY);\n    }\n}\n/**\n * @param {CanvasRenderingContext2D} context Context.\n * @param {import(\"../transform.js\").Transform|null} transform Transform.\n * @param {number} opacity Opacity.\n * @param {Label|HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} labelOrImage Label.\n * @param {number} originX Origin X.\n * @param {number} originY Origin Y.\n * @param {number} w Width.\n * @param {number} h Height.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {number} scale Scale.\n */\nexport function drawImageOrLabel(context, transform, opacity, labelOrImage, originX, originY, w, h, x, y, scale) {\n    context.save();\n    if (transform) {\n        context.setTransform.apply(context, transform);\n    }\n    if (( /** @type {*} */(labelOrImage).contextInstructions)) {\n        // label\n        context.translate(x, y);\n        context.scale(scale, scale);\n        executeLabelInstructions(/** @type {Label} */ (labelOrImage), context);\n    }\n    else {\n        // image\n        context.drawImage(/** @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} */ (labelOrImage), originX, originY, w, h, x, y, w * scale, h * scale);\n    }\n    context.restore();\n}\n/**\n * @param {Label} label Label.\n * @param {CanvasRenderingContext2D} context Context.\n */\nfunction executeLabelInstructions(label, context) {\n    var contextInstructions = label.contextInstructions;\n    for (var i = 0, ii = contextInstructions.length; i < ii; i += 2) {\n        if (Array.isArray(contextInstructions[i + 1])) {\n            CanvasRenderingContext2D.prototype[contextInstructions[i]].apply(context, contextInstructions[i + 1]);\n        }\n        else {\n            context[contextInstructions[i]] = contextInstructions[i + 1];\n        }\n    }\n}\n//# sourceMappingURL=canvas.js.map"]},"metadata":{},"sourceType":"module"}