{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/layer/Graticule\n */\n\n\nimport VectorLayer from './Vector.js';\nimport { assign } from '../obj.js';\nimport { degreesToStringHDMS } from '../coordinate.js';\nimport Text from '../style/Text.js';\nimport Fill from '../style/Fill.js';\nimport Stroke from '../style/Stroke.js';\nimport LineString from '../geom/LineString.js';\nimport VectorSource from '../source/Vector.js';\nimport { equivalent as equivalentProjection, get as getProjection, getTransform, transformExtent } from '../proj.js';\nimport { getCenter, intersects, equals, getIntersection, isEmpty } from '../extent.js';\nimport { clamp } from '../math.js';\nimport Style from '../style/Style.js';\nimport Feature from '../Feature.js';\nimport { meridian, parallel } from '../geom/flat/geodesic.js';\nimport GeometryLayout from '../geom/GeometryLayout.js';\nimport Point from '../geom/Point.js';\nimport Collection from '../Collection.js';\n/**\n * @type {Stroke}\n * @private\n * @const\n */\n\nvar DEFAULT_STROKE_STYLE = new Stroke({\n  color: 'rgba(0,0,0,0.2)'\n});\n/**\n * @type {Array<number>}\n * @private\n */\n\nvar INTERVALS = [90, 45, 30, 20, 10, 5, 2, 1, 0.5, 0.2, 0.1, 0.05, 0.01, 0.005, 0.002, 0.001];\n/**\n * @typedef {Object} GraticuleLabelDataType\n * @property {Point} geom\n * @property {string} text\n */\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [maxLines=100] The maximum number of meridians and\n * parallels from the center of the map. The default value of 100 means that at\n * most 200 meridians and 200 parallels will be displayed. The default value is\n * appropriate for conformal projections like Spherical Mercator. If you\n * increase the value, more lines will be drawn and the drawing performance will\n * decrease.\n * @property {Stroke} [strokeStyle='rgba(0,0,0,0.2)'] The\n * stroke style to use for drawing the graticule. If not provided, a not fully\n * opaque black will be used.\n * @property {number} [targetSize=100] The target size of the graticule cells,\n * in pixels.\n * @property {boolean} [showLabels=false] Render a label with the respective\n * latitude/longitude for each graticule line.\n * @property {function(number):string} [lonLabelFormatter] Label formatter for\n * longitudes. This function is called with the longitude as argument, and\n * should return a formatted string representing the longitude. By default,\n * labels are formatted as degrees, minutes, seconds and hemisphere.\n * @property {function(number):string} [latLabelFormatter] Label formatter for\n * latitudes. This function is called with the latitude as argument, and\n * should return a formatted string representing the latitude. By default,\n * labels are formatted as degrees, minutes, seconds and hemisphere.\n * @property {number} [lonLabelPosition=0] Longitude label position in fractions\n * (0..1) of view extent. 0 means at the bottom of the viewport, 1 means at the\n * top.\n * @property {number} [latLabelPosition=1] Latitude label position in fractions\n * (0..1) of view extent. 0 means at the left of the viewport, 1 means at the\n * right.\n * @property {Text} [lonLabelStyle] Longitude label text\n * style. If not provided, the following style will be used:\n * ```js\n * new Text({\n *   font: '12px Calibri,sans-serif',\n *   textBaseline: 'bottom',\n *   fill: new Fill({\n *     color: 'rgba(0,0,0,1)'\n *   }),\n *   stroke: new Stroke({\n *     color: 'rgba(255,255,255,1)',\n *     width: 3\n *   })\n * });\n * ```\n * Note that the default's `textBaseline` configuration will not work well for\n * `lonLabelPosition` configurations that position labels close to the top of\n * the viewport.\n * @property {Text} [latLabelStyle] Latitude label text style.\n * If not provided, the following style will be used:\n * ```js\n * new Text({\n *   font: '12px Calibri,sans-serif',\n *   textAlign: 'end',\n *   fill: new Fill({\n *     color: 'rgba(0,0,0,1)'\n *   }),\n *   stroke: Stroke({\n *     color: 'rgba(255,255,255,1)',\n *     width: 3\n *   })\n * });\n * ```\n * Note that the default's `textAlign` configuration will not work well for\n * `latLabelPosition` configurations that position labels close to the left of\n * the viewport.\n * @property {Array<number>} [intervals=[90, 45, 30, 20, 10, 5, 2, 1, 0.5, 0.2, 0.1, 0.05, 0.01, 0.005, 0.002, 0.001]]\n * Intervals (in degrees) for the graticule. Example to limit graticules to 30 and 10 degrees intervals:\n * ```js\n * [30, 10]\n * ```\n * @property {boolean} [wrapX=true] Whether to repeat the graticule horizontally.\n */\n\n/**\n * @classdesc\n * Layer that renders a grid for a coordinate system.\n *\n * @fires import(\"../render/Event.js\").RenderEvent\n * @api\n */\n\nvar Graticule =\n/** @class */\nfunction (_super) {\n  __extends(Graticule, _super);\n  /**\n   * @param {Options=} opt_options Options.\n   */\n\n\n  function Graticule(opt_options) {\n    var _this = this;\n\n    var options = opt_options ? opt_options : {};\n    var baseOptions = assign({\n      updateWhileAnimating: true,\n      updateWhileInteracting: true,\n      renderBuffer: 0\n    }, options);\n    delete baseOptions.maxLines;\n    delete baseOptions.strokeStyle;\n    delete baseOptions.targetSize;\n    delete baseOptions.showLabels;\n    delete baseOptions.lonLabelFormatter;\n    delete baseOptions.latLabelFormatter;\n    delete baseOptions.lonLabelPosition;\n    delete baseOptions.latLabelPosition;\n    delete baseOptions.lonLabelStyle;\n    delete baseOptions.latLabelStyle;\n    delete baseOptions.intervals;\n    _this = _super.call(this, baseOptions) || this;\n    /**\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n\n    _this.projection_ = null;\n    /**\n     * @type {number}\n     * @private\n     */\n\n    _this.maxLat_ = Infinity;\n    /**\n     * @type {number}\n     * @private\n     */\n\n    _this.maxLon_ = Infinity;\n    /**\n     * @type {number}\n     * @private\n     */\n\n    _this.minLat_ = -Infinity;\n    /**\n     * @type {number}\n     * @private\n     */\n\n    _this.minLon_ = -Infinity;\n    /**\n     * @type {number}\n     * @private\n     */\n\n    _this.maxLatP_ = Infinity;\n    /**\n     * @type {number}\n     * @private\n     */\n\n    _this.maxLonP_ = Infinity;\n    /**\n     * @type {number}\n     * @private\n     */\n\n    _this.minLatP_ = -Infinity;\n    /**\n     * @type {number}\n     * @private\n     */\n\n    _this.minLonP_ = -Infinity;\n    /**\n     * @type {number}\n     * @private\n     */\n\n    _this.targetSize_ = options.targetSize !== undefined ? options.targetSize : 100;\n    /**\n     * @type {number}\n     * @private\n     */\n\n    _this.maxLines_ = options.maxLines !== undefined ? options.maxLines : 100;\n    /**\n     * @type {Array<LineString>}\n     * @private\n     */\n\n    _this.meridians_ = [];\n    /**\n     * @type {Array<LineString>}\n     * @private\n     */\n\n    _this.parallels_ = [];\n    /**\n     * @type {Stroke}\n     * @private\n     */\n\n    _this.strokeStyle_ = options.strokeStyle !== undefined ? options.strokeStyle : DEFAULT_STROKE_STYLE;\n    /**\n     * @type {import(\"../proj.js\").TransformFunction|undefined}\n     * @private\n     */\n\n    _this.fromLonLatTransform_ = undefined;\n    /**\n     * @type {import(\"../proj.js\").TransformFunction|undefined}\n     * @private\n     */\n\n    _this.toLonLatTransform_ = undefined;\n    /**\n     * @type {import(\"../coordinate.js\").Coordinate}\n     * @private\n     */\n\n    _this.projectionCenterLonLat_ = null;\n    /**\n     * @type {Array<GraticuleLabelDataType>}\n     * @private\n     */\n\n    _this.meridiansLabels_ = null;\n    /**\n     * @type {Array<GraticuleLabelDataType>}\n     * @private\n     */\n\n    _this.parallelsLabels_ = null;\n\n    if (options.showLabels) {\n      /**\n       * @type {null|function(number):string}\n       * @private\n       */\n      _this.lonLabelFormatter_ = options.lonLabelFormatter == undefined ? degreesToStringHDMS.bind(_this, 'EW') : options.lonLabelFormatter;\n      /**\n       * @type {function(number):string}\n       * @private\n       */\n\n      _this.latLabelFormatter_ = options.latLabelFormatter == undefined ? degreesToStringHDMS.bind(_this, 'NS') : options.latLabelFormatter;\n      /**\n       * Longitude label position in fractions (0..1) of view extent. 0 means\n       * bottom, 1 means top.\n       * @type {number}\n       * @private\n       */\n\n      _this.lonLabelPosition_ = options.lonLabelPosition == undefined ? 0 : options.lonLabelPosition;\n      /**\n       * Latitude Label position in fractions (0..1) of view extent. 0 means left, 1\n       * means right.\n       * @type {number}\n       * @private\n       */\n\n      _this.latLabelPosition_ = options.latLabelPosition == undefined ? 1 : options.latLabelPosition;\n      /**\n       * @type {Style}\n       * @private\n       */\n\n      _this.lonLabelStyleBase_ = new Style({\n        text: options.lonLabelStyle !== undefined ? options.lonLabelStyle.clone() : new Text({\n          font: '12px Calibri,sans-serif',\n          textBaseline: 'bottom',\n          fill: new Fill({\n            color: 'rgba(0,0,0,1)'\n          }),\n          stroke: new Stroke({\n            color: 'rgba(255,255,255,1)',\n            width: 3\n          })\n        })\n      });\n      /**\n       * @private\n       * @param {import(\"../Feature\").default} feature Feature\n       * @return {Style} style\n       */\n\n      _this.lonLabelStyle_ = function (feature) {\n        var label = feature.get('graticule_label');\n        this.lonLabelStyleBase_.getText().setText(label);\n        return this.lonLabelStyleBase_;\n      }.bind(_this);\n      /**\n       * @type {Style}\n       * @private\n       */\n\n\n      _this.latLabelStyleBase_ = new Style({\n        text: options.latLabelStyle !== undefined ? options.latLabelStyle.clone() : new Text({\n          font: '12px Calibri,sans-serif',\n          textAlign: 'right',\n          fill: new Fill({\n            color: 'rgba(0,0,0,1)'\n          }),\n          stroke: new Stroke({\n            color: 'rgba(255,255,255,1)',\n            width: 3\n          })\n        })\n      });\n      /**\n       * @private\n       * @param {import(\"../Feature\").default} feature Feature\n       * @return {Style} style\n       */\n\n      _this.latLabelStyle_ = function (feature) {\n        var label = feature.get('graticule_label');\n        this.latLabelStyleBase_.getText().setText(label);\n        return this.latLabelStyleBase_;\n      }.bind(_this);\n\n      _this.meridiansLabels_ = [];\n      _this.parallelsLabels_ = [];\n    }\n    /**\n     * @type {Array<number>}\n     * @private\n     */\n\n\n    _this.intervals_ = options.intervals !== undefined ? options.intervals : INTERVALS; // use a source with a custom loader for lines & text\n\n    _this.setSource(new VectorSource({\n      loader: _this.loaderFunction.bind(_this),\n      strategy: _this.strategyFunction.bind(_this),\n      features: new Collection(),\n      overlaps: false,\n      useSpatialIndex: false,\n      wrapX: options.wrapX\n    }));\n    /**\n     * feature pool to use when updating graticule\n     * @type {Array<Feature>}\n     * @private\n     */\n\n\n    _this.featurePool_ = [];\n    /**\n     * @type {Style}\n     * @private\n     */\n\n    _this.lineStyle_ = new Style({\n      stroke: _this.strokeStyle_\n    });\n    /**\n     * @type {?import(\"../extent.js\").Extent}\n     */\n\n    _this.loadedExtent_ = null;\n    /**\n     * @type {?import(\"../extent.js\").Extent}\n     */\n\n    _this.renderedExtent_ = null;\n\n    _this.setRenderOrder(null);\n\n    return _this;\n  }\n  /**\n   * Strategy function for loading features based on the view's extent and\n   * resolution.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @return {Array<import(\"../extent.js\").Extent>} Extents.\n   */\n\n\n  Graticule.prototype.strategyFunction = function (extent, resolution) {\n    if (this.loadedExtent_ && !equals(this.loadedExtent_, extent)) {\n      // we should not keep track of loaded extents\n      this.getSource().removeLoadedExtent(this.loadedExtent_);\n    }\n\n    return [extent];\n  };\n  /**\n   * Update geometries in the source based on current view\n   * @param {import(\"../extent\").Extent} extent Extent\n   * @param {number} resolution Resolution\n   * @param {import(\"../proj/Projection.js\").default} projection Projection\n   */\n\n\n  Graticule.prototype.loaderFunction = function (extent, resolution, projection) {\n    this.loadedExtent_ = extent;\n    var source = this.getSource(); // only consider the intersection between our own extent & the requested one\n\n    var layerExtent = this.getExtent() || [-Infinity, -Infinity, Infinity, Infinity];\n    var renderExtent = getIntersection(layerExtent, extent);\n\n    if (this.renderedExtent_ && equals(this.renderedExtent_, renderExtent)) {\n      return;\n    }\n\n    this.renderedExtent_ = renderExtent; // bail out if nothing to render\n\n    if (isEmpty(renderExtent)) {\n      return;\n    } // update projection info\n\n\n    var center = getCenter(renderExtent);\n    var squaredTolerance = resolution * resolution / 4;\n    var updateProjectionInfo = !this.projection_ || !equivalentProjection(this.projection_, projection);\n\n    if (updateProjectionInfo) {\n      this.updateProjectionInfo_(projection);\n    }\n\n    this.createGraticule_(renderExtent, center, resolution, squaredTolerance); // first make sure we have enough features in the pool\n\n    var featureCount = this.meridians_.length + this.parallels_.length;\n\n    if (this.meridiansLabels_) {\n      featureCount += this.meridiansLabels_.length;\n    }\n\n    if (this.parallelsLabels_) {\n      featureCount += this.parallelsLabels_.length;\n    }\n\n    var feature;\n\n    while (featureCount > this.featurePool_.length) {\n      feature = new Feature();\n      this.featurePool_.push(feature);\n    }\n\n    var featuresColl = source.getFeaturesCollection();\n    featuresColl.clear();\n    var poolIndex = 0; // add features for the lines & labels\n\n    var i, l;\n\n    for (i = 0, l = this.meridians_.length; i < l; ++i) {\n      feature = this.featurePool_[poolIndex++];\n      feature.setGeometry(this.meridians_[i]);\n      feature.setStyle(this.lineStyle_);\n      featuresColl.push(feature);\n    }\n\n    for (i = 0, l = this.parallels_.length; i < l; ++i) {\n      feature = this.featurePool_[poolIndex++];\n      feature.setGeometry(this.parallels_[i]);\n      feature.setStyle(this.lineStyle_);\n      featuresColl.push(feature);\n    }\n\n    var labelData;\n\n    if (this.meridiansLabels_) {\n      for (i = 0, l = this.meridiansLabels_.length; i < l; ++i) {\n        labelData = this.meridiansLabels_[i];\n        feature = this.featurePool_[poolIndex++];\n        feature.setGeometry(labelData.geom);\n        feature.setStyle(this.lonLabelStyle_);\n        feature.set('graticule_label', labelData.text);\n        featuresColl.push(feature);\n      }\n    }\n\n    if (this.parallelsLabels_) {\n      for (i = 0, l = this.parallelsLabels_.length; i < l; ++i) {\n        labelData = this.parallelsLabels_[i];\n        feature = this.featurePool_[poolIndex++];\n        feature.setGeometry(labelData.geom);\n        feature.setStyle(this.latLabelStyle_);\n        feature.set('graticule_label', labelData.text);\n        featuresColl.push(feature);\n      }\n    }\n  };\n  /**\n   * @param {number} lon Longitude.\n   * @param {number} minLat Minimal latitude.\n   * @param {number} maxLat Maximal latitude.\n   * @param {number} squaredTolerance Squared tolerance.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} index Index.\n   * @return {number} Index.\n   * @private\n   */\n\n\n  Graticule.prototype.addMeridian_ = function (lon, minLat, maxLat, squaredTolerance, extent, index) {\n    var lineString = this.getMeridian_(lon, minLat, maxLat, squaredTolerance, index);\n\n    if (intersects(lineString.getExtent(), extent)) {\n      if (this.meridiansLabels_) {\n        var textPoint = this.getMeridianPoint_(lineString, extent, index);\n        this.meridiansLabels_[index] = {\n          geom: textPoint,\n          text: this.lonLabelFormatter_(lon)\n        };\n      }\n\n      this.meridians_[index++] = lineString;\n    }\n\n    return index;\n  };\n  /**\n   * @param {number} lat Latitude.\n   * @param {number} minLon Minimal longitude.\n   * @param {number} maxLon Maximal longitude.\n   * @param {number} squaredTolerance Squared tolerance.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} index Index.\n   * @return {number} Index.\n   * @private\n   */\n\n\n  Graticule.prototype.addParallel_ = function (lat, minLon, maxLon, squaredTolerance, extent, index) {\n    var lineString = this.getParallel_(lat, minLon, maxLon, squaredTolerance, index);\n\n    if (intersects(lineString.getExtent(), extent)) {\n      if (this.parallelsLabels_) {\n        var textPoint = this.getParallelPoint_(lineString, extent, index);\n        this.parallelsLabels_[index] = {\n          geom: textPoint,\n          text: this.latLabelFormatter_(lat)\n        };\n      }\n\n      this.parallels_[index++] = lineString;\n    }\n\n    return index;\n  };\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {import(\"../coordinate.js\").Coordinate} center Center.\n   * @param {number} resolution Resolution.\n   * @param {number} squaredTolerance Squared tolerance.\n   * @private\n   */\n\n\n  Graticule.prototype.createGraticule_ = function (extent, center, resolution, squaredTolerance) {\n    var interval = this.getInterval_(resolution);\n\n    if (interval == -1) {\n      this.meridians_.length = 0;\n      this.parallels_.length = 0;\n\n      if (this.meridiansLabels_) {\n        this.meridiansLabels_.length = 0;\n      }\n\n      if (this.parallelsLabels_) {\n        this.parallelsLabels_.length = 0;\n      }\n\n      return;\n    }\n\n    var centerLonLat = this.toLonLatTransform_(center);\n    var centerLon = centerLonLat[0];\n    var centerLat = centerLonLat[1];\n    var maxLines = this.maxLines_;\n    var cnt, idx, lat, lon;\n    var validExtent = [Math.max(extent[0], this.minLonP_), Math.max(extent[1], this.minLatP_), Math.min(extent[2], this.maxLonP_), Math.min(extent[3], this.maxLatP_)];\n    validExtent = transformExtent(validExtent, this.projection_, 'EPSG:4326');\n    var maxLat = validExtent[3];\n    var maxLon = validExtent[2];\n    var minLat = validExtent[1];\n    var minLon = validExtent[0]; // Create meridians\n\n    centerLon = Math.floor(centerLon / interval) * interval;\n    lon = clamp(centerLon, this.minLon_, this.maxLon_);\n    idx = this.addMeridian_(lon, minLat, maxLat, squaredTolerance, extent, 0);\n    cnt = 0;\n\n    while (lon != this.minLon_ && cnt++ < maxLines) {\n      lon = Math.max(lon - interval, this.minLon_);\n      idx = this.addMeridian_(lon, minLat, maxLat, squaredTolerance, extent, idx);\n    }\n\n    lon = clamp(centerLon, this.minLon_, this.maxLon_);\n    cnt = 0;\n\n    while (lon != this.maxLon_ && cnt++ < maxLines) {\n      lon = Math.min(lon + interval, this.maxLon_);\n      idx = this.addMeridian_(lon, minLat, maxLat, squaredTolerance, extent, idx);\n    }\n\n    this.meridians_.length = idx;\n\n    if (this.meridiansLabels_) {\n      this.meridiansLabels_.length = idx;\n    } // Create parallels\n\n\n    centerLat = Math.floor(centerLat / interval) * interval;\n    lat = clamp(centerLat, this.minLat_, this.maxLat_);\n    idx = this.addParallel_(lat, minLon, maxLon, squaredTolerance, extent, 0);\n    cnt = 0;\n\n    while (lat != this.minLat_ && cnt++ < maxLines) {\n      lat = Math.max(lat - interval, this.minLat_);\n      idx = this.addParallel_(lat, minLon, maxLon, squaredTolerance, extent, idx);\n    }\n\n    lat = clamp(centerLat, this.minLat_, this.maxLat_);\n    cnt = 0;\n\n    while (lat != this.maxLat_ && cnt++ < maxLines) {\n      lat = Math.min(lat + interval, this.maxLat_);\n      idx = this.addParallel_(lat, minLon, maxLon, squaredTolerance, extent, idx);\n    }\n\n    this.parallels_.length = idx;\n\n    if (this.parallelsLabels_) {\n      this.parallelsLabels_.length = idx;\n    }\n  };\n  /**\n   * @param {number} resolution Resolution.\n   * @return {number} The interval in degrees.\n   * @private\n   */\n\n\n  Graticule.prototype.getInterval_ = function (resolution) {\n    var centerLon = this.projectionCenterLonLat_[0];\n    var centerLat = this.projectionCenterLonLat_[1];\n    var interval = -1;\n    var target = Math.pow(this.targetSize_ * resolution, 2);\n    /** @type {Array<number>} **/\n\n    var p1 = [];\n    /** @type {Array<number>} **/\n\n    var p2 = [];\n\n    for (var i = 0, ii = this.intervals_.length; i < ii; ++i) {\n      var delta = this.intervals_[i] / 2;\n      p1[0] = centerLon - delta;\n      p1[1] = centerLat - delta;\n      p2[0] = centerLon + delta;\n      p2[1] = centerLat + delta;\n      this.fromLonLatTransform_(p1, p1);\n      this.fromLonLatTransform_(p2, p2);\n      var dist = Math.pow(p2[0] - p1[0], 2) + Math.pow(p2[1] - p1[1], 2);\n\n      if (dist <= target) {\n        break;\n      }\n\n      interval = this.intervals_[i];\n    }\n\n    return interval;\n  };\n  /**\n   * @param {number} lon Longitude.\n   * @param {number} minLat Minimal latitude.\n   * @param {number} maxLat Maximal latitude.\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {LineString} The meridian line string.\n   * @param {number} index Index.\n   * @private\n   */\n\n\n  Graticule.prototype.getMeridian_ = function (lon, minLat, maxLat, squaredTolerance, index) {\n    var flatCoordinates = meridian(lon, minLat, maxLat, this.projection_, squaredTolerance);\n    var lineString = this.meridians_[index];\n\n    if (!lineString) {\n      lineString = new LineString(flatCoordinates, GeometryLayout.XY);\n      this.meridians_[index] = lineString;\n    } else {\n      lineString.setFlatCoordinates(GeometryLayout.XY, flatCoordinates);\n      lineString.changed();\n    }\n\n    return lineString;\n  };\n  /**\n   * @param {LineString} lineString Meridian\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} index Index.\n   * @return {Point} Meridian point.\n   * @private\n   */\n\n\n  Graticule.prototype.getMeridianPoint_ = function (lineString, extent, index) {\n    var flatCoordinates = lineString.getFlatCoordinates();\n    var clampedBottom = Math.max(extent[1], flatCoordinates[1]);\n    var clampedTop = Math.min(extent[3], flatCoordinates[flatCoordinates.length - 1]);\n    var lat = clamp(extent[1] + Math.abs(extent[1] - extent[3]) * this.lonLabelPosition_, clampedBottom, clampedTop);\n    var coordinate = [flatCoordinates[0], lat];\n    var point;\n\n    if (index in this.meridiansLabels_) {\n      point = this.meridiansLabels_[index].geom;\n      point.setCoordinates(coordinate);\n    } else {\n      point = new Point(coordinate);\n    }\n\n    return point;\n  };\n  /**\n   * Get the list of meridians.  Meridians are lines of equal longitude.\n   * @return {Array<LineString>} The meridians.\n   * @api\n   */\n\n\n  Graticule.prototype.getMeridians = function () {\n    return this.meridians_;\n  };\n  /**\n   * @param {number} lat Latitude.\n   * @param {number} minLon Minimal longitude.\n   * @param {number} maxLon Maximal longitude.\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {LineString} The parallel line string.\n   * @param {number} index Index.\n   * @private\n   */\n\n\n  Graticule.prototype.getParallel_ = function (lat, minLon, maxLon, squaredTolerance, index) {\n    var flatCoordinates = parallel(lat, minLon, maxLon, this.projection_, squaredTolerance);\n    var lineString = this.parallels_[index];\n\n    if (!lineString) {\n      lineString = new LineString(flatCoordinates, GeometryLayout.XY);\n    } else {\n      lineString.setFlatCoordinates(GeometryLayout.XY, flatCoordinates);\n      lineString.changed();\n    }\n\n    return lineString;\n  };\n  /**\n   * @param {LineString} lineString Parallels.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} index Index.\n   * @return {Point} Parallel point.\n   * @private\n   */\n\n\n  Graticule.prototype.getParallelPoint_ = function (lineString, extent, index) {\n    var flatCoordinates = lineString.getFlatCoordinates();\n    var clampedLeft = Math.max(extent[0], flatCoordinates[0]);\n    var clampedRight = Math.min(extent[2], flatCoordinates[flatCoordinates.length - 2]);\n    var lon = clamp(extent[0] + Math.abs(extent[0] - extent[2]) * this.latLabelPosition_, clampedLeft, clampedRight);\n    var coordinate = [lon, flatCoordinates[1]];\n    var point;\n\n    if (index in this.parallelsLabels_) {\n      point = this.parallelsLabels_[index].geom;\n      point.setCoordinates(coordinate);\n    } else {\n      point = new Point(coordinate);\n    }\n\n    return point;\n  };\n  /**\n   * Get the list of parallels.  Parallels are lines of equal latitude.\n   * @return {Array<LineString>} The parallels.\n   * @api\n   */\n\n\n  Graticule.prototype.getParallels = function () {\n    return this.parallels_;\n  };\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @private\n   */\n\n\n  Graticule.prototype.updateProjectionInfo_ = function (projection) {\n    var epsg4326Projection = getProjection('EPSG:4326');\n    var worldExtent = projection.getWorldExtent();\n    var worldExtentP = transformExtent(worldExtent, epsg4326Projection, projection);\n    this.maxLat_ = worldExtent[3];\n    this.maxLon_ = worldExtent[2];\n    this.minLat_ = worldExtent[1];\n    this.minLon_ = worldExtent[0];\n    this.maxLatP_ = worldExtentP[3];\n    this.maxLonP_ = worldExtentP[2];\n    this.minLatP_ = worldExtentP[1];\n    this.minLonP_ = worldExtentP[0];\n    this.fromLonLatTransform_ = getTransform(epsg4326Projection, projection);\n    this.toLonLatTransform_ = getTransform(projection, epsg4326Projection);\n    this.projectionCenterLonLat_ = this.toLonLatTransform_(getCenter(projection.getExtent()));\n    this.projection_ = projection;\n  };\n\n  return Graticule;\n}(VectorLayer);\n\nexport default Graticule;","map":{"version":3,"sources":["../src/layer/Graticule.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/layer/Graticule\n */\nimport VectorLayer from './Vector.js';\nimport { assign } from '../obj.js';\nimport { degreesToStringHDMS } from '../coordinate.js';\nimport Text from '../style/Text.js';\nimport Fill from '../style/Fill.js';\nimport Stroke from '../style/Stroke.js';\nimport LineString from '../geom/LineString.js';\nimport VectorSource from '../source/Vector.js';\nimport { equivalent as equivalentProjection, get as getProjection, getTransform, transformExtent } from '../proj.js';\nimport { getCenter, intersects, equals, getIntersection, isEmpty } from '../extent.js';\nimport { clamp } from '../math.js';\nimport Style from '../style/Style.js';\nimport Feature from '../Feature.js';\nimport { meridian, parallel } from '../geom/flat/geodesic.js';\nimport GeometryLayout from '../geom/GeometryLayout.js';\nimport Point from '../geom/Point.js';\nimport Collection from '../Collection.js';\n/**\n * @type {Stroke}\n * @private\n * @const\n */\nvar DEFAULT_STROKE_STYLE = new Stroke({\n    color: 'rgba(0,0,0,0.2)'\n});\n/**\n * @type {Array<number>}\n * @private\n */\nvar INTERVALS = [\n    90, 45, 30, 20, 10, 5, 2, 1, 0.5, 0.2, 0.1, 0.05, 0.01, 0.005, 0.002, 0.001\n];\n/**\n * @typedef {Object} GraticuleLabelDataType\n * @property {Point} geom\n * @property {string} text\n */\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [maxLines=100] The maximum number of meridians and\n * parallels from the center of the map. The default value of 100 means that at\n * most 200 meridians and 200 parallels will be displayed. The default value is\n * appropriate for conformal projections like Spherical Mercator. If you\n * increase the value, more lines will be drawn and the drawing performance will\n * decrease.\n * @property {Stroke} [strokeStyle='rgba(0,0,0,0.2)'] The\n * stroke style to use for drawing the graticule. If not provided, a not fully\n * opaque black will be used.\n * @property {number} [targetSize=100] The target size of the graticule cells,\n * in pixels.\n * @property {boolean} [showLabels=false] Render a label with the respective\n * latitude/longitude for each graticule line.\n * @property {function(number):string} [lonLabelFormatter] Label formatter for\n * longitudes. This function is called with the longitude as argument, and\n * should return a formatted string representing the longitude. By default,\n * labels are formatted as degrees, minutes, seconds and hemisphere.\n * @property {function(number):string} [latLabelFormatter] Label formatter for\n * latitudes. This function is called with the latitude as argument, and\n * should return a formatted string representing the latitude. By default,\n * labels are formatted as degrees, minutes, seconds and hemisphere.\n * @property {number} [lonLabelPosition=0] Longitude label position in fractions\n * (0..1) of view extent. 0 means at the bottom of the viewport, 1 means at the\n * top.\n * @property {number} [latLabelPosition=1] Latitude label position in fractions\n * (0..1) of view extent. 0 means at the left of the viewport, 1 means at the\n * right.\n * @property {Text} [lonLabelStyle] Longitude label text\n * style. If not provided, the following style will be used:\n * ```js\n * new Text({\n *   font: '12px Calibri,sans-serif',\n *   textBaseline: 'bottom',\n *   fill: new Fill({\n *     color: 'rgba(0,0,0,1)'\n *   }),\n *   stroke: new Stroke({\n *     color: 'rgba(255,255,255,1)',\n *     width: 3\n *   })\n * });\n * ```\n * Note that the default's `textBaseline` configuration will not work well for\n * `lonLabelPosition` configurations that position labels close to the top of\n * the viewport.\n * @property {Text} [latLabelStyle] Latitude label text style.\n * If not provided, the following style will be used:\n * ```js\n * new Text({\n *   font: '12px Calibri,sans-serif',\n *   textAlign: 'end',\n *   fill: new Fill({\n *     color: 'rgba(0,0,0,1)'\n *   }),\n *   stroke: Stroke({\n *     color: 'rgba(255,255,255,1)',\n *     width: 3\n *   })\n * });\n * ```\n * Note that the default's `textAlign` configuration will not work well for\n * `latLabelPosition` configurations that position labels close to the left of\n * the viewport.\n * @property {Array<number>} [intervals=[90, 45, 30, 20, 10, 5, 2, 1, 0.5, 0.2, 0.1, 0.05, 0.01, 0.005, 0.002, 0.001]]\n * Intervals (in degrees) for the graticule. Example to limit graticules to 30 and 10 degrees intervals:\n * ```js\n * [30, 10]\n * ```\n * @property {boolean} [wrapX=true] Whether to repeat the graticule horizontally.\n */\n/**\n * @classdesc\n * Layer that renders a grid for a coordinate system.\n *\n * @fires import(\"../render/Event.js\").RenderEvent\n * @api\n */\nvar Graticule = /** @class */ (function (_super) {\n    __extends(Graticule, _super);\n    /**\n     * @param {Options=} opt_options Options.\n     */\n    function Graticule(opt_options) {\n        var _this = this;\n        var options = opt_options ? opt_options : {};\n        var baseOptions = assign({\n            updateWhileAnimating: true,\n            updateWhileInteracting: true,\n            renderBuffer: 0\n        }, options);\n        delete baseOptions.maxLines;\n        delete baseOptions.strokeStyle;\n        delete baseOptions.targetSize;\n        delete baseOptions.showLabels;\n        delete baseOptions.lonLabelFormatter;\n        delete baseOptions.latLabelFormatter;\n        delete baseOptions.lonLabelPosition;\n        delete baseOptions.latLabelPosition;\n        delete baseOptions.lonLabelStyle;\n        delete baseOptions.latLabelStyle;\n        delete baseOptions.intervals;\n        _this = _super.call(this, baseOptions) || this;\n        /**\n         * @type {import(\"../proj/Projection.js\").default}\n         */\n        _this.projection_ = null;\n        /**\n         * @type {number}\n         * @private\n         */\n        _this.maxLat_ = Infinity;\n        /**\n         * @type {number}\n         * @private\n         */\n        _this.maxLon_ = Infinity;\n        /**\n         * @type {number}\n         * @private\n         */\n        _this.minLat_ = -Infinity;\n        /**\n         * @type {number}\n         * @private\n         */\n        _this.minLon_ = -Infinity;\n        /**\n         * @type {number}\n         * @private\n         */\n        _this.maxLatP_ = Infinity;\n        /**\n         * @type {number}\n         * @private\n         */\n        _this.maxLonP_ = Infinity;\n        /**\n         * @type {number}\n         * @private\n         */\n        _this.minLatP_ = -Infinity;\n        /**\n         * @type {number}\n         * @private\n         */\n        _this.minLonP_ = -Infinity;\n        /**\n         * @type {number}\n         * @private\n         */\n        _this.targetSize_ = options.targetSize !== undefined ? options.targetSize : 100;\n        /**\n         * @type {number}\n         * @private\n         */\n        _this.maxLines_ = options.maxLines !== undefined ? options.maxLines : 100;\n        /**\n         * @type {Array<LineString>}\n         * @private\n         */\n        _this.meridians_ = [];\n        /**\n         * @type {Array<LineString>}\n         * @private\n         */\n        _this.parallels_ = [];\n        /**\n         * @type {Stroke}\n         * @private\n         */\n        _this.strokeStyle_ = options.strokeStyle !== undefined ? options.strokeStyle : DEFAULT_STROKE_STYLE;\n        /**\n         * @type {import(\"../proj.js\").TransformFunction|undefined}\n         * @private\n         */\n        _this.fromLonLatTransform_ = undefined;\n        /**\n         * @type {import(\"../proj.js\").TransformFunction|undefined}\n         * @private\n         */\n        _this.toLonLatTransform_ = undefined;\n        /**\n         * @type {import(\"../coordinate.js\").Coordinate}\n         * @private\n         */\n        _this.projectionCenterLonLat_ = null;\n        /**\n         * @type {Array<GraticuleLabelDataType>}\n         * @private\n         */\n        _this.meridiansLabels_ = null;\n        /**\n         * @type {Array<GraticuleLabelDataType>}\n         * @private\n         */\n        _this.parallelsLabels_ = null;\n        if (options.showLabels) {\n            /**\n             * @type {null|function(number):string}\n             * @private\n             */\n            _this.lonLabelFormatter_ = options.lonLabelFormatter == undefined ?\n                degreesToStringHDMS.bind(_this, 'EW') : options.lonLabelFormatter;\n            /**\n             * @type {function(number):string}\n             * @private\n             */\n            _this.latLabelFormatter_ = options.latLabelFormatter == undefined ?\n                degreesToStringHDMS.bind(_this, 'NS') : options.latLabelFormatter;\n            /**\n             * Longitude label position in fractions (0..1) of view extent. 0 means\n             * bottom, 1 means top.\n             * @type {number}\n             * @private\n             */\n            _this.lonLabelPosition_ = options.lonLabelPosition == undefined ? 0 :\n                options.lonLabelPosition;\n            /**\n             * Latitude Label position in fractions (0..1) of view extent. 0 means left, 1\n             * means right.\n             * @type {number}\n             * @private\n             */\n            _this.latLabelPosition_ = options.latLabelPosition == undefined ? 1 :\n                options.latLabelPosition;\n            /**\n             * @type {Style}\n             * @private\n             */\n            _this.lonLabelStyleBase_ = new Style({\n                text: options.lonLabelStyle !== undefined ? options.lonLabelStyle.clone() :\n                    new Text({\n                        font: '12px Calibri,sans-serif',\n                        textBaseline: 'bottom',\n                        fill: new Fill({\n                            color: 'rgba(0,0,0,1)'\n                        }),\n                        stroke: new Stroke({\n                            color: 'rgba(255,255,255,1)',\n                            width: 3\n                        })\n                    })\n            });\n            /**\n             * @private\n             * @param {import(\"../Feature\").default} feature Feature\n             * @return {Style} style\n             */\n            _this.lonLabelStyle_ = function (feature) {\n                var label = feature.get('graticule_label');\n                this.lonLabelStyleBase_.getText().setText(label);\n                return this.lonLabelStyleBase_;\n            }.bind(_this);\n            /**\n             * @type {Style}\n             * @private\n             */\n            _this.latLabelStyleBase_ = new Style({\n                text: options.latLabelStyle !== undefined ? options.latLabelStyle.clone() :\n                    new Text({\n                        font: '12px Calibri,sans-serif',\n                        textAlign: 'right',\n                        fill: new Fill({\n                            color: 'rgba(0,0,0,1)'\n                        }),\n                        stroke: new Stroke({\n                            color: 'rgba(255,255,255,1)',\n                            width: 3\n                        })\n                    })\n            });\n            /**\n             * @private\n             * @param {import(\"../Feature\").default} feature Feature\n             * @return {Style} style\n             */\n            _this.latLabelStyle_ = function (feature) {\n                var label = feature.get('graticule_label');\n                this.latLabelStyleBase_.getText().setText(label);\n                return this.latLabelStyleBase_;\n            }.bind(_this);\n            _this.meridiansLabels_ = [];\n            _this.parallelsLabels_ = [];\n        }\n        /**\n         * @type {Array<number>}\n         * @private\n         */\n        _this.intervals_ = options.intervals !== undefined ? options.intervals : INTERVALS;\n        // use a source with a custom loader for lines & text\n        _this.setSource(new VectorSource({\n            loader: _this.loaderFunction.bind(_this),\n            strategy: _this.strategyFunction.bind(_this),\n            features: new Collection(),\n            overlaps: false,\n            useSpatialIndex: false,\n            wrapX: options.wrapX\n        }));\n        /**\n         * feature pool to use when updating graticule\n         * @type {Array<Feature>}\n         * @private\n         */\n        _this.featurePool_ = [];\n        /**\n         * @type {Style}\n         * @private\n         */\n        _this.lineStyle_ = new Style({\n            stroke: _this.strokeStyle_\n        });\n        /**\n         * @type {?import(\"../extent.js\").Extent}\n         */\n        _this.loadedExtent_ = null;\n        /**\n         * @type {?import(\"../extent.js\").Extent}\n         */\n        _this.renderedExtent_ = null;\n        _this.setRenderOrder(null);\n        return _this;\n    }\n    /**\n     * Strategy function for loading features based on the view's extent and\n     * resolution.\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @param {number} resolution Resolution.\n     * @return {Array<import(\"../extent.js\").Extent>} Extents.\n     */\n    Graticule.prototype.strategyFunction = function (extent, resolution) {\n        if (this.loadedExtent_ && !equals(this.loadedExtent_, extent)) {\n            // we should not keep track of loaded extents\n            this.getSource().removeLoadedExtent(this.loadedExtent_);\n        }\n        return [extent];\n    };\n    /**\n     * Update geometries in the source based on current view\n     * @param {import(\"../extent\").Extent} extent Extent\n     * @param {number} resolution Resolution\n     * @param {import(\"../proj/Projection.js\").default} projection Projection\n     */\n    Graticule.prototype.loaderFunction = function (extent, resolution, projection) {\n        this.loadedExtent_ = extent;\n        var source = this.getSource();\n        // only consider the intersection between our own extent & the requested one\n        var layerExtent = this.getExtent() || [-Infinity, -Infinity, Infinity, Infinity];\n        var renderExtent = getIntersection(layerExtent, extent);\n        if (this.renderedExtent_ && equals(this.renderedExtent_, renderExtent)) {\n            return;\n        }\n        this.renderedExtent_ = renderExtent;\n        // bail out if nothing to render\n        if (isEmpty(renderExtent)) {\n            return;\n        }\n        // update projection info\n        var center = getCenter(renderExtent);\n        var squaredTolerance = resolution * resolution / 4;\n        var updateProjectionInfo = !this.projection_ ||\n            !equivalentProjection(this.projection_, projection);\n        if (updateProjectionInfo) {\n            this.updateProjectionInfo_(projection);\n        }\n        this.createGraticule_(renderExtent, center, resolution, squaredTolerance);\n        // first make sure we have enough features in the pool\n        var featureCount = this.meridians_.length + this.parallels_.length;\n        if (this.meridiansLabels_) {\n            featureCount += this.meridiansLabels_.length;\n        }\n        if (this.parallelsLabels_) {\n            featureCount += this.parallelsLabels_.length;\n        }\n        var feature;\n        while (featureCount > this.featurePool_.length) {\n            feature = new Feature();\n            this.featurePool_.push(feature);\n        }\n        var featuresColl = source.getFeaturesCollection();\n        featuresColl.clear();\n        var poolIndex = 0;\n        // add features for the lines & labels\n        var i, l;\n        for (i = 0, l = this.meridians_.length; i < l; ++i) {\n            feature = this.featurePool_[poolIndex++];\n            feature.setGeometry(this.meridians_[i]);\n            feature.setStyle(this.lineStyle_);\n            featuresColl.push(feature);\n        }\n        for (i = 0, l = this.parallels_.length; i < l; ++i) {\n            feature = this.featurePool_[poolIndex++];\n            feature.setGeometry(this.parallels_[i]);\n            feature.setStyle(this.lineStyle_);\n            featuresColl.push(feature);\n        }\n        var labelData;\n        if (this.meridiansLabels_) {\n            for (i = 0, l = this.meridiansLabels_.length; i < l; ++i) {\n                labelData = this.meridiansLabels_[i];\n                feature = this.featurePool_[poolIndex++];\n                feature.setGeometry(labelData.geom);\n                feature.setStyle(this.lonLabelStyle_);\n                feature.set('graticule_label', labelData.text);\n                featuresColl.push(feature);\n            }\n        }\n        if (this.parallelsLabels_) {\n            for (i = 0, l = this.parallelsLabels_.length; i < l; ++i) {\n                labelData = this.parallelsLabels_[i];\n                feature = this.featurePool_[poolIndex++];\n                feature.setGeometry(labelData.geom);\n                feature.setStyle(this.latLabelStyle_);\n                feature.set('graticule_label', labelData.text);\n                featuresColl.push(feature);\n            }\n        }\n    };\n    /**\n     * @param {number} lon Longitude.\n     * @param {number} minLat Minimal latitude.\n     * @param {number} maxLat Maximal latitude.\n     * @param {number} squaredTolerance Squared tolerance.\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @param {number} index Index.\n     * @return {number} Index.\n     * @private\n     */\n    Graticule.prototype.addMeridian_ = function (lon, minLat, maxLat, squaredTolerance, extent, index) {\n        var lineString = this.getMeridian_(lon, minLat, maxLat, squaredTolerance, index);\n        if (intersects(lineString.getExtent(), extent)) {\n            if (this.meridiansLabels_) {\n                var textPoint = this.getMeridianPoint_(lineString, extent, index);\n                this.meridiansLabels_[index] = {\n                    geom: textPoint,\n                    text: this.lonLabelFormatter_(lon)\n                };\n            }\n            this.meridians_[index++] = lineString;\n        }\n        return index;\n    };\n    /**\n     * @param {number} lat Latitude.\n     * @param {number} minLon Minimal longitude.\n     * @param {number} maxLon Maximal longitude.\n     * @param {number} squaredTolerance Squared tolerance.\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @param {number} index Index.\n     * @return {number} Index.\n     * @private\n     */\n    Graticule.prototype.addParallel_ = function (lat, minLon, maxLon, squaredTolerance, extent, index) {\n        var lineString = this.getParallel_(lat, minLon, maxLon, squaredTolerance, index);\n        if (intersects(lineString.getExtent(), extent)) {\n            if (this.parallelsLabels_) {\n                var textPoint = this.getParallelPoint_(lineString, extent, index);\n                this.parallelsLabels_[index] = {\n                    geom: textPoint,\n                    text: this.latLabelFormatter_(lat)\n                };\n            }\n            this.parallels_[index++] = lineString;\n        }\n        return index;\n    };\n    /**\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @param {import(\"../coordinate.js\").Coordinate} center Center.\n     * @param {number} resolution Resolution.\n     * @param {number} squaredTolerance Squared tolerance.\n     * @private\n     */\n    Graticule.prototype.createGraticule_ = function (extent, center, resolution, squaredTolerance) {\n        var interval = this.getInterval_(resolution);\n        if (interval == -1) {\n            this.meridians_.length = 0;\n            this.parallels_.length = 0;\n            if (this.meridiansLabels_) {\n                this.meridiansLabels_.length = 0;\n            }\n            if (this.parallelsLabels_) {\n                this.parallelsLabels_.length = 0;\n            }\n            return;\n        }\n        var centerLonLat = this.toLonLatTransform_(center);\n        var centerLon = centerLonLat[0];\n        var centerLat = centerLonLat[1];\n        var maxLines = this.maxLines_;\n        var cnt, idx, lat, lon;\n        var validExtent = [\n            Math.max(extent[0], this.minLonP_),\n            Math.max(extent[1], this.minLatP_),\n            Math.min(extent[2], this.maxLonP_),\n            Math.min(extent[3], this.maxLatP_)\n        ];\n        validExtent = transformExtent(validExtent, this.projection_, 'EPSG:4326');\n        var maxLat = validExtent[3];\n        var maxLon = validExtent[2];\n        var minLat = validExtent[1];\n        var minLon = validExtent[0];\n        // Create meridians\n        centerLon = Math.floor(centerLon / interval) * interval;\n        lon = clamp(centerLon, this.minLon_, this.maxLon_);\n        idx = this.addMeridian_(lon, minLat, maxLat, squaredTolerance, extent, 0);\n        cnt = 0;\n        while (lon != this.minLon_ && cnt++ < maxLines) {\n            lon = Math.max(lon - interval, this.minLon_);\n            idx = this.addMeridian_(lon, minLat, maxLat, squaredTolerance, extent, idx);\n        }\n        lon = clamp(centerLon, this.minLon_, this.maxLon_);\n        cnt = 0;\n        while (lon != this.maxLon_ && cnt++ < maxLines) {\n            lon = Math.min(lon + interval, this.maxLon_);\n            idx = this.addMeridian_(lon, minLat, maxLat, squaredTolerance, extent, idx);\n        }\n        this.meridians_.length = idx;\n        if (this.meridiansLabels_) {\n            this.meridiansLabels_.length = idx;\n        }\n        // Create parallels\n        centerLat = Math.floor(centerLat / interval) * interval;\n        lat = clamp(centerLat, this.minLat_, this.maxLat_);\n        idx = this.addParallel_(lat, minLon, maxLon, squaredTolerance, extent, 0);\n        cnt = 0;\n        while (lat != this.minLat_ && cnt++ < maxLines) {\n            lat = Math.max(lat - interval, this.minLat_);\n            idx = this.addParallel_(lat, minLon, maxLon, squaredTolerance, extent, idx);\n        }\n        lat = clamp(centerLat, this.minLat_, this.maxLat_);\n        cnt = 0;\n        while (lat != this.maxLat_ && cnt++ < maxLines) {\n            lat = Math.min(lat + interval, this.maxLat_);\n            idx = this.addParallel_(lat, minLon, maxLon, squaredTolerance, extent, idx);\n        }\n        this.parallels_.length = idx;\n        if (this.parallelsLabels_) {\n            this.parallelsLabels_.length = idx;\n        }\n    };\n    /**\n     * @param {number} resolution Resolution.\n     * @return {number} The interval in degrees.\n     * @private\n     */\n    Graticule.prototype.getInterval_ = function (resolution) {\n        var centerLon = this.projectionCenterLonLat_[0];\n        var centerLat = this.projectionCenterLonLat_[1];\n        var interval = -1;\n        var target = Math.pow(this.targetSize_ * resolution, 2);\n        /** @type {Array<number>} **/\n        var p1 = [];\n        /** @type {Array<number>} **/\n        var p2 = [];\n        for (var i = 0, ii = this.intervals_.length; i < ii; ++i) {\n            var delta = this.intervals_[i] / 2;\n            p1[0] = centerLon - delta;\n            p1[1] = centerLat - delta;\n            p2[0] = centerLon + delta;\n            p2[1] = centerLat + delta;\n            this.fromLonLatTransform_(p1, p1);\n            this.fromLonLatTransform_(p2, p2);\n            var dist = Math.pow(p2[0] - p1[0], 2) + Math.pow(p2[1] - p1[1], 2);\n            if (dist <= target) {\n                break;\n            }\n            interval = this.intervals_[i];\n        }\n        return interval;\n    };\n    /**\n     * @param {number} lon Longitude.\n     * @param {number} minLat Minimal latitude.\n     * @param {number} maxLat Maximal latitude.\n     * @param {number} squaredTolerance Squared tolerance.\n     * @return {LineString} The meridian line string.\n     * @param {number} index Index.\n     * @private\n     */\n    Graticule.prototype.getMeridian_ = function (lon, minLat, maxLat, squaredTolerance, index) {\n        var flatCoordinates = meridian(lon, minLat, maxLat, this.projection_, squaredTolerance);\n        var lineString = this.meridians_[index];\n        if (!lineString) {\n            lineString = new LineString(flatCoordinates, GeometryLayout.XY);\n            this.meridians_[index] = lineString;\n        }\n        else {\n            lineString.setFlatCoordinates(GeometryLayout.XY, flatCoordinates);\n            lineString.changed();\n        }\n        return lineString;\n    };\n    /**\n     * @param {LineString} lineString Meridian\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @param {number} index Index.\n     * @return {Point} Meridian point.\n     * @private\n     */\n    Graticule.prototype.getMeridianPoint_ = function (lineString, extent, index) {\n        var flatCoordinates = lineString.getFlatCoordinates();\n        var clampedBottom = Math.max(extent[1], flatCoordinates[1]);\n        var clampedTop = Math.min(extent[3], flatCoordinates[flatCoordinates.length - 1]);\n        var lat = clamp(extent[1] + Math.abs(extent[1] - extent[3]) * this.lonLabelPosition_, clampedBottom, clampedTop);\n        var coordinate = [flatCoordinates[0], lat];\n        var point;\n        if (index in this.meridiansLabels_) {\n            point = this.meridiansLabels_[index].geom;\n            point.setCoordinates(coordinate);\n        }\n        else {\n            point = new Point(coordinate);\n        }\n        return point;\n    };\n    /**\n     * Get the list of meridians.  Meridians are lines of equal longitude.\n     * @return {Array<LineString>} The meridians.\n     * @api\n     */\n    Graticule.prototype.getMeridians = function () {\n        return this.meridians_;\n    };\n    /**\n     * @param {number} lat Latitude.\n     * @param {number} minLon Minimal longitude.\n     * @param {number} maxLon Maximal longitude.\n     * @param {number} squaredTolerance Squared tolerance.\n     * @return {LineString} The parallel line string.\n     * @param {number} index Index.\n     * @private\n     */\n    Graticule.prototype.getParallel_ = function (lat, minLon, maxLon, squaredTolerance, index) {\n        var flatCoordinates = parallel(lat, minLon, maxLon, this.projection_, squaredTolerance);\n        var lineString = this.parallels_[index];\n        if (!lineString) {\n            lineString = new LineString(flatCoordinates, GeometryLayout.XY);\n        }\n        else {\n            lineString.setFlatCoordinates(GeometryLayout.XY, flatCoordinates);\n            lineString.changed();\n        }\n        return lineString;\n    };\n    /**\n     * @param {LineString} lineString Parallels.\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @param {number} index Index.\n     * @return {Point} Parallel point.\n     * @private\n     */\n    Graticule.prototype.getParallelPoint_ = function (lineString, extent, index) {\n        var flatCoordinates = lineString.getFlatCoordinates();\n        var clampedLeft = Math.max(extent[0], flatCoordinates[0]);\n        var clampedRight = Math.min(extent[2], flatCoordinates[flatCoordinates.length - 2]);\n        var lon = clamp(extent[0] + Math.abs(extent[0] - extent[2]) * this.latLabelPosition_, clampedLeft, clampedRight);\n        var coordinate = [lon, flatCoordinates[1]];\n        var point;\n        if (index in this.parallelsLabels_) {\n            point = this.parallelsLabels_[index].geom;\n            point.setCoordinates(coordinate);\n        }\n        else {\n            point = new Point(coordinate);\n        }\n        return point;\n    };\n    /**\n     * Get the list of parallels.  Parallels are lines of equal latitude.\n     * @return {Array<LineString>} The parallels.\n     * @api\n     */\n    Graticule.prototype.getParallels = function () {\n        return this.parallels_;\n    };\n    /**\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @private\n     */\n    Graticule.prototype.updateProjectionInfo_ = function (projection) {\n        var epsg4326Projection = getProjection('EPSG:4326');\n        var worldExtent = projection.getWorldExtent();\n        var worldExtentP = transformExtent(worldExtent, epsg4326Projection, projection);\n        this.maxLat_ = worldExtent[3];\n        this.maxLon_ = worldExtent[2];\n        this.minLat_ = worldExtent[1];\n        this.minLon_ = worldExtent[0];\n        this.maxLatP_ = worldExtentP[3];\n        this.maxLonP_ = worldExtentP[2];\n        this.minLatP_ = worldExtentP[1];\n        this.minLonP_ = worldExtentP[0];\n        this.fromLonLatTransform_ = getTransform(epsg4326Projection, projection);\n        this.toLonLatTransform_ = getTransform(projection, epsg4326Projection);\n        this.projectionCenterLonLat_ = this.toLonLatTransform_(getCenter(projection.getExtent()));\n        this.projection_ = projection;\n    };\n    return Graticule;\n}(VectorLayer));\nexport default Graticule;\n//# sourceMappingURL=Graticule.js.map"]},"metadata":{},"sourceType":"module"}