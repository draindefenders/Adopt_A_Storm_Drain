{"ast":null,"code":"/**\n * @module ol/format/xsd\n */\nimport { getAllTextContent, getDocument } from '../xml.js';\nimport { padNumber } from '../string.js';\n/**\n * @param {Node} node Node.\n * @return {boolean|undefined} Boolean.\n */\n\nexport function readBoolean(node) {\n  var s = getAllTextContent(node, false);\n  return readBooleanString(s);\n}\n/**\n * @param {string} string String.\n * @return {boolean|undefined} Boolean.\n */\n\nexport function readBooleanString(string) {\n  var m = /^\\s*(true|1)|(false|0)\\s*$/.exec(string);\n\n  if (m) {\n    return m[1] !== undefined || false;\n  } else {\n    return undefined;\n  }\n}\n/**\n * @param {Node} node Node.\n * @return {number|undefined} DateTime in seconds.\n */\n\nexport function readDateTime(node) {\n  var s = getAllTextContent(node, false);\n  var dateTime = Date.parse(s);\n  return isNaN(dateTime) ? undefined : dateTime / 1000;\n}\n/**\n * @param {Node} node Node.\n * @return {number|undefined} Decimal.\n */\n\nexport function readDecimal(node) {\n  var s = getAllTextContent(node, false);\n  return readDecimalString(s);\n}\n/**\n * @param {string} string String.\n * @return {number|undefined} Decimal.\n */\n\nexport function readDecimalString(string) {\n  // FIXME check spec\n  var m = /^\\s*([+\\-]?\\d*\\.?\\d+(?:e[+\\-]?\\d+)?)\\s*$/i.exec(string);\n\n  if (m) {\n    return parseFloat(m[1]);\n  } else {\n    return undefined;\n  }\n}\n/**\n * @param {Node} node Node.\n * @return {number|undefined} Non negative integer.\n */\n\nexport function readNonNegativeInteger(node) {\n  var s = getAllTextContent(node, false);\n  return readNonNegativeIntegerString(s);\n}\n/**\n * @param {string} string String.\n * @return {number|undefined} Non negative integer.\n */\n\nexport function readNonNegativeIntegerString(string) {\n  var m = /^\\s*(\\d+)\\s*$/.exec(string);\n\n  if (m) {\n    return parseInt(m[1], 10);\n  } else {\n    return undefined;\n  }\n}\n/**\n * @param {Node} node Node.\n * @return {string|undefined} String.\n */\n\nexport function readString(node) {\n  return getAllTextContent(node, false).trim();\n}\n/**\n * @param {Node} node Node to append a TextNode with the boolean to.\n * @param {boolean} bool Boolean.\n */\n\nexport function writeBooleanTextNode(node, bool) {\n  writeStringTextNode(node, bool ? '1' : '0');\n}\n/**\n * @param {Node} node Node to append a CDATA Section with the string to.\n * @param {string} string String.\n */\n\nexport function writeCDATASection(node, string) {\n  node.appendChild(getDocument().createCDATASection(string));\n}\n/**\n * @param {Node} node Node to append a TextNode with the dateTime to.\n * @param {number} dateTime DateTime in seconds.\n */\n\nexport function writeDateTimeTextNode(node, dateTime) {\n  var date = new Date(dateTime * 1000);\n  var string = date.getUTCFullYear() + '-' + padNumber(date.getUTCMonth() + 1, 2) + '-' + padNumber(date.getUTCDate(), 2) + 'T' + padNumber(date.getUTCHours(), 2) + ':' + padNumber(date.getUTCMinutes(), 2) + ':' + padNumber(date.getUTCSeconds(), 2) + 'Z';\n  node.appendChild(getDocument().createTextNode(string));\n}\n/**\n * @param {Node} node Node to append a TextNode with the decimal to.\n * @param {number} decimal Decimal.\n */\n\nexport function writeDecimalTextNode(node, decimal) {\n  var string = decimal.toPrecision();\n  node.appendChild(getDocument().createTextNode(string));\n}\n/**\n * @param {Node} node Node to append a TextNode with the decimal to.\n * @param {number} nonNegativeInteger Non negative integer.\n */\n\nexport function writeNonNegativeIntegerTextNode(node, nonNegativeInteger) {\n  var string = nonNegativeInteger.toString();\n  node.appendChild(getDocument().createTextNode(string));\n}\n/**\n * @param {Node} node Node to append a TextNode with the string to.\n * @param {string} string String.\n */\n\nexport function writeStringTextNode(node, string) {\n  node.appendChild(getDocument().createTextNode(string));\n}","map":{"version":3,"sources":["../src/format/xsd.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @module ol/format/xsd\n */\nimport { getAllTextContent, getDocument } from '../xml.js';\nimport { padNumber } from '../string.js';\n/**\n * @param {Node} node Node.\n * @return {boolean|undefined} Boolean.\n */\nexport function readBoolean(node) {\n    var s = getAllTextContent(node, false);\n    return readBooleanString(s);\n}\n/**\n * @param {string} string String.\n * @return {boolean|undefined} Boolean.\n */\nexport function readBooleanString(string) {\n    var m = /^\\s*(true|1)|(false|0)\\s*$/.exec(string);\n    if (m) {\n        return m[1] !== undefined || false;\n    }\n    else {\n        return undefined;\n    }\n}\n/**\n * @param {Node} node Node.\n * @return {number|undefined} DateTime in seconds.\n */\nexport function readDateTime(node) {\n    var s = getAllTextContent(node, false);\n    var dateTime = Date.parse(s);\n    return isNaN(dateTime) ? undefined : dateTime / 1000;\n}\n/**\n * @param {Node} node Node.\n * @return {number|undefined} Decimal.\n */\nexport function readDecimal(node) {\n    var s = getAllTextContent(node, false);\n    return readDecimalString(s);\n}\n/**\n * @param {string} string String.\n * @return {number|undefined} Decimal.\n */\nexport function readDecimalString(string) {\n    // FIXME check spec\n    var m = /^\\s*([+\\-]?\\d*\\.?\\d+(?:e[+\\-]?\\d+)?)\\s*$/i.exec(string);\n    if (m) {\n        return parseFloat(m[1]);\n    }\n    else {\n        return undefined;\n    }\n}\n/**\n * @param {Node} node Node.\n * @return {number|undefined} Non negative integer.\n */\nexport function readNonNegativeInteger(node) {\n    var s = getAllTextContent(node, false);\n    return readNonNegativeIntegerString(s);\n}\n/**\n * @param {string} string String.\n * @return {number|undefined} Non negative integer.\n */\nexport function readNonNegativeIntegerString(string) {\n    var m = /^\\s*(\\d+)\\s*$/.exec(string);\n    if (m) {\n        return parseInt(m[1], 10);\n    }\n    else {\n        return undefined;\n    }\n}\n/**\n * @param {Node} node Node.\n * @return {string|undefined} String.\n */\nexport function readString(node) {\n    return getAllTextContent(node, false).trim();\n}\n/**\n * @param {Node} node Node to append a TextNode with the boolean to.\n * @param {boolean} bool Boolean.\n */\nexport function writeBooleanTextNode(node, bool) {\n    writeStringTextNode(node, (bool) ? '1' : '0');\n}\n/**\n * @param {Node} node Node to append a CDATA Section with the string to.\n * @param {string} string String.\n */\nexport function writeCDATASection(node, string) {\n    node.appendChild(getDocument().createCDATASection(string));\n}\n/**\n * @param {Node} node Node to append a TextNode with the dateTime to.\n * @param {number} dateTime DateTime in seconds.\n */\nexport function writeDateTimeTextNode(node, dateTime) {\n    var date = new Date(dateTime * 1000);\n    var string = date.getUTCFullYear() + '-' +\n        padNumber(date.getUTCMonth() + 1, 2) + '-' +\n        padNumber(date.getUTCDate(), 2) + 'T' +\n        padNumber(date.getUTCHours(), 2) + ':' +\n        padNumber(date.getUTCMinutes(), 2) + ':' +\n        padNumber(date.getUTCSeconds(), 2) + 'Z';\n    node.appendChild(getDocument().createTextNode(string));\n}\n/**\n * @param {Node} node Node to append a TextNode with the decimal to.\n * @param {number} decimal Decimal.\n */\nexport function writeDecimalTextNode(node, decimal) {\n    var string = decimal.toPrecision();\n    node.appendChild(getDocument().createTextNode(string));\n}\n/**\n * @param {Node} node Node to append a TextNode with the decimal to.\n * @param {number} nonNegativeInteger Non negative integer.\n */\nexport function writeNonNegativeIntegerTextNode(node, nonNegativeInteger) {\n    var string = nonNegativeInteger.toString();\n    node.appendChild(getDocument().createTextNode(string));\n}\n/**\n * @param {Node} node Node to append a TextNode with the string to.\n * @param {string} string String.\n */\nexport function writeStringTextNode(node, string) {\n    node.appendChild(getDocument().createTextNode(string));\n}\n//# sourceMappingURL=xsd.js.map"]},"metadata":{},"sourceType":"module"}