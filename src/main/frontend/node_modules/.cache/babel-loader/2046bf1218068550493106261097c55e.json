{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/proj/epsg3857\n */\n\n\nimport { cosh } from '../math.js';\nimport Projection from './Projection.js';\nimport Units from './Units.js';\n/**\n * Radius of WGS84 sphere\n *\n * @const\n * @type {number}\n */\n\nexport var RADIUS = 6378137;\n/**\n * @const\n * @type {number}\n */\n\nexport var HALF_SIZE = Math.PI * RADIUS;\n/**\n * @const\n * @type {import(\"../extent.js\").Extent}\n */\n\nexport var EXTENT = [-HALF_SIZE, -HALF_SIZE, HALF_SIZE, HALF_SIZE];\n/**\n * @const\n * @type {import(\"../extent.js\").Extent}\n */\n\nexport var WORLD_EXTENT = [-180, -85, 180, 85];\n/**\n * @classdesc\n * Projection object for web/spherical Mercator (EPSG:3857).\n */\n\nvar EPSG3857Projection =\n/** @class */\nfunction (_super) {\n  __extends(EPSG3857Projection, _super);\n  /**\n   * @param {string} code Code.\n   */\n\n\n  function EPSG3857Projection(code) {\n    return _super.call(this, {\n      code: code,\n      units: Units.METERS,\n      extent: EXTENT,\n      global: true,\n      worldExtent: WORLD_EXTENT,\n      getPointResolution: function (resolution, point) {\n        return resolution / cosh(point[1] / RADIUS);\n      }\n    }) || this;\n  }\n\n  return EPSG3857Projection;\n}(Projection);\n/**\n * Projections equal to EPSG:3857.\n *\n * @const\n * @type {Array<import(\"./Projection.js\").default>}\n */\n\n\nexport var PROJECTIONS = [new EPSG3857Projection('EPSG:3857'), new EPSG3857Projection('EPSG:102100'), new EPSG3857Projection('EPSG:102113'), new EPSG3857Projection('EPSG:900913'), new EPSG3857Projection('urn:ogc:def:crs:EPSG:6.18:3:3857'), new EPSG3857Projection('urn:ogc:def:crs:EPSG::3857'), new EPSG3857Projection('http://www.opengis.net/gml/srs/epsg.xml#3857')];\n/**\n * Transformation from EPSG:4326 to EPSG:3857.\n *\n * @param {Array<number>} input Input array of coordinate values.\n * @param {Array<number>=} opt_output Output array of coordinate values.\n * @param {number=} opt_dimension Dimension (default is `2`).\n * @return {Array<number>} Output array of coordinate values.\n */\n\nexport function fromEPSG4326(input, opt_output, opt_dimension) {\n  var length = input.length;\n  var dimension = opt_dimension > 1 ? opt_dimension : 2;\n  var output = opt_output;\n\n  if (output === undefined) {\n    if (dimension > 2) {\n      // preserve values beyond second dimension\n      output = input.slice();\n    } else {\n      output = new Array(length);\n    }\n  }\n\n  var halfSize = HALF_SIZE;\n\n  for (var i = 0; i < length; i += dimension) {\n    output[i] = halfSize * input[i] / 180;\n    var y = RADIUS * Math.log(Math.tan(Math.PI * (+input[i + 1] + 90) / 360));\n\n    if (y > halfSize) {\n      y = halfSize;\n    } else if (y < -halfSize) {\n      y = -halfSize;\n    }\n\n    output[i + 1] = y;\n  }\n\n  return output;\n}\n/**\n * Transformation from EPSG:3857 to EPSG:4326.\n *\n * @param {Array<number>} input Input array of coordinate values.\n * @param {Array<number>=} opt_output Output array of coordinate values.\n * @param {number=} opt_dimension Dimension (default is `2`).\n * @return {Array<number>} Output array of coordinate values.\n */\n\nexport function toEPSG4326(input, opt_output, opt_dimension) {\n  var length = input.length;\n  var dimension = opt_dimension > 1 ? opt_dimension : 2;\n  var output = opt_output;\n\n  if (output === undefined) {\n    if (dimension > 2) {\n      // preserve values beyond second dimension\n      output = input.slice();\n    } else {\n      output = new Array(length);\n    }\n  }\n\n  for (var i = 0; i < length; i += dimension) {\n    output[i] = 180 * input[i] / HALF_SIZE;\n    output[i + 1] = 360 * Math.atan(Math.exp(input[i + 1] / RADIUS)) / Math.PI - 90;\n  }\n\n  return output;\n}","map":{"version":3,"sources":["../src/proj/epsg3857.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/proj/epsg3857\n */\nimport { cosh } from '../math.js';\nimport Projection from './Projection.js';\nimport Units from './Units.js';\n/**\n * Radius of WGS84 sphere\n *\n * @const\n * @type {number}\n */\nexport var RADIUS = 6378137;\n/**\n * @const\n * @type {number}\n */\nexport var HALF_SIZE = Math.PI * RADIUS;\n/**\n * @const\n * @type {import(\"../extent.js\").Extent}\n */\nexport var EXTENT = [\n    -HALF_SIZE, -HALF_SIZE,\n    HALF_SIZE, HALF_SIZE\n];\n/**\n * @const\n * @type {import(\"../extent.js\").Extent}\n */\nexport var WORLD_EXTENT = [-180, -85, 180, 85];\n/**\n * @classdesc\n * Projection object for web/spherical Mercator (EPSG:3857).\n */\nvar EPSG3857Projection = /** @class */ (function (_super) {\n    __extends(EPSG3857Projection, _super);\n    /**\n     * @param {string} code Code.\n     */\n    function EPSG3857Projection(code) {\n        return _super.call(this, {\n            code: code,\n            units: Units.METERS,\n            extent: EXTENT,\n            global: true,\n            worldExtent: WORLD_EXTENT,\n            getPointResolution: function (resolution, point) {\n                return resolution / cosh(point[1] / RADIUS);\n            }\n        }) || this;\n    }\n    return EPSG3857Projection;\n}(Projection));\n/**\n * Projections equal to EPSG:3857.\n *\n * @const\n * @type {Array<import(\"./Projection.js\").default>}\n */\nexport var PROJECTIONS = [\n    new EPSG3857Projection('EPSG:3857'),\n    new EPSG3857Projection('EPSG:102100'),\n    new EPSG3857Projection('EPSG:102113'),\n    new EPSG3857Projection('EPSG:900913'),\n    new EPSG3857Projection('urn:ogc:def:crs:EPSG:6.18:3:3857'),\n    new EPSG3857Projection('urn:ogc:def:crs:EPSG::3857'),\n    new EPSG3857Projection('http://www.opengis.net/gml/srs/epsg.xml#3857')\n];\n/**\n * Transformation from EPSG:4326 to EPSG:3857.\n *\n * @param {Array<number>} input Input array of coordinate values.\n * @param {Array<number>=} opt_output Output array of coordinate values.\n * @param {number=} opt_dimension Dimension (default is `2`).\n * @return {Array<number>} Output array of coordinate values.\n */\nexport function fromEPSG4326(input, opt_output, opt_dimension) {\n    var length = input.length;\n    var dimension = opt_dimension > 1 ? opt_dimension : 2;\n    var output = opt_output;\n    if (output === undefined) {\n        if (dimension > 2) {\n            // preserve values beyond second dimension\n            output = input.slice();\n        }\n        else {\n            output = new Array(length);\n        }\n    }\n    var halfSize = HALF_SIZE;\n    for (var i = 0; i < length; i += dimension) {\n        output[i] = halfSize * input[i] / 180;\n        var y = RADIUS *\n            Math.log(Math.tan(Math.PI * (+input[i + 1] + 90) / 360));\n        if (y > halfSize) {\n            y = halfSize;\n        }\n        else if (y < -halfSize) {\n            y = -halfSize;\n        }\n        output[i + 1] = y;\n    }\n    return output;\n}\n/**\n * Transformation from EPSG:3857 to EPSG:4326.\n *\n * @param {Array<number>} input Input array of coordinate values.\n * @param {Array<number>=} opt_output Output array of coordinate values.\n * @param {number=} opt_dimension Dimension (default is `2`).\n * @return {Array<number>} Output array of coordinate values.\n */\nexport function toEPSG4326(input, opt_output, opt_dimension) {\n    var length = input.length;\n    var dimension = opt_dimension > 1 ? opt_dimension : 2;\n    var output = opt_output;\n    if (output === undefined) {\n        if (dimension > 2) {\n            // preserve values beyond second dimension\n            output = input.slice();\n        }\n        else {\n            output = new Array(length);\n        }\n    }\n    for (var i = 0; i < length; i += dimension) {\n        output[i] = 180 * input[i] / HALF_SIZE;\n        output[i + 1] = 360 * Math.atan(Math.exp(input[i + 1] / RADIUS)) / Math.PI - 90;\n    }\n    return output;\n}\n//# sourceMappingURL=epsg3857.js.map"]},"metadata":{},"sourceType":"module"}