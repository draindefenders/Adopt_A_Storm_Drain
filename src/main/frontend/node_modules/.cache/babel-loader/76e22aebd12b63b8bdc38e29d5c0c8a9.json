{"ast":null,"code":"/**\n * @module ol/source/ImageCanvas\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport ImageCanvas from '../ImageCanvas.js';\nimport { containsExtent, getHeight, getWidth, scaleFromCenter } from '../extent.js';\nimport ImageSource from './Image.js';\n/**\n * A function returning the canvas element (`{HTMLCanvasElement}`)\n * used by the source as an image. The arguments passed to the function are:\n * {@link module:ol/extent~Extent} the image extent, `{number}` the image resolution,\n * `{number}` the device pixel ratio, {@link module:ol/size~Size} the image size, and\n * {@link module:ol/proj/Projection} the image projection. The canvas returned by\n * this function is cached by the source. The this keyword inside the function\n * references the {@link module:ol/source/ImageCanvas}.\n *\n * @typedef {function(this:import(\"../ImageCanvas.js\").default, import(\"../extent.js\").Extent, number,\n *     number, import(\"../size.js\").Size, import(\"../proj/Projection.js\").default): HTMLCanvasElement} FunctionType\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {FunctionType} [canvasFunction] Canvas function.\n * The function returning the canvas element used by the source\n * as an image. The arguments passed to the function are: `{import(\"../extent.js\").Extent}` the\n * image extent, `{number}` the image resolution, `{number}` the device pixel\n * ratio, `{import(\"../size.js\").Size}` the image size, and `{import(\"../proj/Projection.js\").Projection}` the image\n * projection. The canvas returned by this function is cached by the source. If\n * the value returned by the function is later changed then\n * `changed` should be called on the source for the source to\n * invalidate the current cached image. See: {@link module:ol/Observable~Observable#changed}\n * @property {import(\"../proj.js\").ProjectionLike} projection Projection.\n * @property {number} [ratio=1.5] Ratio. 1 means canvases are the size of the map viewport, 2 means twice the\n * width and height of the map viewport, and so on. Must be `1` or higher.\n * @property {Array<number>} [resolutions] Resolutions.\n * If specified, new canvases will be created for these resolutions\n * @property {import(\"./State.js\").default} [state] Source state.\n */\n\n/**\n * @classdesc\n * Base class for image sources where a canvas element is the image.\n * @api\n */\n\nvar ImageCanvasSource =\n/** @class */\nfunction (_super) {\n  __extends(ImageCanvasSource, _super);\n  /**\n   * @param {Options=} opt_options ImageCanvas options.\n   */\n\n\n  function ImageCanvasSource(opt_options) {\n    var _this = this;\n\n    var options = opt_options ? opt_options : {};\n    _this = _super.call(this, {\n      attributions: options.attributions,\n      projection: options.projection,\n      resolutions: options.resolutions,\n      state: options.state\n    }) || this;\n    /**\n    * @private\n    * @type {FunctionType}\n    */\n\n    _this.canvasFunction_ = options.canvasFunction;\n    /**\n    * @private\n    * @type {import(\"../ImageCanvas.js\").default}\n    */\n\n    _this.canvas_ = null;\n    /**\n    * @private\n    * @type {number}\n    */\n\n    _this.renderedRevision_ = 0;\n    /**\n    * @private\n    * @type {number}\n    */\n\n    _this.ratio_ = options.ratio !== undefined ? options.ratio : 1.5;\n    return _this;\n  }\n  /**\n  * @inheritDoc\n  */\n\n\n  ImageCanvasSource.prototype.getImageInternal = function (extent, resolution, pixelRatio, projection) {\n    resolution = this.findNearestResolution(resolution);\n    var canvas = this.canvas_;\n\n    if (canvas && this.renderedRevision_ == this.getRevision() && canvas.getResolution() == resolution && canvas.getPixelRatio() == pixelRatio && containsExtent(canvas.getExtent(), extent)) {\n      return canvas;\n    }\n\n    extent = extent.slice();\n    scaleFromCenter(extent, this.ratio_);\n    var width = getWidth(extent) / resolution;\n    var height = getHeight(extent) / resolution;\n    var size = [width * pixelRatio, height * pixelRatio];\n    var canvasElement = this.canvasFunction_.call(this, extent, resolution, pixelRatio, size, projection);\n\n    if (canvasElement) {\n      canvas = new ImageCanvas(extent, resolution, pixelRatio, canvasElement);\n    }\n\n    this.canvas_ = canvas;\n    this.renderedRevision_ = this.getRevision();\n    return canvas;\n  };\n\n  return ImageCanvasSource;\n}(ImageSource);\n\nexport default ImageCanvasSource;","map":{"version":3,"sources":["../src/source/ImageCanvas.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA,OAAO,WAAP,MAAwB,mBAAxB;AACA,SAAQ,cAAR,EAAwB,SAAxB,EAAmC,QAAnC,EAA6C,eAA7C,QAAmE,cAAnE;AACA,OAAO,WAAP,MAAwB,YAAxB;AAGA;;;;;;;;;;;;;AAcA;;;;;;;;;;;;;;;;;;;;AAqBA;;;;;;AAKA,IAAA,iBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAgC,EAAA,SAAA,CAAA,iBAAA,EAAA,MAAA,CAAA;AAC9B;;;;;AAGA,WAAA,iBAAA,CAAY,WAAZ,EAAuB;AAAvB,QAAA,KAAA,GAAA,IAAA;;AAEE,QAAM,OAAO,GAAG,WAAW,GAAG,WAAH,GAAiB,EAA5C;AAEA,IAAA,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM;AACJ,MAAA,YAAY,EAAE,OAAO,CAAC,YADlB;AAEJ,MAAA,UAAU,EAAE,OAAO,CAAC,UAFhB;AAGJ,MAAA,WAAW,EAAE,OAAO,CAAC,WAHjB;AAIJ,MAAA,KAAK,EAAE,OAAO,CAAC;AAJX,KAAN,KAKE,IALF;AAOA;;;;;AAIA,IAAA,KAAI,CAAC,eAAL,GAAuB,OAAO,CAAC,cAA/B;AAEA;;;;;AAIA,IAAA,KAAI,CAAC,OAAL,GAAe,IAAf;AAEA;;;;;AAIA,IAAA,KAAI,CAAC,iBAAL,GAAyB,CAAzB;AAEA;;;;;AAIA,IAAA,KAAI,CAAC,MAAL,GAAc,OAAO,CAAC,KAAR,KAAkB,SAAlB,GACZ,OAAO,CAAC,KADI,GACI,GADlB;;AAGD;AAED;;;;;AAGA,EAAA,iBAAA,CAAA,SAAA,CAAA,gBAAA,GAAA,UAAiB,MAAjB,EAAyB,UAAzB,EAAqC,UAArC,EAAiD,UAAjD,EAA2D;AACzD,IAAA,UAAU,GAAG,KAAK,qBAAL,CAA2B,UAA3B,CAAb;AAEA,QAAI,MAAM,GAAG,KAAK,OAAlB;;AACA,QAAI,MAAM,IACP,KAAK,iBAAL,IAA0B,KAAK,WAAL,EADzB,IAED,MAAM,CAAC,aAAP,MAA0B,UAFzB,IAGD,MAAM,CAAC,aAAP,MAA0B,UAHzB,IAID,cAAc,CAAC,MAAM,CAAC,SAAP,EAAD,EAAqB,MAArB,CAJjB,EAI+C;AAC7C,aAAO,MAAP;AACD;;AAED,IAAA,MAAM,GAAG,MAAM,CAAC,KAAP,EAAT;AACA,IAAA,eAAe,CAAC,MAAD,EAAS,KAAK,MAAd,CAAf;AACA,QAAM,KAAK,GAAG,QAAQ,CAAC,MAAD,CAAR,GAAmB,UAAjC;AACA,QAAM,MAAM,GAAG,SAAS,CAAC,MAAD,CAAT,GAAoB,UAAnC;AACA,QAAM,IAAI,GAAG,CAAC,KAAK,GAAG,UAAT,EAAqB,MAAM,GAAG,UAA9B,CAAb;AAEA,QAAM,aAAa,GAAG,KAAK,eAAL,CAAqB,IAArB,CACpB,IADoB,EACd,MADc,EACN,UADM,EACM,UADN,EACkB,IADlB,EACwB,UADxB,CAAtB;;AAEA,QAAI,aAAJ,EAAmB;AACjB,MAAA,MAAM,GAAG,IAAI,WAAJ,CAAgB,MAAhB,EAAwB,UAAxB,EAAoC,UAApC,EAAgD,aAAhD,CAAT;AACD;;AACD,SAAK,OAAL,GAAe,MAAf;AACA,SAAK,iBAAL,GAAyB,KAAK,WAAL,EAAzB;AAEA,WAAO,MAAP;AACD,GA3BD;;AA4BF,SAAA,iBAAA;AAAC,CAzED,CAAgC,WAAhC,CAAA;;AA4EA,eAAe,iBAAf","sourceRoot":"","sourcesContent":["/**\n * @module ol/source/ImageCanvas\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport ImageCanvas from '../ImageCanvas.js';\nimport { containsExtent, getHeight, getWidth, scaleFromCenter } from '../extent.js';\nimport ImageSource from './Image.js';\n/**\n * A function returning the canvas element (`{HTMLCanvasElement}`)\n * used by the source as an image. The arguments passed to the function are:\n * {@link module:ol/extent~Extent} the image extent, `{number}` the image resolution,\n * `{number}` the device pixel ratio, {@link module:ol/size~Size} the image size, and\n * {@link module:ol/proj/Projection} the image projection. The canvas returned by\n * this function is cached by the source. The this keyword inside the function\n * references the {@link module:ol/source/ImageCanvas}.\n *\n * @typedef {function(this:import(\"../ImageCanvas.js\").default, import(\"../extent.js\").Extent, number,\n *     number, import(\"../size.js\").Size, import(\"../proj/Projection.js\").default): HTMLCanvasElement} FunctionType\n */\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {FunctionType} [canvasFunction] Canvas function.\n * The function returning the canvas element used by the source\n * as an image. The arguments passed to the function are: `{import(\"../extent.js\").Extent}` the\n * image extent, `{number}` the image resolution, `{number}` the device pixel\n * ratio, `{import(\"../size.js\").Size}` the image size, and `{import(\"../proj/Projection.js\").Projection}` the image\n * projection. The canvas returned by this function is cached by the source. If\n * the value returned by the function is later changed then\n * `changed` should be called on the source for the source to\n * invalidate the current cached image. See: {@link module:ol/Observable~Observable#changed}\n * @property {import(\"../proj.js\").ProjectionLike} projection Projection.\n * @property {number} [ratio=1.5] Ratio. 1 means canvases are the size of the map viewport, 2 means twice the\n * width and height of the map viewport, and so on. Must be `1` or higher.\n * @property {Array<number>} [resolutions] Resolutions.\n * If specified, new canvases will be created for these resolutions\n * @property {import(\"./State.js\").default} [state] Source state.\n */\n/**\n * @classdesc\n * Base class for image sources where a canvas element is the image.\n * @api\n */\nvar ImageCanvasSource = /** @class */ (function (_super) {\n    __extends(ImageCanvasSource, _super);\n    /**\n     * @param {Options=} opt_options ImageCanvas options.\n     */\n    function ImageCanvasSource(opt_options) {\n        var _this = this;\n        var options = opt_options ? opt_options : {};\n        _this = _super.call(this, {\n            attributions: options.attributions,\n            projection: options.projection,\n            resolutions: options.resolutions,\n            state: options.state\n        }) || this;\n        /**\n        * @private\n        * @type {FunctionType}\n        */\n        _this.canvasFunction_ = options.canvasFunction;\n        /**\n        * @private\n        * @type {import(\"../ImageCanvas.js\").default}\n        */\n        _this.canvas_ = null;\n        /**\n        * @private\n        * @type {number}\n        */\n        _this.renderedRevision_ = 0;\n        /**\n        * @private\n        * @type {number}\n        */\n        _this.ratio_ = options.ratio !== undefined ?\n            options.ratio : 1.5;\n        return _this;\n    }\n    /**\n    * @inheritDoc\n    */\n    ImageCanvasSource.prototype.getImageInternal = function (extent, resolution, pixelRatio, projection) {\n        resolution = this.findNearestResolution(resolution);\n        var canvas = this.canvas_;\n        if (canvas &&\n            this.renderedRevision_ == this.getRevision() &&\n            canvas.getResolution() == resolution &&\n            canvas.getPixelRatio() == pixelRatio &&\n            containsExtent(canvas.getExtent(), extent)) {\n            return canvas;\n        }\n        extent = extent.slice();\n        scaleFromCenter(extent, this.ratio_);\n        var width = getWidth(extent) / resolution;\n        var height = getHeight(extent) / resolution;\n        var size = [width * pixelRatio, height * pixelRatio];\n        var canvasElement = this.canvasFunction_.call(this, extent, resolution, pixelRatio, size, projection);\n        if (canvasElement) {\n            canvas = new ImageCanvas(extent, resolution, pixelRatio, canvasElement);\n        }\n        this.canvas_ = canvas;\n        this.renderedRevision_ = this.getRevision();\n        return canvas;\n    };\n    return ImageCanvasSource;\n}(ImageSource));\nexport default ImageCanvasSource;\n//# sourceMappingURL=ImageCanvas.js.map"]},"metadata":{},"sourceType":"module"}