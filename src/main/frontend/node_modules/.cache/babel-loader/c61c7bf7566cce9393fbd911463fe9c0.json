{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/source/Raster\n */\n\n\nimport ImageCanvas from '../ImageCanvas.js';\nimport TileQueue from '../TileQueue.js';\nimport { createCanvasContext2D } from '../dom.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport { Processor } from 'pixelworks/lib/index.js';\nimport { equals, getCenter, getHeight, getWidth } from '../extent.js';\nimport ImageLayer from '../layer/Image.js';\nimport TileLayer from '../layer/Tile.js';\nimport { assign } from '../obj.js';\nimport { create as createTransform } from '../transform.js';\nimport ImageSource from './Image.js';\nimport TileSource from './Tile.js';\nimport SourceState from './State.js';\nimport Source from './Source.js';\n/**\n * A function that takes an array of input data, performs some operation, and\n * returns an array of output data.\n * For `pixel` type operations, the function will be called with an array of\n * pixels, where each pixel is an array of four numbers (`[r, g, b, a]`) in the\n * range of 0 - 255. It should return a single pixel array.\n * For `'image'` type operations, functions will be called with an array of\n * {@link ImageData https://developer.mozilla.org/en-US/docs/Web/API/ImageData}\n * and should return a single {@link ImageData\n * https://developer.mozilla.org/en-US/docs/Web/API/ImageData}.  The operations\n * are called with a second \"data\" argument, which can be used for storage.  The\n * data object is accessible from raster events, where it can be initialized in\n * \"beforeoperations\" and accessed again in \"afteroperations\".\n *\n * @typedef {function((Array<Array<number>>|Array<ImageData>), Object):\n *     (Array<number>|ImageData)} Operation\n */\n\n/**\n * @enum {string}\n */\n\nvar RasterEventType = {\n  /**\n   * Triggered before operations are run.\n   * @event module:ol/source/Raster.RasterSourceEvent#beforeoperations\n   * @api\n   */\n  BEFOREOPERATIONS: 'beforeoperations',\n\n  /**\n   * Triggered after operations are run.\n   * @event module:ol/source/Raster.RasterSourceEvent#afteroperations\n   * @api\n   */\n  AFTEROPERATIONS: 'afteroperations'\n};\n/**\n * Raster operation type. Supported values are `'pixel'` and `'image'`.\n * @enum {string}\n */\n\nvar RasterOperationType = {\n  PIXEL: 'pixel',\n  IMAGE: 'image'\n};\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Raster} instances are instances of this\n * type.\n */\n\nvar RasterSourceEvent =\n/** @class */\nfunction (_super) {\n  __extends(RasterSourceEvent, _super);\n  /**\n   * @param {string} type Type.\n   * @param {import(\"../PluggableMap.js\").FrameState} frameState The frame state.\n   * @param {Object} data An object made available to operations.\n   */\n\n\n  function RasterSourceEvent(type, frameState, data) {\n    var _this = _super.call(this, type) || this;\n    /**\n     * The raster extent.\n     * @type {import(\"../extent.js\").Extent}\n     * @api\n     */\n\n\n    _this.extent = frameState.extent;\n    /**\n     * The pixel resolution (map units per pixel).\n     * @type {number}\n     * @api\n     */\n\n    _this.resolution = frameState.viewState.resolution / frameState.pixelRatio;\n    /**\n     * An object made available to all operations.  This can be used by operations\n     * as a storage object (e.g. for calculating statistics).\n     * @type {Object}\n     * @api\n     */\n\n    _this.data = data;\n    return _this;\n  }\n\n  return RasterSourceEvent;\n}(Event);\n\nexport { RasterSourceEvent };\n/**\n * @typedef {Object} Options\n * @property {Array<import(\"./Source.js\").default|import(\"../layer/Layer.js\").default>} sources Input\n * sources or layers.  For vector data, use an VectorImage layer.\n * @property {Operation} [operation] Raster operation.\n * The operation will be called with data from input sources\n * and the output will be assigned to the raster source.\n * @property {Object} [lib] Functions that will be made available to operations run in a worker.\n * @property {number} [threads] By default, operations will be run in a single worker thread.\n * To avoid using workers altogether, set `threads: 0`.  For pixel operations, operations can\n * be run in multiple worker threads.  Note that there is additional overhead in\n * transferring data to multiple workers, and that depending on the user's\n * system, it may not be possible to parallelize the work.\n * @property {RasterOperationType} [operationType='pixel'] Operation type.\n * Supported values are `'pixel'` and `'image'`.  By default,\n * `'pixel'` operations are assumed, and operations will be called with an\n * array of pixels from input sources.  If set to `'image'`, operations will\n * be called with an array of ImageData objects from input sources.\n */\n\n/**\n * @classdesc\n * A source that transforms data from any number of input sources using an\n * {@link module:ol/source/Raster~Operation} function to transform input pixel values into\n * output pixel values.\n *\n * @fires module:ol/source/Raster.RasterSourceEvent\n * @api\n */\n\nvar RasterSource =\n/** @class */\nfunction (_super) {\n  __extends(RasterSource, _super);\n  /**\n   * @param {Options} options Options.\n   */\n\n\n  function RasterSource(options) {\n    var _this = _super.call(this, {\n      projection: null\n    }) || this;\n    /**\n     * @private\n     * @type {*}\n     */\n\n\n    _this.worker_ = null;\n    /**\n     * @private\n     * @type {RasterOperationType}\n     */\n\n    _this.operationType_ = options.operationType !== undefined ? options.operationType : RasterOperationType.PIXEL;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.threads_ = options.threads !== undefined ? options.threads : 1;\n    /**\n     * @private\n     * @type {Array<import(\"../layer/Layer.js\").default>}\n     */\n\n    _this.layers_ = createLayers(options.sources);\n\n    var changed = _this.changed.bind(_this);\n\n    for (var i = 0, ii = _this.layers_.length; i < ii; ++i) {\n      _this.layers_[i].addEventListener(EventType.CHANGE, changed);\n    }\n    /**\n     * @private\n     * @type {import(\"../TileQueue.js\").default}\n     */\n\n\n    _this.tileQueue_ = new TileQueue(function () {\n      return 1;\n    }, _this.changed.bind(_this));\n    /**\n     * The most recently requested frame state.\n     * @type {import(\"../PluggableMap.js\").FrameState}\n     * @private\n     */\n\n    _this.requestedFrameState_;\n    /**\n     * The most recently rendered image canvas.\n     * @type {import(\"../ImageCanvas.js\").default}\n     * @private\n     */\n\n    _this.renderedImageCanvas_ = null;\n    /**\n     * The most recently rendered revision.\n     * @type {number}\n     */\n\n    _this.renderedRevision_;\n    /**\n     * @private\n     * @type {import(\"../PluggableMap.js\").FrameState}\n     */\n\n    _this.frameState_ = {\n      animate: false,\n      coordinateToPixelTransform: createTransform(),\n      extent: null,\n      index: 0,\n      layerIndex: 0,\n      layerStatesArray: getLayerStatesArray(_this.layers_),\n      pixelRatio: 1,\n      pixelToCoordinateTransform: createTransform(),\n      postRenderFunctions: [],\n      size: [0, 0],\n      tileQueue: _this.tileQueue_,\n      time: Date.now(),\n      usedTiles: {},\n      viewState:\n      /** @type {import(\"../View.js\").State} */\n      {\n        rotation: 0\n      },\n      viewHints: [],\n      wantedTiles: {},\n      declutterItems: []\n    };\n\n    _this.setAttributions(function (frameState) {\n      var attributions = [];\n\n      for (var index = 0, iMax = options.sources.length; index < iMax; ++index) {\n        var sourceOrLayer = options.sources[index];\n        var source = sourceOrLayer instanceof Source ? sourceOrLayer : sourceOrLayer.getSource();\n        var attributionGetter = source.getAttributions();\n\n        if (typeof attributionGetter === 'function') {\n          var sourceAttribution = attributionGetter(frameState);\n          attributions.push.apply(attributions, sourceAttribution);\n        }\n      }\n\n      return attributions.length !== 0 ? attributions : null;\n    });\n\n    if (options.operation !== undefined) {\n      _this.setOperation(options.operation, options.lib);\n    }\n\n    return _this;\n  }\n  /**\n   * Set the operation.\n   * @param {Operation} operation New operation.\n   * @param {Object=} opt_lib Functions that will be available to operations run\n   *     in a worker.\n   * @api\n   */\n\n\n  RasterSource.prototype.setOperation = function (operation, opt_lib) {\n    this.worker_ = new Processor({\n      operation: operation,\n      imageOps: this.operationType_ === RasterOperationType.IMAGE,\n      queue: 1,\n      lib: opt_lib,\n      threads: this.threads_\n    });\n    this.changed();\n  };\n  /**\n   * Update the stored frame state.\n   * @param {import(\"../extent.js\").Extent} extent The view extent (in map units).\n   * @param {number} resolution The view resolution.\n   * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n   * @return {import(\"../PluggableMap.js\").FrameState} The updated frame state.\n   * @private\n   */\n\n\n  RasterSource.prototype.updateFrameState_ = function (extent, resolution, projection) {\n    var frameState =\n    /** @type {import(\"../PluggableMap.js\").FrameState} */\n    assign({}, this.frameState_);\n    frameState.viewState =\n    /** @type {import(\"../View.js\").State} */\n    assign({}, frameState.viewState);\n    var center = getCenter(extent);\n    frameState.extent = extent.slice();\n    frameState.size[0] = Math.round(getWidth(extent) / resolution);\n    frameState.size[1] = Math.round(getHeight(extent) / resolution);\n    frameState.time = Infinity;\n    var viewState = frameState.viewState;\n    viewState.center = center;\n    viewState.projection = projection;\n    viewState.resolution = resolution;\n    return frameState;\n  };\n  /**\n   * Determine if all sources are ready.\n   * @return {boolean} All sources are ready.\n   * @private\n   */\n\n\n  RasterSource.prototype.allSourcesReady_ = function () {\n    var ready = true;\n    var source;\n\n    for (var i = 0, ii = this.layers_.length; i < ii; ++i) {\n      source = this.layers_[i].getSource();\n\n      if (source.getState() !== SourceState.READY) {\n        ready = false;\n        break;\n      }\n    }\n\n    return ready;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  RasterSource.prototype.getImage = function (extent, resolution, pixelRatio, projection) {\n    if (!this.allSourcesReady_()) {\n      return null;\n    }\n\n    var frameState = this.updateFrameState_(extent, resolution, projection);\n    this.requestedFrameState_ = frameState; // check if we can't reuse the existing ol/ImageCanvas\n\n    if (this.renderedImageCanvas_) {\n      var renderedResolution = this.renderedImageCanvas_.getResolution();\n      var renderedExtent = this.renderedImageCanvas_.getExtent();\n\n      if (resolution !== renderedResolution || !equals(extent, renderedExtent)) {\n        this.renderedImageCanvas_ = null;\n      }\n    }\n\n    if (!this.renderedImageCanvas_ || this.getRevision() !== this.renderedRevision_) {\n      this.processSources_();\n    }\n\n    frameState.tileQueue.loadMoreTiles(16, 16);\n\n    if (frameState.animate) {\n      requestAnimationFrame(this.changed.bind(this));\n    }\n\n    return this.renderedImageCanvas_;\n  };\n  /**\n   * Start processing source data.\n   * @private\n   */\n\n\n  RasterSource.prototype.processSources_ = function () {\n    var frameState = this.requestedFrameState_;\n    var len = this.layers_.length;\n    var imageDatas = new Array(len);\n\n    for (var i = 0; i < len; ++i) {\n      frameState.layerIndex = i;\n      var imageData = getImageData(this.layers_[i], frameState);\n\n      if (imageData) {\n        imageDatas[i] = imageData;\n      } else {\n        return;\n      }\n    }\n\n    var data = {};\n    this.dispatchEvent(new RasterSourceEvent(RasterEventType.BEFOREOPERATIONS, frameState, data));\n    this.worker_.process(imageDatas, data, this.onWorkerComplete_.bind(this, frameState));\n  };\n  /**\n   * Called when pixel processing is complete.\n   * @param {import(\"../PluggableMap.js\").FrameState} frameState The frame state.\n   * @param {Error} err Any error during processing.\n   * @param {ImageData} output The output image data.\n   * @param {Object} data The user data.\n   * @private\n   */\n\n\n  RasterSource.prototype.onWorkerComplete_ = function (frameState, err, output, data) {\n    if (err || !output) {\n      return;\n    } // do nothing if extent or resolution changed\n\n\n    var extent = frameState.extent;\n    var resolution = frameState.viewState.resolution;\n\n    if (resolution !== this.requestedFrameState_.viewState.resolution || !equals(extent, this.requestedFrameState_.extent)) {\n      return;\n    }\n\n    var context;\n\n    if (this.renderedImageCanvas_) {\n      context = this.renderedImageCanvas_.getImage().getContext('2d');\n    } else {\n      var width = Math.round(getWidth(extent) / resolution);\n      var height = Math.round(getHeight(extent) / resolution);\n      context = createCanvasContext2D(width, height);\n      this.renderedImageCanvas_ = new ImageCanvas(extent, resolution, 1, context.canvas);\n    }\n\n    context.putImageData(output, 0, 0);\n    this.changed();\n    this.renderedRevision_ = this.getRevision();\n    this.dispatchEvent(new RasterSourceEvent(RasterEventType.AFTEROPERATIONS, frameState, data));\n  };\n  /**\n   * @override\n   */\n\n\n  RasterSource.prototype.getImageInternal = function () {\n    return null; // not implemented\n  };\n\n  return RasterSource;\n}(ImageSource);\n/**\n * A reusable canvas context.\n * @type {CanvasRenderingContext2D}\n * @private\n */\n\n\nvar sharedContext = null;\n/**\n * Get image data from a layer.\n * @param {import(\"../layer/Layer.js\").default} layer Layer to render.\n * @param {import(\"../PluggableMap.js\").FrameState} frameState The frame state.\n * @return {ImageData} The image data.\n */\n\nfunction getImageData(layer, frameState) {\n  var renderer = layer.getRenderer();\n\n  if (!renderer) {\n    throw new Error('Unsupported layer type: ' + layer);\n  }\n\n  if (!renderer.prepareFrame(frameState)) {\n    return null;\n  }\n\n  var width = frameState.size[0];\n  var height = frameState.size[1];\n  var container = renderer.renderFrame(frameState, null);\n  var element;\n\n  if (container) {\n    element = container.firstElementChild;\n  }\n\n  if (!(element instanceof HTMLCanvasElement)) {\n    throw new Error('Unsupported rendered element: ' + element);\n  }\n\n  if (element.width === width && element.height === height) {\n    var context = element.getContext('2d');\n    return context.getImageData(0, 0, width, height);\n  }\n\n  if (!sharedContext) {\n    sharedContext = createCanvasContext2D(width, height);\n  } else {\n    var canvas = sharedContext.canvas;\n\n    if (canvas.width !== width || canvas.height !== height) {\n      sharedContext = createCanvasContext2D(width, height);\n    } else {\n      sharedContext.clearRect(0, 0, width, height);\n    }\n  }\n\n  sharedContext.drawImage(element, 0, 0, width, height);\n  return sharedContext.getImageData(0, 0, width, height);\n}\n/**\n * Get a list of layer states from a list of layers.\n * @param {Array<import(\"../layer/Layer.js\").default>} layers Layers.\n * @return {Array<import(\"../layer/Layer.js\").State>} The layer states.\n */\n\n\nfunction getLayerStatesArray(layers) {\n  return layers.map(function (layer) {\n    return layer.getLayerState();\n  });\n}\n/**\n * Create layers for all sources.\n * @param {Array<import(\"./Source.js\").default|import(\"../layer/Layer.js\").default>} sources The sources.\n * @return {Array<import(\"../layer/Layer.js\").default>} Array of layers.\n */\n\n\nfunction createLayers(sources) {\n  var len = sources.length;\n  var layers = new Array(len);\n\n  for (var i = 0; i < len; ++i) {\n    layers[i] = createLayer(sources[i]);\n  }\n\n  return layers;\n}\n/**\n * Create a layer for the provided source.\n * @param {import(\"./Source.js\").default|import(\"../layer/Layer.js\").default} layerOrSource The layer or source.\n * @return {import(\"../layer/Layer.js\").default} The layer.\n */\n\n\nfunction createLayer(layerOrSource) {\n  // @type {import(\"../layer/Layer.js\").default}\n  var layer;\n\n  if (layerOrSource instanceof Source) {\n    if (layerOrSource instanceof TileSource) {\n      layer = new TileLayer({\n        source: layerOrSource\n      });\n    } else if (layerOrSource instanceof ImageSource) {\n      layer = new ImageLayer({\n        source: layerOrSource\n      });\n    }\n  } else {\n    layer = layerOrSource;\n  }\n\n  return layer;\n}\n\nexport default RasterSource;","map":{"version":3,"sources":["../src/source/Raster.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/source/Raster\n */\nimport ImageCanvas from '../ImageCanvas.js';\nimport TileQueue from '../TileQueue.js';\nimport { createCanvasContext2D } from '../dom.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport { Processor } from 'pixelworks/lib/index.js';\nimport { equals, getCenter, getHeight, getWidth } from '../extent.js';\nimport ImageLayer from '../layer/Image.js';\nimport TileLayer from '../layer/Tile.js';\nimport { assign } from '../obj.js';\nimport { create as createTransform } from '../transform.js';\nimport ImageSource from './Image.js';\nimport TileSource from './Tile.js';\nimport SourceState from './State.js';\nimport Source from './Source.js';\n/**\n * A function that takes an array of input data, performs some operation, and\n * returns an array of output data.\n * For `pixel` type operations, the function will be called with an array of\n * pixels, where each pixel is an array of four numbers (`[r, g, b, a]`) in the\n * range of 0 - 255. It should return a single pixel array.\n * For `'image'` type operations, functions will be called with an array of\n * {@link ImageData https://developer.mozilla.org/en-US/docs/Web/API/ImageData}\n * and should return a single {@link ImageData\n * https://developer.mozilla.org/en-US/docs/Web/API/ImageData}.  The operations\n * are called with a second \"data\" argument, which can be used for storage.  The\n * data object is accessible from raster events, where it can be initialized in\n * \"beforeoperations\" and accessed again in \"afteroperations\".\n *\n * @typedef {function((Array<Array<number>>|Array<ImageData>), Object):\n *     (Array<number>|ImageData)} Operation\n */\n/**\n * @enum {string}\n */\nvar RasterEventType = {\n    /**\n     * Triggered before operations are run.\n     * @event module:ol/source/Raster.RasterSourceEvent#beforeoperations\n     * @api\n     */\n    BEFOREOPERATIONS: 'beforeoperations',\n    /**\n     * Triggered after operations are run.\n     * @event module:ol/source/Raster.RasterSourceEvent#afteroperations\n     * @api\n     */\n    AFTEROPERATIONS: 'afteroperations'\n};\n/**\n * Raster operation type. Supported values are `'pixel'` and `'image'`.\n * @enum {string}\n */\nvar RasterOperationType = {\n    PIXEL: 'pixel',\n    IMAGE: 'image'\n};\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Raster} instances are instances of this\n * type.\n */\nvar RasterSourceEvent = /** @class */ (function (_super) {\n    __extends(RasterSourceEvent, _super);\n    /**\n     * @param {string} type Type.\n     * @param {import(\"../PluggableMap.js\").FrameState} frameState The frame state.\n     * @param {Object} data An object made available to operations.\n     */\n    function RasterSourceEvent(type, frameState, data) {\n        var _this = _super.call(this, type) || this;\n        /**\n         * The raster extent.\n         * @type {import(\"../extent.js\").Extent}\n         * @api\n         */\n        _this.extent = frameState.extent;\n        /**\n         * The pixel resolution (map units per pixel).\n         * @type {number}\n         * @api\n         */\n        _this.resolution = frameState.viewState.resolution / frameState.pixelRatio;\n        /**\n         * An object made available to all operations.  This can be used by operations\n         * as a storage object (e.g. for calculating statistics).\n         * @type {Object}\n         * @api\n         */\n        _this.data = data;\n        return _this;\n    }\n    return RasterSourceEvent;\n}(Event));\nexport { RasterSourceEvent };\n/**\n * @typedef {Object} Options\n * @property {Array<import(\"./Source.js\").default|import(\"../layer/Layer.js\").default>} sources Input\n * sources or layers.  For vector data, use an VectorImage layer.\n * @property {Operation} [operation] Raster operation.\n * The operation will be called with data from input sources\n * and the output will be assigned to the raster source.\n * @property {Object} [lib] Functions that will be made available to operations run in a worker.\n * @property {number} [threads] By default, operations will be run in a single worker thread.\n * To avoid using workers altogether, set `threads: 0`.  For pixel operations, operations can\n * be run in multiple worker threads.  Note that there is additional overhead in\n * transferring data to multiple workers, and that depending on the user's\n * system, it may not be possible to parallelize the work.\n * @property {RasterOperationType} [operationType='pixel'] Operation type.\n * Supported values are `'pixel'` and `'image'`.  By default,\n * `'pixel'` operations are assumed, and operations will be called with an\n * array of pixels from input sources.  If set to `'image'`, operations will\n * be called with an array of ImageData objects from input sources.\n */\n/**\n * @classdesc\n * A source that transforms data from any number of input sources using an\n * {@link module:ol/source/Raster~Operation} function to transform input pixel values into\n * output pixel values.\n *\n * @fires module:ol/source/Raster.RasterSourceEvent\n * @api\n */\nvar RasterSource = /** @class */ (function (_super) {\n    __extends(RasterSource, _super);\n    /**\n     * @param {Options} options Options.\n     */\n    function RasterSource(options) {\n        var _this = _super.call(this, {\n            projection: null\n        }) || this;\n        /**\n         * @private\n         * @type {*}\n         */\n        _this.worker_ = null;\n        /**\n         * @private\n         * @type {RasterOperationType}\n         */\n        _this.operationType_ = options.operationType !== undefined ?\n            options.operationType : RasterOperationType.PIXEL;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.threads_ = options.threads !== undefined ? options.threads : 1;\n        /**\n         * @private\n         * @type {Array<import(\"../layer/Layer.js\").default>}\n         */\n        _this.layers_ = createLayers(options.sources);\n        var changed = _this.changed.bind(_this);\n        for (var i = 0, ii = _this.layers_.length; i < ii; ++i) {\n            _this.layers_[i].addEventListener(EventType.CHANGE, changed);\n        }\n        /**\n         * @private\n         * @type {import(\"../TileQueue.js\").default}\n         */\n        _this.tileQueue_ = new TileQueue(function () {\n            return 1;\n        }, _this.changed.bind(_this));\n        /**\n         * The most recently requested frame state.\n         * @type {import(\"../PluggableMap.js\").FrameState}\n         * @private\n         */\n        _this.requestedFrameState_;\n        /**\n         * The most recently rendered image canvas.\n         * @type {import(\"../ImageCanvas.js\").default}\n         * @private\n         */\n        _this.renderedImageCanvas_ = null;\n        /**\n         * The most recently rendered revision.\n         * @type {number}\n         */\n        _this.renderedRevision_;\n        /**\n         * @private\n         * @type {import(\"../PluggableMap.js\").FrameState}\n         */\n        _this.frameState_ = {\n            animate: false,\n            coordinateToPixelTransform: createTransform(),\n            extent: null,\n            index: 0,\n            layerIndex: 0,\n            layerStatesArray: getLayerStatesArray(_this.layers_),\n            pixelRatio: 1,\n            pixelToCoordinateTransform: createTransform(),\n            postRenderFunctions: [],\n            size: [0, 0],\n            tileQueue: _this.tileQueue_,\n            time: Date.now(),\n            usedTiles: {},\n            viewState: /** @type {import(\"../View.js\").State} */ ({\n                rotation: 0\n            }),\n            viewHints: [],\n            wantedTiles: {},\n            declutterItems: []\n        };\n        _this.setAttributions(function (frameState) {\n            var attributions = [];\n            for (var index = 0, iMax = options.sources.length; index < iMax; ++index) {\n                var sourceOrLayer = options.sources[index];\n                var source = sourceOrLayer instanceof Source ? sourceOrLayer : sourceOrLayer.getSource();\n                var attributionGetter = source.getAttributions();\n                if (typeof attributionGetter === 'function') {\n                    var sourceAttribution = attributionGetter(frameState);\n                    attributions.push.apply(attributions, sourceAttribution);\n                }\n            }\n            return attributions.length !== 0 ? attributions : null;\n        });\n        if (options.operation !== undefined) {\n            _this.setOperation(options.operation, options.lib);\n        }\n        return _this;\n    }\n    /**\n     * Set the operation.\n     * @param {Operation} operation New operation.\n     * @param {Object=} opt_lib Functions that will be available to operations run\n     *     in a worker.\n     * @api\n     */\n    RasterSource.prototype.setOperation = function (operation, opt_lib) {\n        this.worker_ = new Processor({\n            operation: operation,\n            imageOps: this.operationType_ === RasterOperationType.IMAGE,\n            queue: 1,\n            lib: opt_lib,\n            threads: this.threads_\n        });\n        this.changed();\n    };\n    /**\n     * Update the stored frame state.\n     * @param {import(\"../extent.js\").Extent} extent The view extent (in map units).\n     * @param {number} resolution The view resolution.\n     * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n     * @return {import(\"../PluggableMap.js\").FrameState} The updated frame state.\n     * @private\n     */\n    RasterSource.prototype.updateFrameState_ = function (extent, resolution, projection) {\n        var frameState = /** @type {import(\"../PluggableMap.js\").FrameState} */ (assign({}, this.frameState_));\n        frameState.viewState = /** @type {import(\"../View.js\").State} */ (assign({}, frameState.viewState));\n        var center = getCenter(extent);\n        frameState.extent = extent.slice();\n        frameState.size[0] = Math.round(getWidth(extent) / resolution);\n        frameState.size[1] = Math.round(getHeight(extent) / resolution);\n        frameState.time = Infinity;\n        var viewState = frameState.viewState;\n        viewState.center = center;\n        viewState.projection = projection;\n        viewState.resolution = resolution;\n        return frameState;\n    };\n    /**\n     * Determine if all sources are ready.\n     * @return {boolean} All sources are ready.\n     * @private\n     */\n    RasterSource.prototype.allSourcesReady_ = function () {\n        var ready = true;\n        var source;\n        for (var i = 0, ii = this.layers_.length; i < ii; ++i) {\n            source = this.layers_[i].getSource();\n            if (source.getState() !== SourceState.READY) {\n                ready = false;\n                break;\n            }\n        }\n        return ready;\n    };\n    /**\n     * @inheritDoc\n     */\n    RasterSource.prototype.getImage = function (extent, resolution, pixelRatio, projection) {\n        if (!this.allSourcesReady_()) {\n            return null;\n        }\n        var frameState = this.updateFrameState_(extent, resolution, projection);\n        this.requestedFrameState_ = frameState;\n        // check if we can't reuse the existing ol/ImageCanvas\n        if (this.renderedImageCanvas_) {\n            var renderedResolution = this.renderedImageCanvas_.getResolution();\n            var renderedExtent = this.renderedImageCanvas_.getExtent();\n            if (resolution !== renderedResolution || !equals(extent, renderedExtent)) {\n                this.renderedImageCanvas_ = null;\n            }\n        }\n        if (!this.renderedImageCanvas_ || this.getRevision() !== this.renderedRevision_) {\n            this.processSources_();\n        }\n        frameState.tileQueue.loadMoreTiles(16, 16);\n        if (frameState.animate) {\n            requestAnimationFrame(this.changed.bind(this));\n        }\n        return this.renderedImageCanvas_;\n    };\n    /**\n     * Start processing source data.\n     * @private\n     */\n    RasterSource.prototype.processSources_ = function () {\n        var frameState = this.requestedFrameState_;\n        var len = this.layers_.length;\n        var imageDatas = new Array(len);\n        for (var i = 0; i < len; ++i) {\n            frameState.layerIndex = i;\n            var imageData = getImageData(this.layers_[i], frameState);\n            if (imageData) {\n                imageDatas[i] = imageData;\n            }\n            else {\n                return;\n            }\n        }\n        var data = {};\n        this.dispatchEvent(new RasterSourceEvent(RasterEventType.BEFOREOPERATIONS, frameState, data));\n        this.worker_.process(imageDatas, data, this.onWorkerComplete_.bind(this, frameState));\n    };\n    /**\n     * Called when pixel processing is complete.\n     * @param {import(\"../PluggableMap.js\").FrameState} frameState The frame state.\n     * @param {Error} err Any error during processing.\n     * @param {ImageData} output The output image data.\n     * @param {Object} data The user data.\n     * @private\n     */\n    RasterSource.prototype.onWorkerComplete_ = function (frameState, err, output, data) {\n        if (err || !output) {\n            return;\n        }\n        // do nothing if extent or resolution changed\n        var extent = frameState.extent;\n        var resolution = frameState.viewState.resolution;\n        if (resolution !== this.requestedFrameState_.viewState.resolution ||\n            !equals(extent, this.requestedFrameState_.extent)) {\n            return;\n        }\n        var context;\n        if (this.renderedImageCanvas_) {\n            context = this.renderedImageCanvas_.getImage().getContext('2d');\n        }\n        else {\n            var width = Math.round(getWidth(extent) / resolution);\n            var height = Math.round(getHeight(extent) / resolution);\n            context = createCanvasContext2D(width, height);\n            this.renderedImageCanvas_ = new ImageCanvas(extent, resolution, 1, context.canvas);\n        }\n        context.putImageData(output, 0, 0);\n        this.changed();\n        this.renderedRevision_ = this.getRevision();\n        this.dispatchEvent(new RasterSourceEvent(RasterEventType.AFTEROPERATIONS, frameState, data));\n    };\n    /**\n     * @override\n     */\n    RasterSource.prototype.getImageInternal = function () {\n        return null; // not implemented\n    };\n    return RasterSource;\n}(ImageSource));\n/**\n * A reusable canvas context.\n * @type {CanvasRenderingContext2D}\n * @private\n */\nvar sharedContext = null;\n/**\n * Get image data from a layer.\n * @param {import(\"../layer/Layer.js\").default} layer Layer to render.\n * @param {import(\"../PluggableMap.js\").FrameState} frameState The frame state.\n * @return {ImageData} The image data.\n */\nfunction getImageData(layer, frameState) {\n    var renderer = layer.getRenderer();\n    if (!renderer) {\n        throw new Error('Unsupported layer type: ' + layer);\n    }\n    if (!renderer.prepareFrame(frameState)) {\n        return null;\n    }\n    var width = frameState.size[0];\n    var height = frameState.size[1];\n    var container = renderer.renderFrame(frameState, null);\n    var element;\n    if (container) {\n        element = container.firstElementChild;\n    }\n    if (!(element instanceof HTMLCanvasElement)) {\n        throw new Error('Unsupported rendered element: ' + element);\n    }\n    if (element.width === width && element.height === height) {\n        var context = element.getContext('2d');\n        return context.getImageData(0, 0, width, height);\n    }\n    if (!sharedContext) {\n        sharedContext = createCanvasContext2D(width, height);\n    }\n    else {\n        var canvas = sharedContext.canvas;\n        if (canvas.width !== width || canvas.height !== height) {\n            sharedContext = createCanvasContext2D(width, height);\n        }\n        else {\n            sharedContext.clearRect(0, 0, width, height);\n        }\n    }\n    sharedContext.drawImage(element, 0, 0, width, height);\n    return sharedContext.getImageData(0, 0, width, height);\n}\n/**\n * Get a list of layer states from a list of layers.\n * @param {Array<import(\"../layer/Layer.js\").default>} layers Layers.\n * @return {Array<import(\"../layer/Layer.js\").State>} The layer states.\n */\nfunction getLayerStatesArray(layers) {\n    return layers.map(function (layer) {\n        return layer.getLayerState();\n    });\n}\n/**\n * Create layers for all sources.\n * @param {Array<import(\"./Source.js\").default|import(\"../layer/Layer.js\").default>} sources The sources.\n * @return {Array<import(\"../layer/Layer.js\").default>} Array of layers.\n */\nfunction createLayers(sources) {\n    var len = sources.length;\n    var layers = new Array(len);\n    for (var i = 0; i < len; ++i) {\n        layers[i] = createLayer(sources[i]);\n    }\n    return layers;\n}\n/**\n * Create a layer for the provided source.\n * @param {import(\"./Source.js\").default|import(\"../layer/Layer.js\").default} layerOrSource The layer or source.\n * @return {import(\"../layer/Layer.js\").default} The layer.\n */\nfunction createLayer(layerOrSource) {\n    // @type {import(\"../layer/Layer.js\").default}\n    var layer;\n    if (layerOrSource instanceof Source) {\n        if (layerOrSource instanceof TileSource) {\n            layer = new TileLayer({ source: layerOrSource });\n        }\n        else if (layerOrSource instanceof ImageSource) {\n            layer = new ImageLayer({ source: layerOrSource });\n        }\n    }\n    else {\n        layer = layerOrSource;\n    }\n    return layer;\n}\nexport default RasterSource;\n//# sourceMappingURL=Raster.js.map"]},"metadata":{},"sourceType":"module"}