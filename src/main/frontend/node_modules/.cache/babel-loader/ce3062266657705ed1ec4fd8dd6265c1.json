{"ast":null,"code":"/**\n * @module ol/control/MousePosition\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport 'elm-pep';\nimport { listen } from '../events.js';\nimport EventType from '../pointer/EventType.js';\nimport { getChangeEventType } from '../Object.js';\nimport Control from './Control.js';\nimport { getTransformFromProjections, identityTransform, get as getProjection, getUserProjection } from '../proj.js';\n/**\n * @type {string}\n */\n\nvar PROJECTION = 'projection';\n/**\n * @type {string}\n */\n\nvar COORDINATE_FORMAT = 'coordinateFormat';\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-mouse-position'] CSS class name.\n * @property {import(\"../coordinate.js\").CoordinateFormat} [coordinateFormat] Coordinate format.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {function(import(\"../MapEvent.js\").default)} [render] Function called when the\n * control should be re-rendered. This is called in a `requestAnimationFrame`\n * callback.\n * @property {HTMLElement|string} [target] Specify a target if you want the\n * control to be rendered outside of the map's viewport.\n * @property {string} [undefinedHTML='&#160;'] Markup to show when coordinates are not\n * available (e.g. when the pointer leaves the map viewport).  By default, the last position\n * will be replaced with `'&#160;'` (`&nbsp;`) when the pointer leaves the viewport.  To\n * retain the last rendered position, set this option to something falsey (like an empty\n * string `''`).\n */\n\n/**\n * @classdesc\n * A control to show the 2D coordinates of the mouse cursor. By default, these\n * are in the view projection, but can be in any supported projection.\n * By default the control is shown in the top right corner of the map, but this\n * can be changed by using the css selector `.ol-mouse-position`.\n *\n * On touch devices, which usually do not have a mouse cursor, the coordinates\n * of the currently touched position are shown.\n *\n * @api\n */\n\nvar MousePosition =\n/** @class */\nfunction (_super) {\n  __extends(MousePosition, _super);\n  /**\n   * @param {Options=} opt_options Mouse position options.\n   */\n\n\n  function MousePosition(opt_options) {\n    var _this = this;\n\n    var options = opt_options ? opt_options : {};\n    var element = document.createElement('div');\n    element.className = options.className !== undefined ? options.className : 'ol-mouse-position';\n    _this = _super.call(this, {\n      element: element,\n      render: options.render || render,\n      target: options.target\n    }) || this;\n\n    _this.addEventListener(getChangeEventType(PROJECTION), _this.handleProjectionChanged_);\n\n    if (options.coordinateFormat) {\n      _this.setCoordinateFormat(options.coordinateFormat);\n    }\n\n    if (options.projection) {\n      _this.setProjection(options.projection);\n    }\n    /**\n     * @private\n     * @type {string}\n     */\n\n\n    _this.undefinedHTML_ = options.undefinedHTML !== undefined ? options.undefinedHTML : '&#160;';\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    _this.renderOnMouseOut_ = !!_this.undefinedHTML_;\n    /**\n     * @private\n     * @type {string}\n     */\n\n    _this.renderedHTML_ = element.innerHTML;\n    /**\n     * @private\n     * @type {?import(\"../proj/Projection.js\").default}\n     */\n\n    _this.mapProjection_ = null;\n    /**\n     * @private\n     * @type {?import(\"../proj.js\").TransformFunction}\n     */\n\n    _this.transform_ = null;\n    return _this;\n  }\n  /**\n   * @private\n   */\n\n\n  MousePosition.prototype.handleProjectionChanged_ = function () {\n    this.transform_ = null;\n  };\n  /**\n   * Return the coordinate format type used to render the current position or\n   * undefined.\n   * @return {import(\"../coordinate.js\").CoordinateFormat|undefined} The format to render the current\n   *     position in.\n   * @observable\n   * @api\n   */\n\n\n  MousePosition.prototype.getCoordinateFormat = function () {\n    return (\n      /** @type {import(\"../coordinate.js\").CoordinateFormat|undefined} */\n      this.get(COORDINATE_FORMAT)\n    );\n  };\n  /**\n   * Return the projection that is used to report the mouse position.\n   * @return {import(\"../proj/Projection.js\").default|undefined} The projection to report mouse\n   *     position in.\n   * @observable\n   * @api\n   */\n\n\n  MousePosition.prototype.getProjection = function () {\n    return (\n      /** @type {import(\"../proj/Projection.js\").default|undefined} */\n      this.get(PROJECTION)\n    );\n  };\n  /**\n   * @param {Event} event Browser event.\n   * @protected\n   */\n\n\n  MousePosition.prototype.handleMouseMove = function (event) {\n    var map = this.getMap();\n    this.updateHTML_(map.getEventPixel(event));\n  };\n  /**\n   * @param {Event} event Browser event.\n   * @protected\n   */\n\n\n  MousePosition.prototype.handleMouseOut = function (event) {\n    this.updateHTML_(null);\n  };\n  /**\n   * @inheritDoc\n   * @api\n   */\n\n\n  MousePosition.prototype.setMap = function (map) {\n    _super.prototype.setMap.call(this, map);\n\n    if (map) {\n      var viewport = map.getViewport();\n      this.listenerKeys.push(listen(viewport, EventType.POINTERMOVE, this.handleMouseMove, this));\n\n      if (this.renderOnMouseOut_) {\n        this.listenerKeys.push(listen(viewport, EventType.POINTEROUT, this.handleMouseOut, this));\n      }\n    }\n  };\n  /**\n   * Set the coordinate format type used to render the current position.\n   * @param {import(\"../coordinate.js\").CoordinateFormat} format The format to render the current\n   *     position in.\n   * @observable\n   * @api\n   */\n\n\n  MousePosition.prototype.setCoordinateFormat = function (format) {\n    this.set(COORDINATE_FORMAT, format);\n  };\n  /**\n   * Set the projection that is used to report the mouse position.\n   * @param {import(\"../proj.js\").ProjectionLike} projection The projection to report mouse\n   *     position in.\n   * @observable\n   * @api\n   */\n\n\n  MousePosition.prototype.setProjection = function (projection) {\n    this.set(PROJECTION, getProjection(projection));\n  };\n  /**\n   * @param {?import(\"../pixel.js\").Pixel} pixel Pixel.\n   * @private\n   */\n\n\n  MousePosition.prototype.updateHTML_ = function (pixel) {\n    var html = this.undefinedHTML_;\n\n    if (pixel && this.mapProjection_) {\n      if (!this.transform_) {\n        var projection = this.getProjection();\n\n        if (projection) {\n          this.transform_ = getTransformFromProjections(this.mapProjection_, projection);\n        } else {\n          this.transform_ = identityTransform;\n        }\n      }\n\n      var map = this.getMap();\n      var coordinate = map.getCoordinateFromPixelInternal(pixel);\n\n      if (coordinate) {\n        var userProjection = getUserProjection();\n\n        if (userProjection) {\n          this.transform_ = getTransformFromProjections(this.mapProjection_, userProjection);\n        }\n\n        this.transform_(coordinate, coordinate);\n        var coordinateFormat = this.getCoordinateFormat();\n\n        if (coordinateFormat) {\n          html = coordinateFormat(coordinate);\n        } else {\n          html = coordinate.toString();\n        }\n      }\n    }\n\n    if (!this.renderedHTML_ || html !== this.renderedHTML_) {\n      this.element.innerHTML = html;\n      this.renderedHTML_ = html;\n    }\n  };\n\n  return MousePosition;\n}(Control);\n/**\n * Update the projection. Rendering of the coordinates is done in\n * `handleMouseMove` and `handleMouseUp`.\n * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n * @this {MousePosition}\n */\n\n\nexport function render(mapEvent) {\n  var frameState = mapEvent.frameState;\n\n  if (!frameState) {\n    this.mapProjection_ = null;\n  } else {\n    if (this.mapProjection_ != frameState.viewState.projection) {\n      this.mapProjection_ = frameState.viewState.projection;\n      this.transform_ = null;\n    }\n  }\n}\nexport default MousePosition;","map":{"version":3,"sources":["../src/control/MousePosition.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @module ol/control/MousePosition\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport 'elm-pep';\nimport { listen } from '../events.js';\nimport EventType from '../pointer/EventType.js';\nimport { getChangeEventType } from '../Object.js';\nimport Control from './Control.js';\nimport { getTransformFromProjections, identityTransform, get as getProjection, getUserProjection } from '../proj.js';\n/**\n * @type {string}\n */\nvar PROJECTION = 'projection';\n/**\n * @type {string}\n */\nvar COORDINATE_FORMAT = 'coordinateFormat';\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-mouse-position'] CSS class name.\n * @property {import(\"../coordinate.js\").CoordinateFormat} [coordinateFormat] Coordinate format.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {function(import(\"../MapEvent.js\").default)} [render] Function called when the\n * control should be re-rendered. This is called in a `requestAnimationFrame`\n * callback.\n * @property {HTMLElement|string} [target] Specify a target if you want the\n * control to be rendered outside of the map's viewport.\n * @property {string} [undefinedHTML='&#160;'] Markup to show when coordinates are not\n * available (e.g. when the pointer leaves the map viewport).  By default, the last position\n * will be replaced with `'&#160;'` (`&nbsp;`) when the pointer leaves the viewport.  To\n * retain the last rendered position, set this option to something falsey (like an empty\n * string `''`).\n */\n/**\n * @classdesc\n * A control to show the 2D coordinates of the mouse cursor. By default, these\n * are in the view projection, but can be in any supported projection.\n * By default the control is shown in the top right corner of the map, but this\n * can be changed by using the css selector `.ol-mouse-position`.\n *\n * On touch devices, which usually do not have a mouse cursor, the coordinates\n * of the currently touched position are shown.\n *\n * @api\n */\nvar MousePosition = /** @class */ (function (_super) {\n    __extends(MousePosition, _super);\n    /**\n     * @param {Options=} opt_options Mouse position options.\n     */\n    function MousePosition(opt_options) {\n        var _this = this;\n        var options = opt_options ? opt_options : {};\n        var element = document.createElement('div');\n        element.className = options.className !== undefined ? options.className : 'ol-mouse-position';\n        _this = _super.call(this, {\n            element: element,\n            render: options.render || render,\n            target: options.target\n        }) || this;\n        _this.addEventListener(getChangeEventType(PROJECTION), _this.handleProjectionChanged_);\n        if (options.coordinateFormat) {\n            _this.setCoordinateFormat(options.coordinateFormat);\n        }\n        if (options.projection) {\n            _this.setProjection(options.projection);\n        }\n        /**\n         * @private\n         * @type {string}\n         */\n        _this.undefinedHTML_ = options.undefinedHTML !== undefined ? options.undefinedHTML : '&#160;';\n        /**\n         * @private\n         * @type {boolean}\n         */\n        _this.renderOnMouseOut_ = !!_this.undefinedHTML_;\n        /**\n         * @private\n         * @type {string}\n         */\n        _this.renderedHTML_ = element.innerHTML;\n        /**\n         * @private\n         * @type {?import(\"../proj/Projection.js\").default}\n         */\n        _this.mapProjection_ = null;\n        /**\n         * @private\n         * @type {?import(\"../proj.js\").TransformFunction}\n         */\n        _this.transform_ = null;\n        return _this;\n    }\n    /**\n     * @private\n     */\n    MousePosition.prototype.handleProjectionChanged_ = function () {\n        this.transform_ = null;\n    };\n    /**\n     * Return the coordinate format type used to render the current position or\n     * undefined.\n     * @return {import(\"../coordinate.js\").CoordinateFormat|undefined} The format to render the current\n     *     position in.\n     * @observable\n     * @api\n     */\n    MousePosition.prototype.getCoordinateFormat = function () {\n        return (\n        /** @type {import(\"../coordinate.js\").CoordinateFormat|undefined} */ (this.get(COORDINATE_FORMAT)));\n    };\n    /**\n     * Return the projection that is used to report the mouse position.\n     * @return {import(\"../proj/Projection.js\").default|undefined} The projection to report mouse\n     *     position in.\n     * @observable\n     * @api\n     */\n    MousePosition.prototype.getProjection = function () {\n        return (\n        /** @type {import(\"../proj/Projection.js\").default|undefined} */ (this.get(PROJECTION)));\n    };\n    /**\n     * @param {Event} event Browser event.\n     * @protected\n     */\n    MousePosition.prototype.handleMouseMove = function (event) {\n        var map = this.getMap();\n        this.updateHTML_(map.getEventPixel(event));\n    };\n    /**\n     * @param {Event} event Browser event.\n     * @protected\n     */\n    MousePosition.prototype.handleMouseOut = function (event) {\n        this.updateHTML_(null);\n    };\n    /**\n     * @inheritDoc\n     * @api\n     */\n    MousePosition.prototype.setMap = function (map) {\n        _super.prototype.setMap.call(this, map);\n        if (map) {\n            var viewport = map.getViewport();\n            this.listenerKeys.push(listen(viewport, EventType.POINTERMOVE, this.handleMouseMove, this));\n            if (this.renderOnMouseOut_) {\n                this.listenerKeys.push(listen(viewport, EventType.POINTEROUT, this.handleMouseOut, this));\n            }\n        }\n    };\n    /**\n     * Set the coordinate format type used to render the current position.\n     * @param {import(\"../coordinate.js\").CoordinateFormat} format The format to render the current\n     *     position in.\n     * @observable\n     * @api\n     */\n    MousePosition.prototype.setCoordinateFormat = function (format) {\n        this.set(COORDINATE_FORMAT, format);\n    };\n    /**\n     * Set the projection that is used to report the mouse position.\n     * @param {import(\"../proj.js\").ProjectionLike} projection The projection to report mouse\n     *     position in.\n     * @observable\n     * @api\n     */\n    MousePosition.prototype.setProjection = function (projection) {\n        this.set(PROJECTION, getProjection(projection));\n    };\n    /**\n     * @param {?import(\"../pixel.js\").Pixel} pixel Pixel.\n     * @private\n     */\n    MousePosition.prototype.updateHTML_ = function (pixel) {\n        var html = this.undefinedHTML_;\n        if (pixel && this.mapProjection_) {\n            if (!this.transform_) {\n                var projection = this.getProjection();\n                if (projection) {\n                    this.transform_ = getTransformFromProjections(this.mapProjection_, projection);\n                }\n                else {\n                    this.transform_ = identityTransform;\n                }\n            }\n            var map = this.getMap();\n            var coordinate = map.getCoordinateFromPixelInternal(pixel);\n            if (coordinate) {\n                var userProjection = getUserProjection();\n                if (userProjection) {\n                    this.transform_ = getTransformFromProjections(this.mapProjection_, userProjection);\n                }\n                this.transform_(coordinate, coordinate);\n                var coordinateFormat = this.getCoordinateFormat();\n                if (coordinateFormat) {\n                    html = coordinateFormat(coordinate);\n                }\n                else {\n                    html = coordinate.toString();\n                }\n            }\n        }\n        if (!this.renderedHTML_ || html !== this.renderedHTML_) {\n            this.element.innerHTML = html;\n            this.renderedHTML_ = html;\n        }\n    };\n    return MousePosition;\n}(Control));\n/**\n * Update the projection. Rendering of the coordinates is done in\n * `handleMouseMove` and `handleMouseUp`.\n * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n * @this {MousePosition}\n */\nexport function render(mapEvent) {\n    var frameState = mapEvent.frameState;\n    if (!frameState) {\n        this.mapProjection_ = null;\n    }\n    else {\n        if (this.mapProjection_ != frameState.viewState.projection) {\n            this.mapProjection_ = frameState.viewState.projection;\n            this.transform_ = null;\n        }\n    }\n}\nexport default MousePosition;\n//# sourceMappingURL=MousePosition.js.map"]},"metadata":{},"sourceType":"module"}