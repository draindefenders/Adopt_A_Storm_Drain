{"ast":null,"code":"/**\n * @module ol/xml\n */\nimport { extend } from './array.js';\n/**\n * When using {@link module:ol/xml~makeChildAppender} or\n * {@link module:ol/xml~makeSimpleNodeFactory}, the top `objectStack` item needs\n * to have this structure.\n * @typedef {Object} NodeStackItem\n * @property {Node} node\n */\n\n/**\n * @typedef {function(Element, Array<*>): void} Parser\n */\n\n/**\n * @typedef {function(Element, *, Array<*>): void} Serializer\n */\n\n/**\n * @type {string}\n */\n\nexport var XML_SCHEMA_INSTANCE_URI = 'http://www.w3.org/2001/XMLSchema-instance';\n/**\n * @param {string} namespaceURI Namespace URI.\n * @param {string} qualifiedName Qualified name.\n * @return {Element} Node.\n */\n\nexport function createElementNS(namespaceURI, qualifiedName) {\n  return getDocument().createElementNS(namespaceURI, qualifiedName);\n}\n/**\n * Recursively grab all text content of child nodes into a single string.\n * @param {Node} node Node.\n * @param {boolean} normalizeWhitespace Normalize whitespace: remove all line\n * breaks.\n * @return {string} All text content.\n * @api\n */\n\nexport function getAllTextContent(node, normalizeWhitespace) {\n  return getAllTextContent_(node, normalizeWhitespace, []).join('');\n}\n/**\n * Recursively grab all text content of child nodes into a single string.\n * @param {Node} node Node.\n * @param {boolean} normalizeWhitespace Normalize whitespace: remove all line\n * breaks.\n * @param {Array<string>} accumulator Accumulator.\n * @private\n * @return {Array<string>} Accumulator.\n */\n\nexport function getAllTextContent_(node, normalizeWhitespace, accumulator) {\n  if (node.nodeType == Node.CDATA_SECTION_NODE || node.nodeType == Node.TEXT_NODE) {\n    if (normalizeWhitespace) {\n      accumulator.push(String(node.nodeValue).replace(/(\\r\\n|\\r|\\n)/g, ''));\n    } else {\n      accumulator.push(node.nodeValue);\n    }\n  } else {\n    var n = void 0;\n\n    for (n = node.firstChild; n; n = n.nextSibling) {\n      getAllTextContent_(n, normalizeWhitespace, accumulator);\n    }\n  }\n\n  return accumulator;\n}\n/**\n * @param {Object} object Object.\n * @return {boolean} Is a document.\n */\n\nexport function isDocument(object) {\n  return 'documentElement' in object;\n}\n/**\n * @param {Element} node Node.\n * @param {?string} namespaceURI Namespace URI.\n * @param {string} name Attribute name.\n * @return {string} Value\n */\n\nexport function getAttributeNS(node, namespaceURI, name) {\n  return node.getAttributeNS(namespaceURI, name) || '';\n}\n/**\n * Parse an XML string to an XML Document.\n * @param {string} xml XML.\n * @return {Document} Document.\n * @api\n */\n\nexport function parse(xml) {\n  return new DOMParser().parseFromString(xml, 'application/xml');\n}\n/**\n * Make an array extender function for extending the array at the top of the\n * object stack.\n * @param {function(this: T, Node, Array<*>): (Array<*>|undefined)} valueReader Value reader.\n * @param {T=} opt_this The object to use as `this` in `valueReader`.\n * @return {Parser} Parser.\n * @template T\n */\n\nexport function makeArrayExtender(valueReader, opt_this) {\n  return (\n    /**\n     * @param {Node} node Node.\n     * @param {Array<*>} objectStack Object stack.\n     */\n    function (node, objectStack) {\n      var value = valueReader.call(opt_this !== undefined ? opt_this : this, node, objectStack);\n\n      if (value !== undefined) {\n        var array =\n        /** @type {Array<*>} */\n        objectStack[objectStack.length - 1];\n        extend(array, value);\n      }\n    }\n  );\n}\n/**\n * Make an array pusher function for pushing to the array at the top of the\n * object stack.\n * @param {function(this: T, Element, Array<*>): *} valueReader Value reader.\n * @param {T=} opt_this The object to use as `this` in `valueReader`.\n * @return {Parser} Parser.\n * @template T\n */\n\nexport function makeArrayPusher(valueReader, opt_this) {\n  return (\n    /**\n     * @param {Element} node Node.\n     * @param {Array<*>} objectStack Object stack.\n     */\n    function (node, objectStack) {\n      var value = valueReader.call(opt_this !== undefined ? opt_this : this, node, objectStack);\n\n      if (value !== undefined) {\n        var array =\n        /** @type {Array<*>} */\n        objectStack[objectStack.length - 1];\n        array.push(value);\n      }\n    }\n  );\n}\n/**\n * Make an object stack replacer function for replacing the object at the\n * top of the stack.\n * @param {function(this: T, Node, Array<*>): *} valueReader Value reader.\n * @param {T=} opt_this The object to use as `this` in `valueReader`.\n * @return {Parser} Parser.\n * @template T\n */\n\nexport function makeReplacer(valueReader, opt_this) {\n  return (\n    /**\n     * @param {Node} node Node.\n     * @param {Array<*>} objectStack Object stack.\n     */\n    function (node, objectStack) {\n      var value = valueReader.call(opt_this !== undefined ? opt_this : this, node, objectStack);\n\n      if (value !== undefined) {\n        objectStack[objectStack.length - 1] = value;\n      }\n    }\n  );\n}\n/**\n * Make an object property pusher function for adding a property to the\n * object at the top of the stack.\n * @param {function(this: T, Element, Array<*>): *} valueReader Value reader.\n * @param {string=} opt_property Property.\n * @param {T=} opt_this The object to use as `this` in `valueReader`.\n * @return {Parser} Parser.\n * @template T\n */\n\nexport function makeObjectPropertyPusher(valueReader, opt_property, opt_this) {\n  return (\n    /**\n     * @param {Element} node Node.\n     * @param {Array<*>} objectStack Object stack.\n     */\n    function (node, objectStack) {\n      var value = valueReader.call(opt_this !== undefined ? opt_this : this, node, objectStack);\n\n      if (value !== undefined) {\n        var object =\n        /** @type {!Object} */\n        objectStack[objectStack.length - 1];\n        var property = opt_property !== undefined ? opt_property : node.localName;\n        var array = void 0;\n\n        if (property in object) {\n          array = object[property];\n        } else {\n          array = [];\n          object[property] = array;\n        }\n\n        array.push(value);\n      }\n    }\n  );\n}\n/**\n * Make an object property setter function.\n * @param {function(this: T, Element, Array<*>): *} valueReader Value reader.\n * @param {string=} opt_property Property.\n * @param {T=} opt_this The object to use as `this` in `valueReader`.\n * @return {Parser} Parser.\n * @template T\n */\n\nexport function makeObjectPropertySetter(valueReader, opt_property, opt_this) {\n  return (\n    /**\n     * @param {Element} node Node.\n     * @param {Array<*>} objectStack Object stack.\n     */\n    function (node, objectStack) {\n      var value = valueReader.call(opt_this !== undefined ? opt_this : this, node, objectStack);\n\n      if (value !== undefined) {\n        var object =\n        /** @type {!Object} */\n        objectStack[objectStack.length - 1];\n        var property = opt_property !== undefined ? opt_property : node.localName;\n        object[property] = value;\n      }\n    }\n  );\n}\n/**\n * Create a serializer that appends nodes written by its `nodeWriter` to its\n * designated parent. The parent is the `node` of the\n * {@link module:ol/xml~NodeStackItem} at the top of the `objectStack`.\n * @param {function(this: T, Node, V, Array<*>): void} nodeWriter Node writer.\n * @param {T=} opt_this The object to use as `this` in `nodeWriter`.\n * @return {Serializer} Serializer.\n * @template T, V\n */\n\nexport function makeChildAppender(nodeWriter, opt_this) {\n  return function (node, value, objectStack) {\n    nodeWriter.call(opt_this !== undefined ? opt_this : this, node, value, objectStack);\n    var parent =\n    /** @type {NodeStackItem} */\n    objectStack[objectStack.length - 1];\n    var parentNode = parent.node;\n    parentNode.appendChild(node);\n  };\n}\n/**\n * Create a serializer that calls the provided `nodeWriter` from\n * {@link module:ol/xml~serialize}. This can be used by the parent writer to have the\n * 'nodeWriter' called with an array of values when the `nodeWriter` was\n * designed to serialize a single item. An example would be a LineString\n * geometry writer, which could be reused for writing MultiLineString\n * geometries.\n * @param {function(this: T, Element, V, Array<*>): void} nodeWriter Node writer.\n * @param {T=} opt_this The object to use as `this` in `nodeWriter`.\n * @return {Serializer} Serializer.\n * @template T, V\n */\n\nexport function makeArraySerializer(nodeWriter, opt_this) {\n  var serializersNS, nodeFactory;\n  return function (node, value, objectStack) {\n    if (serializersNS === undefined) {\n      serializersNS = {};\n      var serializers = {};\n      serializers[node.localName] = nodeWriter;\n      serializersNS[node.namespaceURI] = serializers;\n      nodeFactory = makeSimpleNodeFactory(node.localName);\n    }\n\n    serialize(serializersNS, nodeFactory, value, objectStack);\n  };\n}\n/**\n * Create a node factory which can use the `opt_keys` passed to\n * {@link module:ol/xml~serialize} or {@link module:ol/xml~pushSerializeAndPop} as node names,\n * or a fixed node name. The namespace of the created nodes can either be fixed,\n * or the parent namespace will be used.\n * @param {string=} opt_nodeName Fixed node name which will be used for all\n *     created nodes. If not provided, the 3rd argument to the resulting node\n *     factory needs to be provided and will be the nodeName.\n * @param {string=} opt_namespaceURI Fixed namespace URI which will be used for\n *     all created nodes. If not provided, the namespace of the parent node will\n *     be used.\n * @return {function(*, Array<*>, string=): (Node|undefined)} Node factory.\n */\n\nexport function makeSimpleNodeFactory(opt_nodeName, opt_namespaceURI) {\n  var fixedNodeName = opt_nodeName;\n  return (\n    /**\n     * @param {*} value Value.\n     * @param {Array<*>} objectStack Object stack.\n     * @param {string=} opt_nodeName Node name.\n     * @return {Node} Node.\n     */\n    function (value, objectStack, opt_nodeName) {\n      var context =\n      /** @type {NodeStackItem} */\n      objectStack[objectStack.length - 1];\n      var node = context.node;\n      var nodeName = fixedNodeName;\n\n      if (nodeName === undefined) {\n        nodeName = opt_nodeName;\n      }\n\n      var namespaceURI = opt_namespaceURI !== undefined ? opt_namespaceURI : node.namespaceURI;\n      return createElementNS(namespaceURI,\n      /** @type {string} */\n      nodeName);\n    }\n  );\n}\n/**\n * A node factory that creates a node using the parent's `namespaceURI` and the\n * `nodeName` passed by {@link module:ol/xml~serialize} or\n * {@link module:ol/xml~pushSerializeAndPop} to the node factory.\n * @const\n * @type {function(*, Array<*>, string=): (Node|undefined)}\n */\n\nexport var OBJECT_PROPERTY_NODE_FACTORY = makeSimpleNodeFactory();\n/**\n * Create an array of `values` to be used with {@link module:ol/xml~serialize} or\n * {@link module:ol/xml~pushSerializeAndPop}, where `orderedKeys` has to be provided as\n * `opt_key` argument.\n * @param {Object<string, *>} object Key-value pairs for the sequence. Keys can\n *     be a subset of the `orderedKeys`.\n * @param {Array<string>} orderedKeys Keys in the order of the sequence.\n * @return {Array<*>} Values in the order of the sequence. The resulting array\n *     has the same length as the `orderedKeys` array. Values that are not\n *     present in `object` will be `undefined` in the resulting array.\n */\n\nexport function makeSequence(object, orderedKeys) {\n  var length = orderedKeys.length;\n  var sequence = new Array(length);\n\n  for (var i = 0; i < length; ++i) {\n    sequence[i] = object[orderedKeys[i]];\n  }\n\n  return sequence;\n}\n/**\n * Create a namespaced structure, using the same values for each namespace.\n * This can be used as a starting point for versioned parsers, when only a few\n * values are version specific.\n * @param {Array<string>} namespaceURIs Namespace URIs.\n * @param {T} structure Structure.\n * @param {Object<string, T>=} opt_structureNS Namespaced structure to add to.\n * @return {Object<string, T>} Namespaced structure.\n * @template T\n */\n\nexport function makeStructureNS(namespaceURIs, structure, opt_structureNS) {\n  /**\n   * @type {Object<string, T>}\n   */\n  var structureNS = opt_structureNS !== undefined ? opt_structureNS : {};\n  var i, ii;\n\n  for (i = 0, ii = namespaceURIs.length; i < ii; ++i) {\n    structureNS[namespaceURIs[i]] = structure;\n  }\n\n  return structureNS;\n}\n/**\n * Parse a node using the parsers and object stack.\n * @param {Object<string, Object<string, Parser>>} parsersNS\n *     Parsers by namespace.\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @param {*=} opt_this The object to use as `this`.\n */\n\nexport function parseNode(parsersNS, node, objectStack, opt_this) {\n  var n;\n\n  for (n = node.firstElementChild; n; n = n.nextElementSibling) {\n    var parsers = parsersNS[n.namespaceURI];\n\n    if (parsers !== undefined) {\n      var parser = parsers[n.localName];\n\n      if (parser !== undefined) {\n        parser.call(opt_this, n, objectStack);\n      }\n    }\n  }\n}\n/**\n * Push an object on top of the stack, parse and return the popped object.\n * @param {T} object Object.\n * @param {Object<string, Object<string, Parser>>} parsersNS\n *     Parsers by namespace.\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @param {*=} opt_this The object to use as `this`.\n * @return {T} Object.\n * @template T\n */\n\nexport function pushParseAndPop(object, parsersNS, node, objectStack, opt_this) {\n  objectStack.push(object);\n  parseNode(parsersNS, node, objectStack, opt_this);\n  return (\n    /** @type {T} */\n    objectStack.pop()\n  );\n}\n/**\n * Walk through an array of `values` and call a serializer for each value.\n * @param {Object<string, Object<string, Serializer>>} serializersNS\n *     Namespaced serializers.\n * @param {function(this: T, *, Array<*>, (string|undefined)): (Node|undefined)} nodeFactory\n *     Node factory. The `nodeFactory` creates the node whose namespace and name\n *     will be used to choose a node writer from `serializersNS`. This\n *     separation allows us to decide what kind of node to create, depending on\n *     the value we want to serialize. An example for this would be different\n *     geometry writers based on the geometry type.\n * @param {Array<*>} values Values to serialize. An example would be an array\n *     of {@link module:ol/Feature~Feature} instances.\n * @param {Array<*>} objectStack Node stack.\n * @param {Array<string>=} opt_keys Keys of the `values`. Will be passed to the\n *     `nodeFactory`. This is used for serializing object literals where the\n *     node name relates to the property key. The array length of `opt_keys` has\n *     to match the length of `values`. For serializing a sequence, `opt_keys`\n *     determines the order of the sequence.\n * @param {T=} opt_this The object to use as `this` for the node factory and\n *     serializers.\n * @template T\n */\n\nexport function serialize(serializersNS, nodeFactory, values, objectStack, opt_keys, opt_this) {\n  var length = (opt_keys !== undefined ? opt_keys : values).length;\n  var value, node;\n\n  for (var i = 0; i < length; ++i) {\n    value = values[i];\n\n    if (value !== undefined) {\n      node = nodeFactory.call(opt_this !== undefined ? opt_this : this, value, objectStack, opt_keys !== undefined ? opt_keys[i] : undefined);\n\n      if (node !== undefined) {\n        serializersNS[node.namespaceURI][node.localName].call(opt_this, node, value, objectStack);\n      }\n    }\n  }\n}\n/**\n * @param {O} object Object.\n * @param {Object<string, Object<string, Serializer>>} serializersNS\n *     Namespaced serializers.\n * @param {function(this: T, *, Array<*>, (string|undefined)): (Node|undefined)} nodeFactory\n *     Node factory. The `nodeFactory` creates the node whose namespace and name\n *     will be used to choose a node writer from `serializersNS`. This\n *     separation allows us to decide what kind of node to create, depending on\n *     the value we want to serialize. An example for this would be different\n *     geometry writers based on the geometry type.\n * @param {Array<*>} values Values to serialize. An example would be an array\n *     of {@link module:ol/Feature~Feature} instances.\n * @param {Array<*>} objectStack Node stack.\n * @param {Array<string>=} opt_keys Keys of the `values`. Will be passed to the\n *     `nodeFactory`. This is used for serializing object literals where the\n *     node name relates to the property key. The array length of `opt_keys` has\n *     to match the length of `values`. For serializing a sequence, `opt_keys`\n *     determines the order of the sequence.\n * @param {T=} opt_this The object to use as `this` for the node factory and\n *     serializers.\n * @return {O|undefined} Object.\n * @template O, T\n */\n\nexport function pushSerializeAndPop(object, serializersNS, nodeFactory, values, objectStack, opt_keys, opt_this) {\n  objectStack.push(object);\n  serialize(serializersNS, nodeFactory, values, objectStack, opt_keys, opt_this);\n  return (\n    /** @type {O|undefined} */\n    objectStack.pop()\n  );\n}\nvar xmlSerializer_ = undefined;\n/**\n * Register a XMLSerializer. Can be used  to inject a XMLSerializer\n * where there is no globally available implementation.\n *\n * @param {XMLSerializer} xmlSerializer A XMLSerializer.\n * @api\n */\n\nexport function registerXMLSerializer(xmlSerializer) {\n  xmlSerializer_ = xmlSerializer;\n}\n/**\n * @return {XMLSerializer} The XMLSerializer.\n */\n\nexport function getXMLSerializer() {\n  if (xmlSerializer_ === undefined && typeof XMLSerializer !== 'undefined') {\n    xmlSerializer_ = new XMLSerializer();\n  }\n\n  return xmlSerializer_;\n}\nvar document_ = undefined;\n/**\n * Register a Document to use when creating nodes for XML serializations. Can be used\n * to inject a Document where there is no globally available implementation.\n *\n * @param {Document} document A Document.\n * @api\n */\n\nexport function registerDocument(document) {\n  document_ = document;\n}\n/**\n * Get a document that should be used when creating nodes for XML serializations.\n * @return {Document} The document.\n */\n\nexport function getDocument() {\n  if (document_ === undefined && typeof document !== 'undefined') {\n    document_ = document.implementation.createDocument('', '', null);\n  }\n\n  return document_;\n}","map":{"version":3,"sources":["src/xml.js"],"names":[],"mappings":"AAAA;;;AAGA,SAAQ,MAAR,QAAqB,YAArB;AAGA;;;;;;;;AASA;;;;AAKA;;;;AAKA;;;;AAGA,OAAO,IAAM,uBAAuB,GAAG,2CAAhC;AAGP;;;;;;AAKA,OAAM,SAAU,eAAV,CAA0B,YAA1B,EAAwC,aAAxC,EAAqD;AACzD,SAAO,WAAW,GAAG,eAAd,CAA8B,YAA9B,EAA4C,aAA5C,CAAP;AACD;AAGD;;;;;;;;;AAQA,OAAM,SAAU,iBAAV,CAA4B,IAA5B,EAAkC,mBAAlC,EAAqD;AACzD,SAAO,kBAAkB,CAAC,IAAD,EAAO,mBAAP,EAA4B,EAA5B,CAAlB,CAAkD,IAAlD,CAAuD,EAAvD,CAAP;AACD;AAGD;;;;;;;;;;AASA,OAAM,SAAU,kBAAV,CAA6B,IAA7B,EAAmC,mBAAnC,EAAwD,WAAxD,EAAmE;AACvE,MAAI,IAAI,CAAC,QAAL,IAAiB,IAAI,CAAC,kBAAtB,IACA,IAAI,CAAC,QAAL,IAAiB,IAAI,CAAC,SAD1B,EACqC;AACnC,QAAI,mBAAJ,EAAyB;AACvB,MAAA,WAAW,CAAC,IAAZ,CAAiB,MAAM,CAAC,IAAI,CAAC,SAAN,CAAN,CAAuB,OAAvB,CAA+B,eAA/B,EAAgD,EAAhD,CAAjB;AACD,KAFD,MAEO;AACL,MAAA,WAAW,CAAC,IAAZ,CAAiB,IAAI,CAAC,SAAtB;AACD;AACF,GAPD,MAOO;AACL,QAAI,CAAC,GAAA,KAAA,CAAL;;AACA,SAAK,CAAC,GAAG,IAAI,CAAC,UAAd,EAA0B,CAA1B,EAA6B,CAAC,GAAG,CAAC,CAAC,WAAnC,EAAgD;AAC9C,MAAA,kBAAkB,CAAC,CAAD,EAAI,mBAAJ,EAAyB,WAAzB,CAAlB;AACD;AACF;;AACD,SAAO,WAAP;AACD;AAGD;;;;;AAIA,OAAM,SAAU,UAAV,CAAqB,MAArB,EAA2B;AAC/B,SAAO,qBAAqB,MAA5B;AACD;AAGD;;;;;;;AAMA,OAAM,SAAU,cAAV,CAAyB,IAAzB,EAA+B,YAA/B,EAA6C,IAA7C,EAAiD;AACrD,SAAO,IAAI,CAAC,cAAL,CAAoB,YAApB,EAAkC,IAAlC,KAA2C,EAAlD;AACD;AAGD;;;;;;;AAMA,OAAM,SAAU,KAAV,CAAgB,GAAhB,EAAmB;AACvB,SAAO,IAAI,SAAJ,GAAgB,eAAhB,CAAgC,GAAhC,EAAqC,iBAArC,CAAP;AACD;AAGD;;;;;;;;;AAQA,OAAM,SAAU,iBAAV,CAA4B,WAA5B,EAAyC,QAAzC,EAAiD;AACrD;AACE;;;;AAIA,cAAS,IAAT,EAAe,WAAf,EAA0B;AACxB,UAAM,KAAK,GAAG,WAAW,CAAC,IAAZ,CAAiB,QAAQ,KAAK,SAAb,GAAyB,QAAzB,GAAoC,IAArD,EAA2D,IAA3D,EAAiE,WAAjE,CAAd;;AACA,UAAI,KAAK,KAAK,SAAd,EAAyB;AACvB,YAAM,KAAK;AAAG;AAAyB,QAAA,WAAW,CAAC,WAAW,CAAC,MAAZ,GAAqB,CAAtB,CAAlD;AACA,QAAA,MAAM,CAAC,KAAD,EAAQ,KAAR,CAAN;AACD;AACF;AAXH;AAaD;AAGD;;;;;;;;;AAQA,OAAM,SAAU,eAAV,CAA0B,WAA1B,EAAuC,QAAvC,EAA+C;AACnD;AACE;;;;AAIA,cAAS,IAAT,EAAe,WAAf,EAA0B;AACxB,UAAM,KAAK,GAAG,WAAW,CAAC,IAAZ,CAAiB,QAAQ,KAAK,SAAb,GAAyB,QAAzB,GAAoC,IAArD,EAA2D,IAA3D,EAAiE,WAAjE,CAAd;;AACA,UAAI,KAAK,KAAK,SAAd,EAAyB;AACvB,YAAM,KAAK;AAAG;AAAyB,QAAA,WAAW,CAAC,WAAW,CAAC,MAAZ,GAAqB,CAAtB,CAAlD;AACA,QAAA,KAAK,CAAC,IAAN,CAAW,KAAX;AACD;AACF;AAXH;AAYD;AAGD;;;;;;;;;AAQA,OAAM,SAAU,YAAV,CAAuB,WAAvB,EAAoC,QAApC,EAA4C;AAChD;AACE;;;;AAIA,cAAS,IAAT,EAAe,WAAf,EAA0B;AACxB,UAAM,KAAK,GAAG,WAAW,CAAC,IAAZ,CAAiB,QAAQ,KAAK,SAAb,GAAyB,QAAzB,GAAoC,IAArD,EAA2D,IAA3D,EAAiE,WAAjE,CAAd;;AACA,UAAI,KAAK,KAAK,SAAd,EAAyB;AACvB,QAAA,WAAW,CAAC,WAAW,CAAC,MAAZ,GAAqB,CAAtB,CAAX,GAAsC,KAAtC;AACD;AACF;AAVH;AAWD;AAGD;;;;;;;;;;AASA,OAAM,SAAU,wBAAV,CAAmC,WAAnC,EAAgD,YAAhD,EAA8D,QAA9D,EAAsE;AAC1E;AACE;;;;AAIA,cAAS,IAAT,EAAe,WAAf,EAA0B;AACxB,UAAM,KAAK,GAAG,WAAW,CAAC,IAAZ,CAAiB,QAAQ,KAAK,SAAb,GAAyB,QAAzB,GAAoC,IAArD,EAA2D,IAA3D,EAAiE,WAAjE,CAAd;;AACA,UAAI,KAAK,KAAK,SAAd,EAAyB;AACvB,YAAM,MAAM;AAAG;AAAwB,QAAA,WAAW,CAAC,WAAW,CAAC,MAAZ,GAAqB,CAAtB,CAAlD;AACA,YAAM,QAAQ,GAAG,YAAY,KAAK,SAAjB,GAA6B,YAA7B,GAA4C,IAAI,CAAC,SAAlE;AACA,YAAI,KAAK,GAAA,KAAA,CAAT;;AACA,YAAI,QAAQ,IAAI,MAAhB,EAAwB;AACtB,UAAA,KAAK,GAAG,MAAM,CAAC,QAAD,CAAd;AACD,SAFD,MAEO;AACL,UAAA,KAAK,GAAG,EAAR;AACA,UAAA,MAAM,CAAC,QAAD,CAAN,GAAmB,KAAnB;AACD;;AACD,QAAA,KAAK,CAAC,IAAN,CAAW,KAAX;AACD;AACF;AAnBH;AAoBD;AAGD;;;;;;;;;AAQA,OAAM,SAAU,wBAAV,CAAmC,WAAnC,EAAgD,YAAhD,EAA8D,QAA9D,EAAsE;AAC1E;AACE;;;;AAIA,cAAS,IAAT,EAAe,WAAf,EAA0B;AACxB,UAAM,KAAK,GAAG,WAAW,CAAC,IAAZ,CAAiB,QAAQ,KAAK,SAAb,GAAyB,QAAzB,GAAoC,IAArD,EAA2D,IAA3D,EAAiE,WAAjE,CAAd;;AACA,UAAI,KAAK,KAAK,SAAd,EAAyB;AACvB,YAAM,MAAM;AAAG;AAAwB,QAAA,WAAW,CAAC,WAAW,CAAC,MAAZ,GAAqB,CAAtB,CAAlD;AACA,YAAM,QAAQ,GAAG,YAAY,KAAK,SAAjB,GAA6B,YAA7B,GAA4C,IAAI,CAAC,SAAlE;AACA,QAAA,MAAM,CAAC,QAAD,CAAN,GAAmB,KAAnB;AACD;AACF;AAZH;AAaD;AAGD;;;;;;;;;;AASA,OAAM,SAAU,iBAAV,CAA4B,UAA5B,EAAwC,QAAxC,EAAgD;AACpD,SAAO,UAAS,IAAT,EAAe,KAAf,EAAsB,WAAtB,EAAiC;AACtC,IAAA,UAAU,CAAC,IAAX,CAAgB,QAAQ,KAAK,SAAb,GAAyB,QAAzB,GAAoC,IAApD,EAA0D,IAA1D,EAAgE,KAAhE,EAAuE,WAAvE;AACA,QAAM,MAAM;AAAG;AAA8B,IAAA,WAAW,CAAC,WAAW,CAAC,MAAZ,GAAqB,CAAtB,CAAxD;AACA,QAAM,UAAU,GAAG,MAAM,CAAC,IAA1B;AACA,IAAA,UAAU,CAAC,WAAX,CAAuB,IAAvB;AACD,GALD;AAMD;AAGD;;;;;;;;;;;;;AAYA,OAAM,SAAU,mBAAV,CAA8B,UAA9B,EAA0C,QAA1C,EAAkD;AACtD,MAAI,aAAJ,EAAmB,WAAnB;AACA,SAAO,UAAS,IAAT,EAAe,KAAf,EAAsB,WAAtB,EAAiC;AACtC,QAAI,aAAa,KAAK,SAAtB,EAAiC;AAC/B,MAAA,aAAa,GAAG,EAAhB;AACA,UAAM,WAAW,GAAG,EAApB;AACA,MAAA,WAAW,CAAC,IAAI,CAAC,SAAN,CAAX,GAA8B,UAA9B;AACA,MAAA,aAAa,CAAC,IAAI,CAAC,YAAN,CAAb,GAAmC,WAAnC;AACA,MAAA,WAAW,GAAG,qBAAqB,CAAC,IAAI,CAAC,SAAN,CAAnC;AACD;;AACD,IAAA,SAAS,CAAC,aAAD,EAAgB,WAAhB,EAA6B,KAA7B,EAAoC,WAApC,CAAT;AACD,GATD;AAUD;AAGD;;;;;;;;;;;;;;AAaA,OAAM,SAAU,qBAAV,CAAgC,YAAhC,EAA8C,gBAA9C,EAA8D;AAClE,MAAM,aAAa,GAAG,YAAtB;AACA;AACE;;;;;;AAMA,cAAS,KAAT,EAAgB,WAAhB,EAA6B,YAA7B,EAAyC;AACvC,UAAM,OAAO;AAAG;AAA8B,MAAA,WAAW,CAAC,WAAW,CAAC,MAAZ,GAAqB,CAAtB,CAAzD;AACA,UAAM,IAAI,GAAG,OAAO,CAAC,IAArB;AACA,UAAI,QAAQ,GAAG,aAAf;;AACA,UAAI,QAAQ,KAAK,SAAjB,EAA4B;AAC1B,QAAA,QAAQ,GAAG,YAAX;AACD;;AAED,UAAM,YAAY,GAAG,gBAAgB,KAAK,SAArB,GAAiC,gBAAjC,GAAoD,IAAI,CAAC,YAA9E;AACA,aAAO,eAAe,CAAC,YAAD;AAAe;AAAuB,MAAA,QAAtC,CAAtB;AACD;AAjBH;AAmBD;AAGD;;;;;;;;AAOA,OAAO,IAAM,4BAA4B,GAAG,qBAAqB,EAA1D;AAGP;;;;;;;;;;;;AAWA,OAAM,SAAU,YAAV,CAAuB,MAAvB,EAA+B,WAA/B,EAA0C;AAC9C,MAAM,MAAM,GAAG,WAAW,CAAC,MAA3B;AACA,MAAM,QAAQ,GAAG,IAAI,KAAJ,CAAU,MAAV,CAAjB;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAApB,EAA4B,EAAE,CAA9B,EAAiC;AAC/B,IAAA,QAAQ,CAAC,CAAD,CAAR,GAAc,MAAM,CAAC,WAAW,CAAC,CAAD,CAAZ,CAApB;AACD;;AACD,SAAO,QAAP;AACD;AAGD;;;;;;;;;;;AAUA,OAAM,SAAU,eAAV,CAA0B,aAA1B,EAAyC,SAAzC,EAAoD,eAApD,EAAmE;AACvE;;;AAGA,MAAM,WAAW,GAAG,eAAe,KAAK,SAApB,GAAgC,eAAhC,GAAkD,EAAtE;AACA,MAAI,CAAJ,EAAO,EAAP;;AACA,OAAK,CAAC,GAAG,CAAJ,EAAO,EAAE,GAAG,aAAa,CAAC,MAA/B,EAAuC,CAAC,GAAG,EAA3C,EAA+C,EAAE,CAAjD,EAAoD;AAClD,IAAA,WAAW,CAAC,aAAa,CAAC,CAAD,CAAd,CAAX,GAAgC,SAAhC;AACD;;AACD,SAAO,WAAP;AACD;AAGD;;;;;;;;;AAQA,OAAM,SAAU,SAAV,CAAoB,SAApB,EAA+B,IAA/B,EAAqC,WAArC,EAAkD,QAAlD,EAA0D;AAC9D,MAAI,CAAJ;;AACA,OAAK,CAAC,GAAG,IAAI,CAAC,iBAAd,EAAiC,CAAjC,EAAoC,CAAC,GAAG,CAAC,CAAC,kBAA1C,EAA8D;AAC5D,QAAM,OAAO,GAAG,SAAS,CAAC,CAAC,CAAC,YAAH,CAAzB;;AACA,QAAI,OAAO,KAAK,SAAhB,EAA2B;AACzB,UAAM,MAAM,GAAG,OAAO,CAAC,CAAC,CAAC,SAAH,CAAtB;;AACA,UAAI,MAAM,KAAK,SAAf,EAA0B;AACxB,QAAA,MAAM,CAAC,IAAP,CAAY,QAAZ,EAAsB,CAAtB,EAAyB,WAAzB;AACD;AACF;AACF;AACF;AAGD;;;;;;;;;;;;AAWA,OAAM,SAAU,eAAV,CAA0B,MAA1B,EAAkC,SAAlC,EAA6C,IAA7C,EAAmD,WAAnD,EAAgE,QAAhE,EAAwE;AAC5E,EAAA,WAAW,CAAC,IAAZ,CAAiB,MAAjB;AACA,EAAA,SAAS,CAAC,SAAD,EAAY,IAAZ,EAAkB,WAAlB,EAA+B,QAA/B,CAAT;AACA;AAAO;AAAkB,IAAA,WAAW,CAAC,GAAZ;AAAzB;AACD;AAGD;;;;;;;;;;;;;;;;;;;;;;;AAsBA,OAAM,SAAU,SAAV,CACJ,aADI,EACW,WADX,EACwB,MADxB,EACgC,WADhC,EAC6C,QAD7C,EACuD,QADvD,EAC+D;AACnE,MAAM,MAAM,GAAG,CAAC,QAAQ,KAAK,SAAb,GAAyB,QAAzB,GAAoC,MAArC,EAA6C,MAA5D;AACA,MAAI,KAAJ,EAAW,IAAX;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAApB,EAA4B,EAAE,CAA9B,EAAiC;AAC/B,IAAA,KAAK,GAAG,MAAM,CAAC,CAAD,CAAd;;AACA,QAAI,KAAK,KAAK,SAAd,EAAyB;AACvB,MAAA,IAAI,GAAG,WAAW,CAAC,IAAZ,CAAiB,QAAQ,KAAK,SAAb,GAAyB,QAAzB,GAAoC,IAArD,EAA2D,KAA3D,EAAkE,WAAlE,EACL,QAAQ,KAAK,SAAb,GAAyB,QAAQ,CAAC,CAAD,CAAjC,GAAuC,SADlC,CAAP;;AAEA,UAAI,IAAI,KAAK,SAAb,EAAwB;AACtB,QAAA,aAAa,CAAC,IAAI,CAAC,YAAN,CAAb,CAAiC,IAAI,CAAC,SAAtC,EACG,IADH,CACQ,QADR,EACkB,IADlB,EACwB,KADxB,EAC+B,WAD/B;AAED;AACF;AACF;AACF;AAGD;;;;;;;;;;;;;;;;;;;;;;;;AAuBA,OAAM,SAAU,mBAAV,CAA8B,MAA9B,EAAsC,aAAtC,EAAqD,WAArD,EAAkE,MAAlE,EAA0E,WAA1E,EAAuF,QAAvF,EAAiG,QAAjG,EAAyG;AAC7G,EAAA,WAAW,CAAC,IAAZ,CAAiB,MAAjB;AACA,EAAA,SAAS,CAAC,aAAD,EAAgB,WAAhB,EAA6B,MAA7B,EAAqC,WAArC,EAAkD,QAAlD,EAA4D,QAA5D,CAAT;AACA;AAAO;AAA4B,IAAA,WAAW,CAAC,GAAZ;AAAnC;AACD;AAED,IAAI,cAAc,GAAG,SAArB;AAEA;;;;;;;;AAOA,OAAM,SAAU,qBAAV,CAAgC,aAAhC,EAA6C;AACjD,EAAA,cAAc,GAAG,aAAjB;AACD;AAED;;;;AAGA,OAAM,SAAU,gBAAV,GAA0B;AAC9B,MAAI,cAAc,KAAK,SAAnB,IAAgC,OAAO,aAAP,KAAyB,WAA7D,EAA0E;AACxE,IAAA,cAAc,GAAG,IAAI,aAAJ,EAAjB;AACD;;AACD,SAAO,cAAP;AACD;AAGD,IAAI,SAAS,GAAG,SAAhB;AAEA;;;;;;;;AAOA,OAAM,SAAU,gBAAV,CAA2B,QAA3B,EAAmC;AACvC,EAAA,SAAS,GAAG,QAAZ;AACD;AAED;;;;;AAIA,OAAM,SAAU,WAAV,GAAqB;AACzB,MAAI,SAAS,KAAK,SAAd,IAA2B,OAAO,QAAP,KAAoB,WAAnD,EAAgE;AAC9D,IAAA,SAAS,GAAG,QAAQ,CAAC,cAAT,CAAwB,cAAxB,CAAuC,EAAvC,EAA2C,EAA3C,EAA+C,IAA/C,CAAZ;AACD;;AACD,SAAO,SAAP;AACD","sourceRoot":"","sourcesContent":["/**\n * @module ol/xml\n */\nimport { extend } from './array.js';\n/**\n * When using {@link module:ol/xml~makeChildAppender} or\n * {@link module:ol/xml~makeSimpleNodeFactory}, the top `objectStack` item needs\n * to have this structure.\n * @typedef {Object} NodeStackItem\n * @property {Node} node\n */\n/**\n * @typedef {function(Element, Array<*>): void} Parser\n */\n/**\n * @typedef {function(Element, *, Array<*>): void} Serializer\n */\n/**\n * @type {string}\n */\nexport var XML_SCHEMA_INSTANCE_URI = 'http://www.w3.org/2001/XMLSchema-instance';\n/**\n * @param {string} namespaceURI Namespace URI.\n * @param {string} qualifiedName Qualified name.\n * @return {Element} Node.\n */\nexport function createElementNS(namespaceURI, qualifiedName) {\n    return getDocument().createElementNS(namespaceURI, qualifiedName);\n}\n/**\n * Recursively grab all text content of child nodes into a single string.\n * @param {Node} node Node.\n * @param {boolean} normalizeWhitespace Normalize whitespace: remove all line\n * breaks.\n * @return {string} All text content.\n * @api\n */\nexport function getAllTextContent(node, normalizeWhitespace) {\n    return getAllTextContent_(node, normalizeWhitespace, []).join('');\n}\n/**\n * Recursively grab all text content of child nodes into a single string.\n * @param {Node} node Node.\n * @param {boolean} normalizeWhitespace Normalize whitespace: remove all line\n * breaks.\n * @param {Array<string>} accumulator Accumulator.\n * @private\n * @return {Array<string>} Accumulator.\n */\nexport function getAllTextContent_(node, normalizeWhitespace, accumulator) {\n    if (node.nodeType == Node.CDATA_SECTION_NODE ||\n        node.nodeType == Node.TEXT_NODE) {\n        if (normalizeWhitespace) {\n            accumulator.push(String(node.nodeValue).replace(/(\\r\\n|\\r|\\n)/g, ''));\n        }\n        else {\n            accumulator.push(node.nodeValue);\n        }\n    }\n    else {\n        var n = void 0;\n        for (n = node.firstChild; n; n = n.nextSibling) {\n            getAllTextContent_(n, normalizeWhitespace, accumulator);\n        }\n    }\n    return accumulator;\n}\n/**\n * @param {Object} object Object.\n * @return {boolean} Is a document.\n */\nexport function isDocument(object) {\n    return 'documentElement' in object;\n}\n/**\n * @param {Element} node Node.\n * @param {?string} namespaceURI Namespace URI.\n * @param {string} name Attribute name.\n * @return {string} Value\n */\nexport function getAttributeNS(node, namespaceURI, name) {\n    return node.getAttributeNS(namespaceURI, name) || '';\n}\n/**\n * Parse an XML string to an XML Document.\n * @param {string} xml XML.\n * @return {Document} Document.\n * @api\n */\nexport function parse(xml) {\n    return new DOMParser().parseFromString(xml, 'application/xml');\n}\n/**\n * Make an array extender function for extending the array at the top of the\n * object stack.\n * @param {function(this: T, Node, Array<*>): (Array<*>|undefined)} valueReader Value reader.\n * @param {T=} opt_this The object to use as `this` in `valueReader`.\n * @return {Parser} Parser.\n * @template T\n */\nexport function makeArrayExtender(valueReader, opt_this) {\n    return (\n    /**\n     * @param {Node} node Node.\n     * @param {Array<*>} objectStack Object stack.\n     */\n    function (node, objectStack) {\n        var value = valueReader.call(opt_this !== undefined ? opt_this : this, node, objectStack);\n        if (value !== undefined) {\n            var array = /** @type {Array<*>} */ (objectStack[objectStack.length - 1]);\n            extend(array, value);\n        }\n    });\n}\n/**\n * Make an array pusher function for pushing to the array at the top of the\n * object stack.\n * @param {function(this: T, Element, Array<*>): *} valueReader Value reader.\n * @param {T=} opt_this The object to use as `this` in `valueReader`.\n * @return {Parser} Parser.\n * @template T\n */\nexport function makeArrayPusher(valueReader, opt_this) {\n    return (\n    /**\n     * @param {Element} node Node.\n     * @param {Array<*>} objectStack Object stack.\n     */\n    function (node, objectStack) {\n        var value = valueReader.call(opt_this !== undefined ? opt_this : this, node, objectStack);\n        if (value !== undefined) {\n            var array = /** @type {Array<*>} */ (objectStack[objectStack.length - 1]);\n            array.push(value);\n        }\n    });\n}\n/**\n * Make an object stack replacer function for replacing the object at the\n * top of the stack.\n * @param {function(this: T, Node, Array<*>): *} valueReader Value reader.\n * @param {T=} opt_this The object to use as `this` in `valueReader`.\n * @return {Parser} Parser.\n * @template T\n */\nexport function makeReplacer(valueReader, opt_this) {\n    return (\n    /**\n     * @param {Node} node Node.\n     * @param {Array<*>} objectStack Object stack.\n     */\n    function (node, objectStack) {\n        var value = valueReader.call(opt_this !== undefined ? opt_this : this, node, objectStack);\n        if (value !== undefined) {\n            objectStack[objectStack.length - 1] = value;\n        }\n    });\n}\n/**\n * Make an object property pusher function for adding a property to the\n * object at the top of the stack.\n * @param {function(this: T, Element, Array<*>): *} valueReader Value reader.\n * @param {string=} opt_property Property.\n * @param {T=} opt_this The object to use as `this` in `valueReader`.\n * @return {Parser} Parser.\n * @template T\n */\nexport function makeObjectPropertyPusher(valueReader, opt_property, opt_this) {\n    return (\n    /**\n     * @param {Element} node Node.\n     * @param {Array<*>} objectStack Object stack.\n     */\n    function (node, objectStack) {\n        var value = valueReader.call(opt_this !== undefined ? opt_this : this, node, objectStack);\n        if (value !== undefined) {\n            var object = /** @type {!Object} */ (objectStack[objectStack.length - 1]);\n            var property = opt_property !== undefined ? opt_property : node.localName;\n            var array = void 0;\n            if (property in object) {\n                array = object[property];\n            }\n            else {\n                array = [];\n                object[property] = array;\n            }\n            array.push(value);\n        }\n    });\n}\n/**\n * Make an object property setter function.\n * @param {function(this: T, Element, Array<*>): *} valueReader Value reader.\n * @param {string=} opt_property Property.\n * @param {T=} opt_this The object to use as `this` in `valueReader`.\n * @return {Parser} Parser.\n * @template T\n */\nexport function makeObjectPropertySetter(valueReader, opt_property, opt_this) {\n    return (\n    /**\n     * @param {Element} node Node.\n     * @param {Array<*>} objectStack Object stack.\n     */\n    function (node, objectStack) {\n        var value = valueReader.call(opt_this !== undefined ? opt_this : this, node, objectStack);\n        if (value !== undefined) {\n            var object = /** @type {!Object} */ (objectStack[objectStack.length - 1]);\n            var property = opt_property !== undefined ? opt_property : node.localName;\n            object[property] = value;\n        }\n    });\n}\n/**\n * Create a serializer that appends nodes written by its `nodeWriter` to its\n * designated parent. The parent is the `node` of the\n * {@link module:ol/xml~NodeStackItem} at the top of the `objectStack`.\n * @param {function(this: T, Node, V, Array<*>): void} nodeWriter Node writer.\n * @param {T=} opt_this The object to use as `this` in `nodeWriter`.\n * @return {Serializer} Serializer.\n * @template T, V\n */\nexport function makeChildAppender(nodeWriter, opt_this) {\n    return function (node, value, objectStack) {\n        nodeWriter.call(opt_this !== undefined ? opt_this : this, node, value, objectStack);\n        var parent = /** @type {NodeStackItem} */ (objectStack[objectStack.length - 1]);\n        var parentNode = parent.node;\n        parentNode.appendChild(node);\n    };\n}\n/**\n * Create a serializer that calls the provided `nodeWriter` from\n * {@link module:ol/xml~serialize}. This can be used by the parent writer to have the\n * 'nodeWriter' called with an array of values when the `nodeWriter` was\n * designed to serialize a single item. An example would be a LineString\n * geometry writer, which could be reused for writing MultiLineString\n * geometries.\n * @param {function(this: T, Element, V, Array<*>): void} nodeWriter Node writer.\n * @param {T=} opt_this The object to use as `this` in `nodeWriter`.\n * @return {Serializer} Serializer.\n * @template T, V\n */\nexport function makeArraySerializer(nodeWriter, opt_this) {\n    var serializersNS, nodeFactory;\n    return function (node, value, objectStack) {\n        if (serializersNS === undefined) {\n            serializersNS = {};\n            var serializers = {};\n            serializers[node.localName] = nodeWriter;\n            serializersNS[node.namespaceURI] = serializers;\n            nodeFactory = makeSimpleNodeFactory(node.localName);\n        }\n        serialize(serializersNS, nodeFactory, value, objectStack);\n    };\n}\n/**\n * Create a node factory which can use the `opt_keys` passed to\n * {@link module:ol/xml~serialize} or {@link module:ol/xml~pushSerializeAndPop} as node names,\n * or a fixed node name. The namespace of the created nodes can either be fixed,\n * or the parent namespace will be used.\n * @param {string=} opt_nodeName Fixed node name which will be used for all\n *     created nodes. If not provided, the 3rd argument to the resulting node\n *     factory needs to be provided and will be the nodeName.\n * @param {string=} opt_namespaceURI Fixed namespace URI which will be used for\n *     all created nodes. If not provided, the namespace of the parent node will\n *     be used.\n * @return {function(*, Array<*>, string=): (Node|undefined)} Node factory.\n */\nexport function makeSimpleNodeFactory(opt_nodeName, opt_namespaceURI) {\n    var fixedNodeName = opt_nodeName;\n    return (\n    /**\n     * @param {*} value Value.\n     * @param {Array<*>} objectStack Object stack.\n     * @param {string=} opt_nodeName Node name.\n     * @return {Node} Node.\n     */\n    function (value, objectStack, opt_nodeName) {\n        var context = /** @type {NodeStackItem} */ (objectStack[objectStack.length - 1]);\n        var node = context.node;\n        var nodeName = fixedNodeName;\n        if (nodeName === undefined) {\n            nodeName = opt_nodeName;\n        }\n        var namespaceURI = opt_namespaceURI !== undefined ? opt_namespaceURI : node.namespaceURI;\n        return createElementNS(namespaceURI, /** @type {string} */ (nodeName));\n    });\n}\n/**\n * A node factory that creates a node using the parent's `namespaceURI` and the\n * `nodeName` passed by {@link module:ol/xml~serialize} or\n * {@link module:ol/xml~pushSerializeAndPop} to the node factory.\n * @const\n * @type {function(*, Array<*>, string=): (Node|undefined)}\n */\nexport var OBJECT_PROPERTY_NODE_FACTORY = makeSimpleNodeFactory();\n/**\n * Create an array of `values` to be used with {@link module:ol/xml~serialize} or\n * {@link module:ol/xml~pushSerializeAndPop}, where `orderedKeys` has to be provided as\n * `opt_key` argument.\n * @param {Object<string, *>} object Key-value pairs for the sequence. Keys can\n *     be a subset of the `orderedKeys`.\n * @param {Array<string>} orderedKeys Keys in the order of the sequence.\n * @return {Array<*>} Values in the order of the sequence. The resulting array\n *     has the same length as the `orderedKeys` array. Values that are not\n *     present in `object` will be `undefined` in the resulting array.\n */\nexport function makeSequence(object, orderedKeys) {\n    var length = orderedKeys.length;\n    var sequence = new Array(length);\n    for (var i = 0; i < length; ++i) {\n        sequence[i] = object[orderedKeys[i]];\n    }\n    return sequence;\n}\n/**\n * Create a namespaced structure, using the same values for each namespace.\n * This can be used as a starting point for versioned parsers, when only a few\n * values are version specific.\n * @param {Array<string>} namespaceURIs Namespace URIs.\n * @param {T} structure Structure.\n * @param {Object<string, T>=} opt_structureNS Namespaced structure to add to.\n * @return {Object<string, T>} Namespaced structure.\n * @template T\n */\nexport function makeStructureNS(namespaceURIs, structure, opt_structureNS) {\n    /**\n     * @type {Object<string, T>}\n     */\n    var structureNS = opt_structureNS !== undefined ? opt_structureNS : {};\n    var i, ii;\n    for (i = 0, ii = namespaceURIs.length; i < ii; ++i) {\n        structureNS[namespaceURIs[i]] = structure;\n    }\n    return structureNS;\n}\n/**\n * Parse a node using the parsers and object stack.\n * @param {Object<string, Object<string, Parser>>} parsersNS\n *     Parsers by namespace.\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @param {*=} opt_this The object to use as `this`.\n */\nexport function parseNode(parsersNS, node, objectStack, opt_this) {\n    var n;\n    for (n = node.firstElementChild; n; n = n.nextElementSibling) {\n        var parsers = parsersNS[n.namespaceURI];\n        if (parsers !== undefined) {\n            var parser = parsers[n.localName];\n            if (parser !== undefined) {\n                parser.call(opt_this, n, objectStack);\n            }\n        }\n    }\n}\n/**\n * Push an object on top of the stack, parse and return the popped object.\n * @param {T} object Object.\n * @param {Object<string, Object<string, Parser>>} parsersNS\n *     Parsers by namespace.\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @param {*=} opt_this The object to use as `this`.\n * @return {T} Object.\n * @template T\n */\nexport function pushParseAndPop(object, parsersNS, node, objectStack, opt_this) {\n    objectStack.push(object);\n    parseNode(parsersNS, node, objectStack, opt_this);\n    return /** @type {T} */ (objectStack.pop());\n}\n/**\n * Walk through an array of `values` and call a serializer for each value.\n * @param {Object<string, Object<string, Serializer>>} serializersNS\n *     Namespaced serializers.\n * @param {function(this: T, *, Array<*>, (string|undefined)): (Node|undefined)} nodeFactory\n *     Node factory. The `nodeFactory` creates the node whose namespace and name\n *     will be used to choose a node writer from `serializersNS`. This\n *     separation allows us to decide what kind of node to create, depending on\n *     the value we want to serialize. An example for this would be different\n *     geometry writers based on the geometry type.\n * @param {Array<*>} values Values to serialize. An example would be an array\n *     of {@link module:ol/Feature~Feature} instances.\n * @param {Array<*>} objectStack Node stack.\n * @param {Array<string>=} opt_keys Keys of the `values`. Will be passed to the\n *     `nodeFactory`. This is used for serializing object literals where the\n *     node name relates to the property key. The array length of `opt_keys` has\n *     to match the length of `values`. For serializing a sequence, `opt_keys`\n *     determines the order of the sequence.\n * @param {T=} opt_this The object to use as `this` for the node factory and\n *     serializers.\n * @template T\n */\nexport function serialize(serializersNS, nodeFactory, values, objectStack, opt_keys, opt_this) {\n    var length = (opt_keys !== undefined ? opt_keys : values).length;\n    var value, node;\n    for (var i = 0; i < length; ++i) {\n        value = values[i];\n        if (value !== undefined) {\n            node = nodeFactory.call(opt_this !== undefined ? opt_this : this, value, objectStack, opt_keys !== undefined ? opt_keys[i] : undefined);\n            if (node !== undefined) {\n                serializersNS[node.namespaceURI][node.localName]\n                    .call(opt_this, node, value, objectStack);\n            }\n        }\n    }\n}\n/**\n * @param {O} object Object.\n * @param {Object<string, Object<string, Serializer>>} serializersNS\n *     Namespaced serializers.\n * @param {function(this: T, *, Array<*>, (string|undefined)): (Node|undefined)} nodeFactory\n *     Node factory. The `nodeFactory` creates the node whose namespace and name\n *     will be used to choose a node writer from `serializersNS`. This\n *     separation allows us to decide what kind of node to create, depending on\n *     the value we want to serialize. An example for this would be different\n *     geometry writers based on the geometry type.\n * @param {Array<*>} values Values to serialize. An example would be an array\n *     of {@link module:ol/Feature~Feature} instances.\n * @param {Array<*>} objectStack Node stack.\n * @param {Array<string>=} opt_keys Keys of the `values`. Will be passed to the\n *     `nodeFactory`. This is used for serializing object literals where the\n *     node name relates to the property key. The array length of `opt_keys` has\n *     to match the length of `values`. For serializing a sequence, `opt_keys`\n *     determines the order of the sequence.\n * @param {T=} opt_this The object to use as `this` for the node factory and\n *     serializers.\n * @return {O|undefined} Object.\n * @template O, T\n */\nexport function pushSerializeAndPop(object, serializersNS, nodeFactory, values, objectStack, opt_keys, opt_this) {\n    objectStack.push(object);\n    serialize(serializersNS, nodeFactory, values, objectStack, opt_keys, opt_this);\n    return /** @type {O|undefined} */ (objectStack.pop());\n}\nvar xmlSerializer_ = undefined;\n/**\n * Register a XMLSerializer. Can be used  to inject a XMLSerializer\n * where there is no globally available implementation.\n *\n * @param {XMLSerializer} xmlSerializer A XMLSerializer.\n * @api\n */\nexport function registerXMLSerializer(xmlSerializer) {\n    xmlSerializer_ = xmlSerializer;\n}\n/**\n * @return {XMLSerializer} The XMLSerializer.\n */\nexport function getXMLSerializer() {\n    if (xmlSerializer_ === undefined && typeof XMLSerializer !== 'undefined') {\n        xmlSerializer_ = new XMLSerializer();\n    }\n    return xmlSerializer_;\n}\nvar document_ = undefined;\n/**\n * Register a Document to use when creating nodes for XML serializations. Can be used\n * to inject a Document where there is no globally available implementation.\n *\n * @param {Document} document A Document.\n * @api\n */\nexport function registerDocument(document) {\n    document_ = document;\n}\n/**\n * Get a document that should be used when creating nodes for XML serializations.\n * @return {Document} The document.\n */\nexport function getDocument() {\n    if (document_ === undefined && typeof document !== 'undefined') {\n        document_ = document.implementation.createDocument('', '', null);\n    }\n    return document_;\n}\n//# sourceMappingURL=xml.js.map"]},"metadata":{},"sourceType":"module"}