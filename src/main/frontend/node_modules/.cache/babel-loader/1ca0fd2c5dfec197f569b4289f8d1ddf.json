{"ast":null,"code":"// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v. 2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n// Variable to hold current primary touch event identifier.\n// iOS needs this since it does not attribute\n// identifier 0 to primary touch event.\nvar primaryTouchId = null; // Variable to hold mouse pointer captures.\n\nvar mouseCaptureTarget = null;\n\nif (!(\"PointerEvent\" in window)) {\n  // Define {set,release}PointerCapture\n  definePointerCapture(); // Create Pointer polyfill from mouse events only on non-touch device\n\n  if (!(\"TouchEvent\" in window)) {\n    addMouseToPointerListener(document, \"mousedown\", \"pointerdown\");\n    addMouseToPointerListener(document, \"mousemove\", \"pointermove\");\n    addMouseToPointerListener(document, \"mouseup\", \"pointerup\");\n  } // Define Pointer polyfill from touch events\n\n\n  addTouchToPointerListener(document, \"touchstart\", \"pointerdown\");\n  addTouchToPointerListener(document, \"touchmove\", \"pointermove\");\n  addTouchToPointerListener(document, \"touchend\", \"pointerup\");\n} // Function defining {set,release}PointerCapture from {set,releas}Capture\n\n\nfunction definePointerCapture() {\n  Element.prototype.setPointerCapture = Element.prototype.setCapture;\n  Element.prototype.releasePointerCapture = Element.prototype.releaseCapture;\n} // Function converting a Mouse event to a Pointer event.\n\n\nfunction addMouseToPointerListener(target, mouseType, pointerType) {\n  target.addEventListener(mouseType, function (mouseEvent) {\n    var pointerEvent = new MouseEvent(pointerType, mouseEvent);\n    pointerEvent.pointerId = 1;\n    pointerEvent.isPrimary = true;\n    pointerEvent.pointerType = \"mouse\";\n    pointerEvent.width = 1;\n    pointerEvent.height = 1;\n    pointerEvent.tiltX = 0;\n    pointerEvent.tiltY = 0; // pressure is 0.5 if a button is holded\n\n    \"buttons\" in mouseEvent && mouseEvent.buttons !== 0 ? pointerEvent.pressure = 0.5 : pointerEvent.pressure = 0; // if already capturing mouse event, transfer target\n    // and don't forget implicit release on mouseup.\n\n    var target = mouseEvent.target;\n\n    if (mouseCaptureTarget !== null) {\n      target = mouseCaptureTarget;\n\n      if (mouseType === \"mouseup\") {\n        mouseCaptureTarget = null;\n      }\n    }\n\n    target.dispatchEvent(pointerEvent);\n\n    if (pointerEvent.defaultPrevented) {\n      mouseEvent.preventDefault();\n    }\n  });\n} // Function converting a Touch event to a Pointer event.\n\n\nfunction addTouchToPointerListener(target, touchType, pointerType) {\n  target.addEventListener(touchType, function (touchEvent) {\n    var changedTouches = touchEvent.changedTouches;\n    var nbTouches = changedTouches.length;\n\n    for (var t = 0; t < nbTouches; t++) {\n      var pointerEvent = new CustomEvent(pointerType, {\n        bubbles: true,\n        cancelable: true\n      });\n      pointerEvent.ctrlKey = touchEvent.ctrlKey;\n      pointerEvent.shiftKey = touchEvent.shiftKey;\n      pointerEvent.altKey = touchEvent.altKey;\n      pointerEvent.metaKey = touchEvent.metaKey;\n      var touch = changedTouches.item(t);\n      pointerEvent.clientX = touch.clientX;\n      pointerEvent.clientY = touch.clientY;\n      pointerEvent.screenX = touch.screenX;\n      pointerEvent.screenY = touch.screenY;\n      pointerEvent.pageX = touch.pageX;\n      pointerEvent.pageY = touch.pageY;\n      var rect = touch.target.getBoundingClientRect();\n      pointerEvent.offsetX = touch.clientX - rect.left;\n      pointerEvent.offsetY = touch.clientY - rect.top;\n      pointerEvent.pointerId = 1 + touch.identifier; // Default values for standard MouseEvent fields.\n\n      pointerEvent.button = 0;\n      pointerEvent.buttons = 1;\n      pointerEvent.movementX = 0;\n      pointerEvent.movementY = 0;\n      pointerEvent.region = null;\n      pointerEvent.relatedTarget = null;\n      pointerEvent.x = pointerEvent.clientX;\n      pointerEvent.y = pointerEvent.clientY; // Pointer event details\n\n      pointerEvent.pointerType = \"touch\";\n      pointerEvent.width = 1;\n      pointerEvent.height = 1;\n      pointerEvent.tiltX = 0;\n      pointerEvent.tiltY = 0;\n      pointerEvent.pressure = 1; // First touch is the primary pointer event.\n\n      if (touchType === \"touchstart\" && primaryTouchId === null) {\n        primaryTouchId = touch.identifier;\n      }\n\n      pointerEvent.isPrimary = touch.identifier === primaryTouchId; // If first touch ends, reset primary touch id.\n\n      if (touchType === \"touchend\" && pointerEvent.isPrimary) {\n        primaryTouchId = null;\n      }\n\n      touchEvent.target.dispatchEvent(pointerEvent);\n\n      if (pointerEvent.defaultPrevented) {\n        touchEvent.preventDefault();\n      }\n    }\n  });\n}","map":{"version":3,"sources":["../src/elm-pep.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v. 2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n// Variable to hold current primary touch event identifier.\n// iOS needs this since it does not attribute\n// identifier 0 to primary touch event.\nvar primaryTouchId = null;\n// Variable to hold mouse pointer captures.\nvar mouseCaptureTarget = null;\nif (!(\"PointerEvent\" in window)) {\n    // Define {set,release}PointerCapture\n    definePointerCapture();\n    // Create Pointer polyfill from mouse events only on non-touch device\n    if (!(\"TouchEvent\" in window)) {\n        addMouseToPointerListener(document, \"mousedown\", \"pointerdown\");\n        addMouseToPointerListener(document, \"mousemove\", \"pointermove\");\n        addMouseToPointerListener(document, \"mouseup\", \"pointerup\");\n    }\n    // Define Pointer polyfill from touch events\n    addTouchToPointerListener(document, \"touchstart\", \"pointerdown\");\n    addTouchToPointerListener(document, \"touchmove\", \"pointermove\");\n    addTouchToPointerListener(document, \"touchend\", \"pointerup\");\n}\n// Function defining {set,release}PointerCapture from {set,releas}Capture\nfunction definePointerCapture() {\n    Element.prototype.setPointerCapture = Element.prototype.setCapture;\n    Element.prototype.releasePointerCapture = Element.prototype.releaseCapture;\n}\n// Function converting a Mouse event to a Pointer event.\nfunction addMouseToPointerListener(target, mouseType, pointerType) {\n    target.addEventListener(mouseType, function (mouseEvent) {\n        var pointerEvent = new MouseEvent(pointerType, mouseEvent);\n        pointerEvent.pointerId = 1;\n        pointerEvent.isPrimary = true;\n        pointerEvent.pointerType = \"mouse\";\n        pointerEvent.width = 1;\n        pointerEvent.height = 1;\n        pointerEvent.tiltX = 0;\n        pointerEvent.tiltY = 0;\n        // pressure is 0.5 if a button is holded\n        \"buttons\" in mouseEvent && mouseEvent.buttons !== 0\n            ? (pointerEvent.pressure = 0.5)\n            : (pointerEvent.pressure = 0);\n        // if already capturing mouse event, transfer target\n        // and don't forget implicit release on mouseup.\n        var target = mouseEvent.target;\n        if (mouseCaptureTarget !== null) {\n            target = mouseCaptureTarget;\n            if (mouseType === \"mouseup\") {\n                mouseCaptureTarget = null;\n            }\n        }\n        target.dispatchEvent(pointerEvent);\n        if (pointerEvent.defaultPrevented) {\n            mouseEvent.preventDefault();\n        }\n    });\n}\n// Function converting a Touch event to a Pointer event.\nfunction addTouchToPointerListener(target, touchType, pointerType) {\n    target.addEventListener(touchType, function (touchEvent) {\n        var changedTouches = touchEvent.changedTouches;\n        var nbTouches = changedTouches.length;\n        for (var t = 0; t < nbTouches; t++) {\n            var pointerEvent = new CustomEvent(pointerType, {\n                bubbles: true,\n                cancelable: true\n            });\n            pointerEvent.ctrlKey = touchEvent.ctrlKey;\n            pointerEvent.shiftKey = touchEvent.shiftKey;\n            pointerEvent.altKey = touchEvent.altKey;\n            pointerEvent.metaKey = touchEvent.metaKey;\n            var touch = changedTouches.item(t);\n            pointerEvent.clientX = touch.clientX;\n            pointerEvent.clientY = touch.clientY;\n            pointerEvent.screenX = touch.screenX;\n            pointerEvent.screenY = touch.screenY;\n            pointerEvent.pageX = touch.pageX;\n            pointerEvent.pageY = touch.pageY;\n            var rect = touch.target.getBoundingClientRect();\n            pointerEvent.offsetX = touch.clientX - rect.left;\n            pointerEvent.offsetY = touch.clientY - rect.top;\n            pointerEvent.pointerId = 1 + touch.identifier;\n            // Default values for standard MouseEvent fields.\n            pointerEvent.button = 0;\n            pointerEvent.buttons = 1;\n            pointerEvent.movementX = 0;\n            pointerEvent.movementY = 0;\n            pointerEvent.region = null;\n            pointerEvent.relatedTarget = null;\n            pointerEvent.x = pointerEvent.clientX;\n            pointerEvent.y = pointerEvent.clientY;\n            // Pointer event details\n            pointerEvent.pointerType = \"touch\";\n            pointerEvent.width = 1;\n            pointerEvent.height = 1;\n            pointerEvent.tiltX = 0;\n            pointerEvent.tiltY = 0;\n            pointerEvent.pressure = 1;\n            // First touch is the primary pointer event.\n            if (touchType === \"touchstart\" && primaryTouchId === null) {\n                primaryTouchId = touch.identifier;\n            }\n            pointerEvent.isPrimary = touch.identifier === primaryTouchId;\n            // If first touch ends, reset primary touch id.\n            if (touchType === \"touchend\" && pointerEvent.isPrimary) {\n                primaryTouchId = null;\n            }\n            touchEvent.target.dispatchEvent(pointerEvent);\n            if (pointerEvent.defaultPrevented) {\n                touchEvent.preventDefault();\n            }\n        }\n    });\n}\n//# sourceMappingURL=elm-pep.js.map"]},"metadata":{},"sourceType":"script"}