{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/format/EsriJSON\n */\n\n\nimport Feature from '../Feature.js';\nimport { assert } from '../asserts.js';\nimport { containsExtent } from '../extent.js';\nimport { transformGeometryWithOptions } from './Feature.js';\nimport JSONFeature from './JSONFeature.js';\nimport GeometryLayout from '../geom/GeometryLayout.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport LineString from '../geom/LineString.js';\nimport LinearRing from '../geom/LinearRing.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Point from '../geom/Point.js';\nimport Polygon from '../geom/Polygon.js';\nimport { deflateCoordinates } from '../geom/flat/deflate.js';\nimport { linearRingIsClockwise } from '../geom/flat/orient.js';\nimport { isEmpty } from '../obj.js';\nimport { get as getProjection } from '../proj.js';\n/**\n * @typedef {import(\"arcgis-rest-api\").Feature} EsriJSONFeature\n * @typedef {import(\"arcgis-rest-api\").FeatureSet} EsriJSONFeatureSet\n * @typedef {import(\"arcgis-rest-api\").Geometry} EsriJSONGeometry\n * @typedef {import(\"arcgis-rest-api\").Point} EsriJSONPoint\n * @typedef {import(\"arcgis-rest-api\").Polyline} EsriJSONPolyline\n * @typedef {import(\"arcgis-rest-api\").Polygon} EsriJSONPolygon\n * @typedef {import(\"arcgis-rest-api\").Multipoint} EsriJSONMultipoint\n * @typedef {import(\"arcgis-rest-api\").HasZM} EsriJSONHasZM\n * @typedef {import(\"arcgis-rest-api\").Position} EsriJSONPosition\n * @typedef {import(\"arcgis-rest-api\").SpatialReferenceWkid} EsriJSONSpatialReferenceWkid\n */\n\n/**\n * @typedef {Object} EsriJSONMultiPolygon\n * @property {Array<Array<Array<Array<number>>>>} rings Rings for the MultiPolygon.\n * @property {boolean} [hasM] If the polygon coordinates have an M value.\n * @property {boolean} [hasZ] If the polygon coordinates have a Z value.\n * @property {EsriJSONSpatialReferenceWkid} [spatialReference] The coordinate reference system.\n */\n\n/**\n * @const\n * @type {Object<import(\"../geom/GeometryType.js\").default, function(EsriJSONGeometry): import(\"../geom/Geometry.js\").default>}\n */\n\nvar GEOMETRY_READERS = {};\nGEOMETRY_READERS[GeometryType.POINT] = readPointGeometry;\nGEOMETRY_READERS[GeometryType.LINE_STRING] = readLineStringGeometry;\nGEOMETRY_READERS[GeometryType.POLYGON] = readPolygonGeometry;\nGEOMETRY_READERS[GeometryType.MULTI_POINT] = readMultiPointGeometry;\nGEOMETRY_READERS[GeometryType.MULTI_LINE_STRING] = readMultiLineStringGeometry;\nGEOMETRY_READERS[GeometryType.MULTI_POLYGON] = readMultiPolygonGeometry;\n/**\n * @const\n * @type {Object<string, function(import(\"../geom/Geometry.js\").default, import(\"./Feature.js\").WriteOptions=): (EsriJSONGeometry)>}\n */\n\nvar GEOMETRY_WRITERS = {};\nGEOMETRY_WRITERS[GeometryType.POINT] = writePointGeometry;\nGEOMETRY_WRITERS[GeometryType.LINE_STRING] = writeLineStringGeometry;\nGEOMETRY_WRITERS[GeometryType.POLYGON] = writePolygonGeometry;\nGEOMETRY_WRITERS[GeometryType.MULTI_POINT] = writeMultiPointGeometry;\nGEOMETRY_WRITERS[GeometryType.MULTI_LINE_STRING] = writeMultiLineStringGeometry;\nGEOMETRY_WRITERS[GeometryType.MULTI_POLYGON] = writeMultiPolygonGeometry;\n/**\n * @typedef {Object} Options\n * @property {string} [geometryName] Geometry name to use when creating features.\n */\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the EsriJSON format.\n *\n * @api\n */\n\nvar EsriJSON =\n/** @class */\nfunction (_super) {\n  __extends(EsriJSON, _super);\n  /**\n   * @param {Options=} opt_options Options.\n   */\n\n\n  function EsriJSON(opt_options) {\n    var _this = this;\n\n    var options = opt_options ? opt_options : {};\n    _this = _super.call(this) || this;\n    /**\n     * Name of the geometry attribute for features.\n     * @type {string|undefined}\n     * @private\n     */\n\n    _this.geometryName_ = options.geometryName;\n    return _this;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  EsriJSON.prototype.readFeatureFromObject = function (object, opt_options) {\n    var esriJSONFeature =\n    /** @type {EsriJSONFeature} */\n    object;\n    var geometry = readGeometry(esriJSONFeature.geometry, opt_options);\n    var feature = new Feature();\n\n    if (this.geometryName_) {\n      feature.setGeometryName(this.geometryName_);\n    }\n\n    feature.setGeometry(geometry);\n\n    if (opt_options && opt_options.idField && esriJSONFeature.attributes[opt_options.idField]) {\n      feature.setId(\n      /** @type {number} */\n      esriJSONFeature.attributes[opt_options.idField]);\n    }\n\n    if (esriJSONFeature.attributes) {\n      feature.setProperties(esriJSONFeature.attributes, true);\n    }\n\n    return feature;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  EsriJSON.prototype.readFeaturesFromObject = function (object, opt_options) {\n    var options = opt_options ? opt_options : {};\n\n    if (object['features']) {\n      var esriJSONFeatureSet =\n      /** @type {EsriJSONFeatureSet} */\n      object;\n      /** @type {Array<import(\"../Feature.js\").default>} */\n\n      var features = [];\n      var esriJSONFeatures = esriJSONFeatureSet.features;\n      options.idField = object.objectIdFieldName;\n\n      for (var i = 0, ii = esriJSONFeatures.length; i < ii; ++i) {\n        features.push(this.readFeatureFromObject(esriJSONFeatures[i], options));\n      }\n\n      return features;\n    } else {\n      return [this.readFeatureFromObject(object, options)];\n    }\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  EsriJSON.prototype.readGeometryFromObject = function (object, opt_options) {\n    return readGeometry(\n    /** @type {EsriJSONGeometry} */\n    object, opt_options);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  EsriJSON.prototype.readProjectionFromObject = function (object) {\n    if (object['spatialReference'] && object['spatialReference']['wkid'] !== undefined) {\n      var spatialReference =\n      /** @type {EsriJSONSpatialReferenceWkid} */\n      object['spatialReference'];\n      var crs = spatialReference.wkid;\n      return getProjection('EPSG:' + crs);\n    } else {\n      return null;\n    }\n  };\n  /**\n   * Encode a geometry as a EsriJSON object.\n   *\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n   * @return {EsriJSONGeometry} Object.\n   * @override\n   * @api\n   */\n\n\n  EsriJSON.prototype.writeGeometryObject = function (geometry, opt_options) {\n    return writeGeometry(geometry, this.adaptOptions(opt_options));\n  };\n  /**\n   * Encode a feature as a esriJSON Feature object.\n   *\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n   * @return {Object} Object.\n   * @override\n   * @api\n   */\n\n\n  EsriJSON.prototype.writeFeatureObject = function (feature, opt_options) {\n    opt_options = this.adaptOptions(opt_options);\n    var object = {};\n    var geometry = feature.getGeometry();\n\n    if (geometry) {\n      object['geometry'] = writeGeometry(geometry, opt_options);\n\n      if (opt_options && opt_options.featureProjection) {\n        object['geometry']['spatialReference'] =\n        /** @type {EsriJSONSpatialReferenceWkid} */\n        {\n          wkid: Number(getProjection(opt_options.featureProjection).getCode().split(':').pop())\n        };\n      }\n    }\n\n    var properties = feature.getProperties();\n    delete properties[feature.getGeometryName()];\n\n    if (!isEmpty(properties)) {\n      object['attributes'] = properties;\n    } else {\n      object['attributes'] = {};\n    }\n\n    return object;\n  };\n  /**\n   * Encode an array of features as a EsriJSON object.\n   *\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n   * @return {EsriJSONFeatureSet} EsriJSON Object.\n   * @override\n   * @api\n   */\n\n\n  EsriJSON.prototype.writeFeaturesObject = function (features, opt_options) {\n    opt_options = this.adaptOptions(opt_options);\n    var objects = [];\n\n    for (var i = 0, ii = features.length; i < ii; ++i) {\n      objects.push(this.writeFeatureObject(features[i], opt_options));\n    }\n\n    return {\n      'features': objects\n    };\n  };\n\n  return EsriJSON;\n}(JSONFeature);\n/**\n * @param {EsriJSONGeometry} object Object.\n * @param {import(\"./Feature.js\").ReadOptions=} opt_options Read options.\n * @return {import(\"../geom/Geometry.js\").default} Geometry.\n */\n\n\nfunction readGeometry(object, opt_options) {\n  var _a, _b;\n\n  if (!object) {\n    return null;\n  }\n  /** @type {import(\"../geom/GeometryType.js\").default} */\n\n\n  var type;\n\n  if (typeof object['x'] === 'number' && typeof object['y'] === 'number') {\n    type = GeometryType.POINT;\n  } else if (object['points']) {\n    type = GeometryType.MULTI_POINT;\n  } else if (object['paths']) {\n    var esriJSONPolyline =\n    /** @type {EsriJSONPolyline} */\n    object;\n\n    if (esriJSONPolyline.paths.length === 1) {\n      type = GeometryType.LINE_STRING;\n    } else {\n      type = GeometryType.MULTI_LINE_STRING;\n    }\n  } else if (object['rings']) {\n    var esriJSONPolygon =\n    /** @type {EsriJSONPolygon} */\n    object;\n    var layout = getGeometryLayout(esriJSONPolygon);\n    var rings = convertRings(esriJSONPolygon.rings, layout);\n\n    if (rings.length === 1) {\n      type = GeometryType.POLYGON;\n      object = Object.assign({}, object, (_a = {}, _a['rings'] = rings[0], _a));\n    } else {\n      type = GeometryType.MULTI_POLYGON;\n      object = Object.assign({}, object, (_b = {}, _b['rings'] = rings, _b));\n    }\n  }\n\n  var geometryReader = GEOMETRY_READERS[type];\n  return transformGeometryWithOptions(geometryReader(object), false, opt_options);\n}\n/**\n * Determines inner and outer rings.\n * Checks if any polygons in this array contain any other polygons in this\n * array. It is used for checking for holes.\n * Logic inspired by: https://github.com/Esri/terraformer-arcgis-parser\n * @param {Array<!Array<!Array<number>>>} rings Rings.\n * @param {import(\"../geom/GeometryLayout.js\").default} layout Geometry layout.\n * @return {Array<!Array<!Array<!Array<number>>>>} Transformed rings.\n */\n\n\nfunction convertRings(rings, layout) {\n  var flatRing = [];\n  var outerRings = [];\n  var holes = [];\n  var i, ii;\n\n  for (i = 0, ii = rings.length; i < ii; ++i) {\n    flatRing.length = 0;\n    deflateCoordinates(flatRing, 0, rings[i], layout.length); // is this ring an outer ring? is it clockwise?\n\n    var clockwise = linearRingIsClockwise(flatRing, 0, flatRing.length, layout.length);\n\n    if (clockwise) {\n      outerRings.push([rings[i]]);\n    } else {\n      holes.push(rings[i]);\n    }\n  }\n\n  while (holes.length) {\n    var hole = holes.shift();\n    var matched = false; // loop over all outer rings and see if they contain our hole.\n\n    for (i = outerRings.length - 1; i >= 0; i--) {\n      var outerRing = outerRings[i][0];\n      var containsHole = containsExtent(new LinearRing(outerRing).getExtent(), new LinearRing(hole).getExtent());\n\n      if (containsHole) {\n        // the hole is contained push it into our polygon\n        outerRings[i].push(hole);\n        matched = true;\n        break;\n      }\n    }\n\n    if (!matched) {\n      // no outer rings contain this hole turn it into and outer\n      // ring (reverse it)\n      outerRings.push([hole.reverse()]);\n    }\n  }\n\n  return outerRings;\n}\n/**\n * @param {EsriJSONPoint} object Object.\n * @return {import(\"../geom/Geometry.js\").default} Point.\n */\n\n\nfunction readPointGeometry(object) {\n  var point;\n\n  if (object.m !== undefined && object.z !== undefined) {\n    point = new Point([object.x, object.y, object.z, object.m], GeometryLayout.XYZM);\n  } else if (object.z !== undefined) {\n    point = new Point([object.x, object.y, object.z], GeometryLayout.XYZ);\n  } else if (object.m !== undefined) {\n    point = new Point([object.x, object.y, object.m], GeometryLayout.XYM);\n  } else {\n    point = new Point([object.x, object.y]);\n  }\n\n  return point;\n}\n/**\n * @param {EsriJSONPolyline} object Object.\n * @return {import(\"../geom/Geometry.js\").default} LineString.\n */\n\n\nfunction readLineStringGeometry(object) {\n  var layout = getGeometryLayout(object);\n  return new LineString(object.paths[0], layout);\n}\n/**\n * @param {EsriJSONPolyline} object Object.\n * @return {import(\"../geom/Geometry.js\").default} MultiLineString.\n */\n\n\nfunction readMultiLineStringGeometry(object) {\n  var layout = getGeometryLayout(object);\n  return new MultiLineString(object.paths, layout);\n}\n/**\n * @param {EsriJSONHasZM} object Object.\n * @return {import(\"../geom/GeometryLayout.js\").default} The geometry layout to use.\n */\n\n\nfunction getGeometryLayout(object) {\n  var layout = GeometryLayout.XY;\n\n  if (object.hasZ === true && object.hasM === true) {\n    layout = GeometryLayout.XYZM;\n  } else if (object.hasZ === true) {\n    layout = GeometryLayout.XYZ;\n  } else if (object.hasM === true) {\n    layout = GeometryLayout.XYM;\n  }\n\n  return layout;\n}\n/**\n * @param {EsriJSONMultipoint} object Object.\n * @return {import(\"../geom/Geometry.js\").default} MultiPoint.\n */\n\n\nfunction readMultiPointGeometry(object) {\n  var layout = getGeometryLayout(object);\n  return new MultiPoint(object.points, layout);\n}\n/**\n * @param {EsriJSONMultiPolygon} object Object.\n * @return {import(\"../geom/Geometry.js\").default} MultiPolygon.\n */\n\n\nfunction readMultiPolygonGeometry(object) {\n  var layout = getGeometryLayout(object);\n  return new MultiPolygon(object.rings, layout);\n}\n/**\n * @param {EsriJSONPolygon} object Object.\n * @return {import(\"../geom/Geometry.js\").default} Polygon.\n */\n\n\nfunction readPolygonGeometry(object) {\n  var layout = getGeometryLayout(object);\n  return new Polygon(object.rings, layout);\n}\n/**\n * @param {import(\"../geom/Point.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n * @return {EsriJSONPoint} EsriJSON geometry.\n */\n\n\nfunction writePointGeometry(geometry, opt_options) {\n  var coordinates = geometry.getCoordinates();\n  /** @type {EsriJSONPoint} */\n\n  var esriJSON;\n  var layout = geometry.getLayout();\n\n  if (layout === GeometryLayout.XYZ) {\n    esriJSON = {\n      x: coordinates[0],\n      y: coordinates[1],\n      z: coordinates[2]\n    };\n  } else if (layout === GeometryLayout.XYM) {\n    esriJSON = {\n      x: coordinates[0],\n      y: coordinates[1],\n      m: coordinates[2]\n    };\n  } else if (layout === GeometryLayout.XYZM) {\n    esriJSON = {\n      x: coordinates[0],\n      y: coordinates[1],\n      z: coordinates[2],\n      m: coordinates[3]\n    };\n  } else if (layout === GeometryLayout.XY) {\n    esriJSON = {\n      x: coordinates[0],\n      y: coordinates[1]\n    };\n  } else {\n    assert(false, 34); // Invalid geometry layout\n  }\n\n  return esriJSON;\n}\n/**\n * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n * @return {Object} Object with boolean hasZ and hasM keys.\n */\n\n\nfunction getHasZM(geometry) {\n  var layout = geometry.getLayout();\n  return {\n    hasZ: layout === GeometryLayout.XYZ || layout === GeometryLayout.XYZM,\n    hasM: layout === GeometryLayout.XYM || layout === GeometryLayout.XYZM\n  };\n}\n/**\n * @param {import(\"../geom/LineString.js\").default} lineString Geometry.\n * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n * @return {EsriJSONPolyline} EsriJSON geometry.\n */\n\n\nfunction writeLineStringGeometry(lineString, opt_options) {\n  var hasZM = getHasZM(lineString);\n  return {\n    hasZ: hasZM.hasZ,\n    hasM: hasZM.hasM,\n    paths: [\n    /** @type {Array<EsriJSONPosition>} */\n    lineString.getCoordinates()]\n  };\n}\n/**\n * @param {import(\"../geom/Polygon.js\").default} polygon Geometry.\n * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n * @return {EsriJSONPolygon} EsriJSON geometry.\n */\n\n\nfunction writePolygonGeometry(polygon, opt_options) {\n  // Esri geometries use the left-hand rule\n  var hasZM = getHasZM(polygon);\n  return {\n    hasZ: hasZM.hasZ,\n    hasM: hasZM.hasM,\n    rings:\n    /** @type {Array<Array<EsriJSONPosition>>} */\n    polygon.getCoordinates(false)\n  };\n}\n/**\n * @param {import(\"../geom/MultiLineString.js\").default} multiLineString Geometry.\n * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n * @return {EsriJSONPolyline} EsriJSON geometry.\n */\n\n\nfunction writeMultiLineStringGeometry(multiLineString, opt_options) {\n  var hasZM = getHasZM(multiLineString);\n  return {\n    hasZ: hasZM.hasZ,\n    hasM: hasZM.hasM,\n    paths:\n    /** @type {Array<Array<EsriJSONPosition>>} */\n    multiLineString.getCoordinates()\n  };\n}\n/**\n * @param {import(\"../geom/MultiPoint.js\").default} multiPoint Geometry.\n * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n * @return {EsriJSONMultipoint} EsriJSON geometry.\n */\n\n\nfunction writeMultiPointGeometry(multiPoint, opt_options) {\n  var hasZM = getHasZM(multiPoint);\n  return {\n    hasZ: hasZM.hasZ,\n    hasM: hasZM.hasM,\n    points:\n    /** @type {Array<EsriJSONPosition>} */\n    multiPoint.getCoordinates()\n  };\n}\n/**\n * @param {import(\"../geom/MultiPolygon.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n * @return {EsriJSONPolygon} EsriJSON geometry.\n */\n\n\nfunction writeMultiPolygonGeometry(geometry, opt_options) {\n  var hasZM = getHasZM(geometry);\n  var coordinates = geometry.getCoordinates(false);\n  var output = [];\n\n  for (var i = 0; i < coordinates.length; i++) {\n    for (var x = coordinates[i].length - 1; x >= 0; x--) {\n      output.push(coordinates[i][x]);\n    }\n  }\n\n  return {\n    hasZ: hasZM.hasZ,\n    hasM: hasZM.hasM,\n    rings:\n    /** @type {Array<Array<EsriJSONPosition>>} */\n    output\n  };\n}\n/**\n * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n * @return {EsriJSONGeometry} EsriJSON geometry.\n */\n\n\nfunction writeGeometry(geometry, opt_options) {\n  var geometryWriter = GEOMETRY_WRITERS[geometry.getType()];\n  return geometryWriter(transformGeometryWithOptions(geometry, true, opt_options), opt_options);\n}\n\nexport default EsriJSON;","map":{"version":3,"sources":["../src/format/EsriJSON.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/format/EsriJSON\n */\nimport Feature from '../Feature.js';\nimport { assert } from '../asserts.js';\nimport { containsExtent } from '../extent.js';\nimport { transformGeometryWithOptions } from './Feature.js';\nimport JSONFeature from './JSONFeature.js';\nimport GeometryLayout from '../geom/GeometryLayout.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport LineString from '../geom/LineString.js';\nimport LinearRing from '../geom/LinearRing.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Point from '../geom/Point.js';\nimport Polygon from '../geom/Polygon.js';\nimport { deflateCoordinates } from '../geom/flat/deflate.js';\nimport { linearRingIsClockwise } from '../geom/flat/orient.js';\nimport { isEmpty } from '../obj.js';\nimport { get as getProjection } from '../proj.js';\n/**\n * @typedef {import(\"arcgis-rest-api\").Feature} EsriJSONFeature\n * @typedef {import(\"arcgis-rest-api\").FeatureSet} EsriJSONFeatureSet\n * @typedef {import(\"arcgis-rest-api\").Geometry} EsriJSONGeometry\n * @typedef {import(\"arcgis-rest-api\").Point} EsriJSONPoint\n * @typedef {import(\"arcgis-rest-api\").Polyline} EsriJSONPolyline\n * @typedef {import(\"arcgis-rest-api\").Polygon} EsriJSONPolygon\n * @typedef {import(\"arcgis-rest-api\").Multipoint} EsriJSONMultipoint\n * @typedef {import(\"arcgis-rest-api\").HasZM} EsriJSONHasZM\n * @typedef {import(\"arcgis-rest-api\").Position} EsriJSONPosition\n * @typedef {import(\"arcgis-rest-api\").SpatialReferenceWkid} EsriJSONSpatialReferenceWkid\n */\n/**\n * @typedef {Object} EsriJSONMultiPolygon\n * @property {Array<Array<Array<Array<number>>>>} rings Rings for the MultiPolygon.\n * @property {boolean} [hasM] If the polygon coordinates have an M value.\n * @property {boolean} [hasZ] If the polygon coordinates have a Z value.\n * @property {EsriJSONSpatialReferenceWkid} [spatialReference] The coordinate reference system.\n */\n/**\n * @const\n * @type {Object<import(\"../geom/GeometryType.js\").default, function(EsriJSONGeometry): import(\"../geom/Geometry.js\").default>}\n */\nvar GEOMETRY_READERS = {};\nGEOMETRY_READERS[GeometryType.POINT] = readPointGeometry;\nGEOMETRY_READERS[GeometryType.LINE_STRING] = readLineStringGeometry;\nGEOMETRY_READERS[GeometryType.POLYGON] = readPolygonGeometry;\nGEOMETRY_READERS[GeometryType.MULTI_POINT] = readMultiPointGeometry;\nGEOMETRY_READERS[GeometryType.MULTI_LINE_STRING] = readMultiLineStringGeometry;\nGEOMETRY_READERS[GeometryType.MULTI_POLYGON] = readMultiPolygonGeometry;\n/**\n * @const\n * @type {Object<string, function(import(\"../geom/Geometry.js\").default, import(\"./Feature.js\").WriteOptions=): (EsriJSONGeometry)>}\n */\nvar GEOMETRY_WRITERS = {};\nGEOMETRY_WRITERS[GeometryType.POINT] = writePointGeometry;\nGEOMETRY_WRITERS[GeometryType.LINE_STRING] = writeLineStringGeometry;\nGEOMETRY_WRITERS[GeometryType.POLYGON] = writePolygonGeometry;\nGEOMETRY_WRITERS[GeometryType.MULTI_POINT] = writeMultiPointGeometry;\nGEOMETRY_WRITERS[GeometryType.MULTI_LINE_STRING] = writeMultiLineStringGeometry;\nGEOMETRY_WRITERS[GeometryType.MULTI_POLYGON] = writeMultiPolygonGeometry;\n/**\n * @typedef {Object} Options\n * @property {string} [geometryName] Geometry name to use when creating features.\n */\n/**\n * @classdesc\n * Feature format for reading and writing data in the EsriJSON format.\n *\n * @api\n */\nvar EsriJSON = /** @class */ (function (_super) {\n    __extends(EsriJSON, _super);\n    /**\n     * @param {Options=} opt_options Options.\n     */\n    function EsriJSON(opt_options) {\n        var _this = this;\n        var options = opt_options ? opt_options : {};\n        _this = _super.call(this) || this;\n        /**\n         * Name of the geometry attribute for features.\n         * @type {string|undefined}\n         * @private\n         */\n        _this.geometryName_ = options.geometryName;\n        return _this;\n    }\n    /**\n     * @inheritDoc\n     */\n    EsriJSON.prototype.readFeatureFromObject = function (object, opt_options) {\n        var esriJSONFeature = /** @type {EsriJSONFeature} */ (object);\n        var geometry = readGeometry(esriJSONFeature.geometry, opt_options);\n        var feature = new Feature();\n        if (this.geometryName_) {\n            feature.setGeometryName(this.geometryName_);\n        }\n        feature.setGeometry(geometry);\n        if (opt_options && opt_options.idField &&\n            esriJSONFeature.attributes[opt_options.idField]) {\n            feature.setId(/** @type {number} */ (esriJSONFeature.attributes[opt_options.idField]));\n        }\n        if (esriJSONFeature.attributes) {\n            feature.setProperties(esriJSONFeature.attributes, true);\n        }\n        return feature;\n    };\n    /**\n     * @inheritDoc\n     */\n    EsriJSON.prototype.readFeaturesFromObject = function (object, opt_options) {\n        var options = opt_options ? opt_options : {};\n        if (object['features']) {\n            var esriJSONFeatureSet = /** @type {EsriJSONFeatureSet} */ (object);\n            /** @type {Array<import(\"../Feature.js\").default>} */\n            var features = [];\n            var esriJSONFeatures = esriJSONFeatureSet.features;\n            options.idField = object.objectIdFieldName;\n            for (var i = 0, ii = esriJSONFeatures.length; i < ii; ++i) {\n                features.push(this.readFeatureFromObject(esriJSONFeatures[i], options));\n            }\n            return features;\n        }\n        else {\n            return [this.readFeatureFromObject(object, options)];\n        }\n    };\n    /**\n     * @inheritDoc\n     */\n    EsriJSON.prototype.readGeometryFromObject = function (object, opt_options) {\n        return readGeometry(/** @type {EsriJSONGeometry} */ (object), opt_options);\n    };\n    /**\n     * @inheritDoc\n     */\n    EsriJSON.prototype.readProjectionFromObject = function (object) {\n        if (object['spatialReference'] && object['spatialReference']['wkid'] !== undefined) {\n            var spatialReference = /** @type {EsriJSONSpatialReferenceWkid} */ (object['spatialReference']);\n            var crs = spatialReference.wkid;\n            return getProjection('EPSG:' + crs);\n        }\n        else {\n            return null;\n        }\n    };\n    /**\n     * Encode a geometry as a EsriJSON object.\n     *\n     * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n     * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n     * @return {EsriJSONGeometry} Object.\n     * @override\n     * @api\n     */\n    EsriJSON.prototype.writeGeometryObject = function (geometry, opt_options) {\n        return writeGeometry(geometry, this.adaptOptions(opt_options));\n    };\n    /**\n     * Encode a feature as a esriJSON Feature object.\n     *\n     * @param {import(\"../Feature.js\").default} feature Feature.\n     * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n     * @return {Object} Object.\n     * @override\n     * @api\n     */\n    EsriJSON.prototype.writeFeatureObject = function (feature, opt_options) {\n        opt_options = this.adaptOptions(opt_options);\n        var object = {};\n        var geometry = feature.getGeometry();\n        if (geometry) {\n            object['geometry'] = writeGeometry(geometry, opt_options);\n            if (opt_options && opt_options.featureProjection) {\n                object['geometry']['spatialReference'] = /** @type {EsriJSONSpatialReferenceWkid} */ ({\n                    wkid: Number(getProjection(opt_options.featureProjection).getCode().split(':').pop())\n                });\n            }\n        }\n        var properties = feature.getProperties();\n        delete properties[feature.getGeometryName()];\n        if (!isEmpty(properties)) {\n            object['attributes'] = properties;\n        }\n        else {\n            object['attributes'] = {};\n        }\n        return object;\n    };\n    /**\n     * Encode an array of features as a EsriJSON object.\n     *\n     * @param {Array<import(\"../Feature.js\").default>} features Features.\n     * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n     * @return {EsriJSONFeatureSet} EsriJSON Object.\n     * @override\n     * @api\n     */\n    EsriJSON.prototype.writeFeaturesObject = function (features, opt_options) {\n        opt_options = this.adaptOptions(opt_options);\n        var objects = [];\n        for (var i = 0, ii = features.length; i < ii; ++i) {\n            objects.push(this.writeFeatureObject(features[i], opt_options));\n        }\n        return {\n            'features': objects\n        };\n    };\n    return EsriJSON;\n}(JSONFeature));\n/**\n * @param {EsriJSONGeometry} object Object.\n * @param {import(\"./Feature.js\").ReadOptions=} opt_options Read options.\n * @return {import(\"../geom/Geometry.js\").default} Geometry.\n */\nfunction readGeometry(object, opt_options) {\n    var _a, _b;\n    if (!object) {\n        return null;\n    }\n    /** @type {import(\"../geom/GeometryType.js\").default} */\n    var type;\n    if (typeof object['x'] === 'number' && typeof object['y'] === 'number') {\n        type = GeometryType.POINT;\n    }\n    else if (object['points']) {\n        type = GeometryType.MULTI_POINT;\n    }\n    else if (object['paths']) {\n        var esriJSONPolyline = /** @type {EsriJSONPolyline} */ (object);\n        if (esriJSONPolyline.paths.length === 1) {\n            type = GeometryType.LINE_STRING;\n        }\n        else {\n            type = GeometryType.MULTI_LINE_STRING;\n        }\n    }\n    else if (object['rings']) {\n        var esriJSONPolygon = /** @type {EsriJSONPolygon} */ (object);\n        var layout = getGeometryLayout(esriJSONPolygon);\n        var rings = convertRings(esriJSONPolygon.rings, layout);\n        if (rings.length === 1) {\n            type = GeometryType.POLYGON;\n            object = Object.assign({}, object, (_a = {}, _a['rings'] = rings[0], _a));\n        }\n        else {\n            type = GeometryType.MULTI_POLYGON;\n            object = Object.assign({}, object, (_b = {}, _b['rings'] = rings, _b));\n        }\n    }\n    var geometryReader = GEOMETRY_READERS[type];\n    return transformGeometryWithOptions(geometryReader(object), false, opt_options);\n}\n/**\n * Determines inner and outer rings.\n * Checks if any polygons in this array contain any other polygons in this\n * array. It is used for checking for holes.\n * Logic inspired by: https://github.com/Esri/terraformer-arcgis-parser\n * @param {Array<!Array<!Array<number>>>} rings Rings.\n * @param {import(\"../geom/GeometryLayout.js\").default} layout Geometry layout.\n * @return {Array<!Array<!Array<!Array<number>>>>} Transformed rings.\n */\nfunction convertRings(rings, layout) {\n    var flatRing = [];\n    var outerRings = [];\n    var holes = [];\n    var i, ii;\n    for (i = 0, ii = rings.length; i < ii; ++i) {\n        flatRing.length = 0;\n        deflateCoordinates(flatRing, 0, rings[i], layout.length);\n        // is this ring an outer ring? is it clockwise?\n        var clockwise = linearRingIsClockwise(flatRing, 0, flatRing.length, layout.length);\n        if (clockwise) {\n            outerRings.push([rings[i]]);\n        }\n        else {\n            holes.push(rings[i]);\n        }\n    }\n    while (holes.length) {\n        var hole = holes.shift();\n        var matched = false;\n        // loop over all outer rings and see if they contain our hole.\n        for (i = outerRings.length - 1; i >= 0; i--) {\n            var outerRing = outerRings[i][0];\n            var containsHole = containsExtent(new LinearRing(outerRing).getExtent(), new LinearRing(hole).getExtent());\n            if (containsHole) {\n                // the hole is contained push it into our polygon\n                outerRings[i].push(hole);\n                matched = true;\n                break;\n            }\n        }\n        if (!matched) {\n            // no outer rings contain this hole turn it into and outer\n            // ring (reverse it)\n            outerRings.push([hole.reverse()]);\n        }\n    }\n    return outerRings;\n}\n/**\n * @param {EsriJSONPoint} object Object.\n * @return {import(\"../geom/Geometry.js\").default} Point.\n */\nfunction readPointGeometry(object) {\n    var point;\n    if (object.m !== undefined && object.z !== undefined) {\n        point = new Point([object.x, object.y, object.z, object.m], GeometryLayout.XYZM);\n    }\n    else if (object.z !== undefined) {\n        point = new Point([object.x, object.y, object.z], GeometryLayout.XYZ);\n    }\n    else if (object.m !== undefined) {\n        point = new Point([object.x, object.y, object.m], GeometryLayout.XYM);\n    }\n    else {\n        point = new Point([object.x, object.y]);\n    }\n    return point;\n}\n/**\n * @param {EsriJSONPolyline} object Object.\n * @return {import(\"../geom/Geometry.js\").default} LineString.\n */\nfunction readLineStringGeometry(object) {\n    var layout = getGeometryLayout(object);\n    return new LineString(object.paths[0], layout);\n}\n/**\n * @param {EsriJSONPolyline} object Object.\n * @return {import(\"../geom/Geometry.js\").default} MultiLineString.\n */\nfunction readMultiLineStringGeometry(object) {\n    var layout = getGeometryLayout(object);\n    return new MultiLineString(object.paths, layout);\n}\n/**\n * @param {EsriJSONHasZM} object Object.\n * @return {import(\"../geom/GeometryLayout.js\").default} The geometry layout to use.\n */\nfunction getGeometryLayout(object) {\n    var layout = GeometryLayout.XY;\n    if (object.hasZ === true && object.hasM === true) {\n        layout = GeometryLayout.XYZM;\n    }\n    else if (object.hasZ === true) {\n        layout = GeometryLayout.XYZ;\n    }\n    else if (object.hasM === true) {\n        layout = GeometryLayout.XYM;\n    }\n    return layout;\n}\n/**\n * @param {EsriJSONMultipoint} object Object.\n * @return {import(\"../geom/Geometry.js\").default} MultiPoint.\n */\nfunction readMultiPointGeometry(object) {\n    var layout = getGeometryLayout(object);\n    return new MultiPoint(object.points, layout);\n}\n/**\n * @param {EsriJSONMultiPolygon} object Object.\n * @return {import(\"../geom/Geometry.js\").default} MultiPolygon.\n */\nfunction readMultiPolygonGeometry(object) {\n    var layout = getGeometryLayout(object);\n    return new MultiPolygon(object.rings, layout);\n}\n/**\n * @param {EsriJSONPolygon} object Object.\n * @return {import(\"../geom/Geometry.js\").default} Polygon.\n */\nfunction readPolygonGeometry(object) {\n    var layout = getGeometryLayout(object);\n    return new Polygon(object.rings, layout);\n}\n/**\n * @param {import(\"../geom/Point.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n * @return {EsriJSONPoint} EsriJSON geometry.\n */\nfunction writePointGeometry(geometry, opt_options) {\n    var coordinates = geometry.getCoordinates();\n    /** @type {EsriJSONPoint} */\n    var esriJSON;\n    var layout = geometry.getLayout();\n    if (layout === GeometryLayout.XYZ) {\n        esriJSON = {\n            x: coordinates[0],\n            y: coordinates[1],\n            z: coordinates[2]\n        };\n    }\n    else if (layout === GeometryLayout.XYM) {\n        esriJSON = {\n            x: coordinates[0],\n            y: coordinates[1],\n            m: coordinates[2]\n        };\n    }\n    else if (layout === GeometryLayout.XYZM) {\n        esriJSON = {\n            x: coordinates[0],\n            y: coordinates[1],\n            z: coordinates[2],\n            m: coordinates[3]\n        };\n    }\n    else if (layout === GeometryLayout.XY) {\n        esriJSON = {\n            x: coordinates[0],\n            y: coordinates[1]\n        };\n    }\n    else {\n        assert(false, 34); // Invalid geometry layout\n    }\n    return esriJSON;\n}\n/**\n * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n * @return {Object} Object with boolean hasZ and hasM keys.\n */\nfunction getHasZM(geometry) {\n    var layout = geometry.getLayout();\n    return {\n        hasZ: (layout === GeometryLayout.XYZ ||\n            layout === GeometryLayout.XYZM),\n        hasM: (layout === GeometryLayout.XYM ||\n            layout === GeometryLayout.XYZM)\n    };\n}\n/**\n * @param {import(\"../geom/LineString.js\").default} lineString Geometry.\n * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n * @return {EsriJSONPolyline} EsriJSON geometry.\n */\nfunction writeLineStringGeometry(lineString, opt_options) {\n    var hasZM = getHasZM(lineString);\n    return {\n        hasZ: hasZM.hasZ,\n        hasM: hasZM.hasM,\n        paths: [\n            /** @type {Array<EsriJSONPosition>} */ (lineString.getCoordinates())\n        ]\n    };\n}\n/**\n * @param {import(\"../geom/Polygon.js\").default} polygon Geometry.\n * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n * @return {EsriJSONPolygon} EsriJSON geometry.\n */\nfunction writePolygonGeometry(polygon, opt_options) {\n    // Esri geometries use the left-hand rule\n    var hasZM = getHasZM(polygon);\n    return {\n        hasZ: hasZM.hasZ,\n        hasM: hasZM.hasM,\n        rings: /** @type {Array<Array<EsriJSONPosition>>} */ (polygon.getCoordinates(false))\n    };\n}\n/**\n * @param {import(\"../geom/MultiLineString.js\").default} multiLineString Geometry.\n * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n * @return {EsriJSONPolyline} EsriJSON geometry.\n */\nfunction writeMultiLineStringGeometry(multiLineString, opt_options) {\n    var hasZM = getHasZM(multiLineString);\n    return {\n        hasZ: hasZM.hasZ,\n        hasM: hasZM.hasM,\n        paths: /** @type {Array<Array<EsriJSONPosition>>} */ (multiLineString.getCoordinates())\n    };\n}\n/**\n * @param {import(\"../geom/MultiPoint.js\").default} multiPoint Geometry.\n * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n * @return {EsriJSONMultipoint} EsriJSON geometry.\n */\nfunction writeMultiPointGeometry(multiPoint, opt_options) {\n    var hasZM = getHasZM(multiPoint);\n    return {\n        hasZ: hasZM.hasZ,\n        hasM: hasZM.hasM,\n        points: /** @type {Array<EsriJSONPosition>} */ (multiPoint.getCoordinates())\n    };\n}\n/**\n * @param {import(\"../geom/MultiPolygon.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n * @return {EsriJSONPolygon} EsriJSON geometry.\n */\nfunction writeMultiPolygonGeometry(geometry, opt_options) {\n    var hasZM = getHasZM(geometry);\n    var coordinates = geometry.getCoordinates(false);\n    var output = [];\n    for (var i = 0; i < coordinates.length; i++) {\n        for (var x = coordinates[i].length - 1; x >= 0; x--) {\n            output.push(coordinates[i][x]);\n        }\n    }\n    return {\n        hasZ: hasZM.hasZ,\n        hasM: hasZM.hasM,\n        rings: /** @type {Array<Array<EsriJSONPosition>>} */ (output)\n    };\n}\n/**\n * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n * @return {EsriJSONGeometry} EsriJSON geometry.\n */\nfunction writeGeometry(geometry, opt_options) {\n    var geometryWriter = GEOMETRY_WRITERS[geometry.getType()];\n    return geometryWriter(transformGeometryWithOptions(geometry, true, opt_options), opt_options);\n}\nexport default EsriJSON;\n//# sourceMappingURL=EsriJSON.js.map"]},"metadata":{},"sourceType":"module"}