{"ast":null,"code":"/**\n * @module ol/source/ImageMapGuide\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport ImageWrapper from '../Image.js';\nimport EventType from '../events/EventType.js';\nimport { containsExtent, getCenter, getHeight, getWidth, scaleFromCenter } from '../extent.js';\nimport { assign } from '../obj.js';\nimport ImageSource, { defaultImageLoadFunction } from './Image.js';\nimport { appendParams } from '../uri.js';\n/**\n * @typedef {Object} Options\n * @property {string} [url] The mapagent url.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {number} [displayDpi=96] The display resolution.\n * @property {number} [metersPerUnit=1] The meters-per-unit value.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {boolean} [useOverlay] If `true`, will use `GETDYNAMICMAPOVERLAYIMAGE`.\n * @property {import(\"../proj.js\").ProjectionLike} projection Projection.\n * @property {number} [ratio=1] Ratio. `1` means image requests are the size of the map viewport, `2` means\n * twice the width and height of the map viewport, and so on. Must be `1` or higher.\n * @property {Array<number>} [resolutions] Resolutions.\n * If specified, requests will be made for these resolutions only.\n * @property {import(\"../Image.js\").LoadFunction} [imageLoadFunction] Optional function to load an image given a URL.\n * @property {Object} [params] Additional parameters.\n */\n\n/**\n * @classdesc\n * Source for images from Mapguide servers\n *\n * @fires module:ol/source/Image.ImageSourceEvent\n * @api\n */\n\nvar ImageMapGuide =\n/** @class */\nfunction (_super) {\n  __extends(ImageMapGuide, _super);\n  /**\n   * @param {Options} options ImageMapGuide options.\n   */\n\n\n  function ImageMapGuide(options) {\n    var _this = _super.call(this, {\n      projection: options.projection,\n      resolutions: options.resolutions\n    }) || this;\n    /**\n     * @private\n     * @type {?string}\n     */\n\n\n    _this.crossOrigin_ = options.crossOrigin !== undefined ? options.crossOrigin : null;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.displayDpi_ = options.displayDpi !== undefined ? options.displayDpi : 96;\n    /**\n     * @private\n     * @type {!Object}\n     */\n\n    _this.params_ = options.params || {};\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n\n    _this.url_ = options.url;\n    /**\n     * @private\n     * @type {import(\"../Image.js\").LoadFunction}\n     */\n\n    _this.imageLoadFunction_ = options.imageLoadFunction !== undefined ? options.imageLoadFunction : defaultImageLoadFunction;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    _this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.metersPerUnit_ = options.metersPerUnit !== undefined ? options.metersPerUnit : 1;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.ratio_ = options.ratio !== undefined ? options.ratio : 1;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    _this.useOverlay_ = options.useOverlay !== undefined ? options.useOverlay : false;\n    /**\n     * @private\n     * @type {import(\"../Image.js\").default}\n     */\n\n    _this.image_ = null;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.renderedRevision_ = 0;\n    return _this;\n  }\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n\n\n  ImageMapGuide.prototype.getParams = function () {\n    return this.params_;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  ImageMapGuide.prototype.getImageInternal = function (extent, resolution, pixelRatio, projection) {\n    resolution = this.findNearestResolution(resolution);\n    pixelRatio = this.hidpi_ ? pixelRatio : 1;\n    var image = this.image_;\n\n    if (image && this.renderedRevision_ == this.getRevision() && image.getResolution() == resolution && image.getPixelRatio() == pixelRatio && containsExtent(image.getExtent(), extent)) {\n      return image;\n    }\n\n    if (this.ratio_ != 1) {\n      extent = extent.slice();\n      scaleFromCenter(extent, this.ratio_);\n    }\n\n    var width = getWidth(extent) / resolution;\n    var height = getHeight(extent) / resolution;\n    var size = [width * pixelRatio, height * pixelRatio];\n\n    if (this.url_ !== undefined) {\n      var imageUrl = this.getUrl(this.url_, this.params_, extent, size, projection);\n      image = new ImageWrapper(extent, resolution, pixelRatio, imageUrl, this.crossOrigin_, this.imageLoadFunction_);\n      image.addEventListener(EventType.CHANGE, this.handleImageChange.bind(this));\n    } else {\n      image = null;\n    }\n\n    this.image_ = image;\n    this.renderedRevision_ = this.getRevision();\n    return image;\n  };\n  /**\n   * Return the image load function of the source.\n   * @return {import(\"../Image.js\").LoadFunction} The image load function.\n   * @api\n   */\n\n\n  ImageMapGuide.prototype.getImageLoadFunction = function () {\n    return this.imageLoadFunction_;\n  };\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n\n\n  ImageMapGuide.prototype.updateParams = function (params) {\n    assign(this.params_, params);\n    this.changed();\n  };\n  /**\n   * @param {string} baseUrl The mapagent url.\n   * @param {Object<string, string|number>} params Request parameters.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {import(\"../size.js\").Size} size Size.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {string} The mapagent map image request URL.\n   */\n\n\n  ImageMapGuide.prototype.getUrl = function (baseUrl, params, extent, size, projection) {\n    var scale = getScale(extent, size, this.metersPerUnit_, this.displayDpi_);\n    var center = getCenter(extent);\n    var baseParams = {\n      'OPERATION': this.useOverlay_ ? 'GETDYNAMICMAPOVERLAYIMAGE' : 'GETMAPIMAGE',\n      'VERSION': '2.0.0',\n      'LOCALE': 'en',\n      'CLIENTAGENT': 'ol/source/ImageMapGuide source',\n      'CLIP': '1',\n      'SETDISPLAYDPI': this.displayDpi_,\n      'SETDISPLAYWIDTH': Math.round(size[0]),\n      'SETDISPLAYHEIGHT': Math.round(size[1]),\n      'SETVIEWSCALE': scale,\n      'SETVIEWCENTERX': center[0],\n      'SETVIEWCENTERY': center[1]\n    };\n    assign(baseParams, params);\n    return appendParams(baseUrl, baseParams);\n  };\n  /**\n   * Set the image load function of the MapGuide source.\n   * @param {import(\"../Image.js\").LoadFunction} imageLoadFunction Image load function.\n   * @api\n   */\n\n\n  ImageMapGuide.prototype.setImageLoadFunction = function (imageLoadFunction) {\n    this.image_ = null;\n    this.imageLoadFunction_ = imageLoadFunction;\n    this.changed();\n  };\n\n  return ImageMapGuide;\n}(ImageSource);\n/**\n * @param {import(\"../extent.js\").Extent} extent The map extents.\n * @param {import(\"../size.js\").Size} size The viewport size.\n * @param {number} metersPerUnit The meters-per-unit value.\n * @param {number} dpi The display resolution.\n * @return {number} The computed map scale.\n */\n\n\nfunction getScale(extent, size, metersPerUnit, dpi) {\n  var mcsW = getWidth(extent);\n  var mcsH = getHeight(extent);\n  var devW = size[0];\n  var devH = size[1];\n  var mpp = 0.0254 / dpi;\n\n  if (devH * mcsW > devW * mcsH) {\n    return mcsW * metersPerUnit / (devW * mpp); // width limited\n  } else {\n    return mcsH * metersPerUnit / (devH * mpp); // height limited\n  }\n}\n\nexport default ImageMapGuide;","map":{"version":3,"sources":["../src/source/ImageMapGuide.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @module ol/source/ImageMapGuide\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport ImageWrapper from '../Image.js';\nimport EventType from '../events/EventType.js';\nimport { containsExtent, getCenter, getHeight, getWidth, scaleFromCenter } from '../extent.js';\nimport { assign } from '../obj.js';\nimport ImageSource, { defaultImageLoadFunction } from './Image.js';\nimport { appendParams } from '../uri.js';\n/**\n * @typedef {Object} Options\n * @property {string} [url] The mapagent url.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {number} [displayDpi=96] The display resolution.\n * @property {number} [metersPerUnit=1] The meters-per-unit value.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {boolean} [useOverlay] If `true`, will use `GETDYNAMICMAPOVERLAYIMAGE`.\n * @property {import(\"../proj.js\").ProjectionLike} projection Projection.\n * @property {number} [ratio=1] Ratio. `1` means image requests are the size of the map viewport, `2` means\n * twice the width and height of the map viewport, and so on. Must be `1` or higher.\n * @property {Array<number>} [resolutions] Resolutions.\n * If specified, requests will be made for these resolutions only.\n * @property {import(\"../Image.js\").LoadFunction} [imageLoadFunction] Optional function to load an image given a URL.\n * @property {Object} [params] Additional parameters.\n */\n/**\n * @classdesc\n * Source for images from Mapguide servers\n *\n * @fires module:ol/source/Image.ImageSourceEvent\n * @api\n */\nvar ImageMapGuide = /** @class */ (function (_super) {\n    __extends(ImageMapGuide, _super);\n    /**\n     * @param {Options} options ImageMapGuide options.\n     */\n    function ImageMapGuide(options) {\n        var _this = _super.call(this, {\n            projection: options.projection,\n            resolutions: options.resolutions\n        }) || this;\n        /**\n         * @private\n         * @type {?string}\n         */\n        _this.crossOrigin_ =\n            options.crossOrigin !== undefined ? options.crossOrigin : null;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.displayDpi_ = options.displayDpi !== undefined ?\n            options.displayDpi : 96;\n        /**\n         * @private\n         * @type {!Object}\n         */\n        _this.params_ = options.params || {};\n        /**\n         * @private\n         * @type {string|undefined}\n         */\n        _this.url_ = options.url;\n        /**\n         * @private\n         * @type {import(\"../Image.js\").LoadFunction}\n         */\n        _this.imageLoadFunction_ = options.imageLoadFunction !== undefined ?\n            options.imageLoadFunction : defaultImageLoadFunction;\n        /**\n         * @private\n         * @type {boolean}\n         */\n        _this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.metersPerUnit_ = options.metersPerUnit !== undefined ?\n            options.metersPerUnit : 1;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.ratio_ = options.ratio !== undefined ? options.ratio : 1;\n        /**\n         * @private\n         * @type {boolean}\n         */\n        _this.useOverlay_ = options.useOverlay !== undefined ?\n            options.useOverlay : false;\n        /**\n         * @private\n         * @type {import(\"../Image.js\").default}\n         */\n        _this.image_ = null;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.renderedRevision_ = 0;\n        return _this;\n    }\n    /**\n     * Get the user-provided params, i.e. those passed to the constructor through\n     * the \"params\" option, and possibly updated using the updateParams method.\n     * @return {Object} Params.\n     * @api\n     */\n    ImageMapGuide.prototype.getParams = function () {\n        return this.params_;\n    };\n    /**\n     * @inheritDoc\n     */\n    ImageMapGuide.prototype.getImageInternal = function (extent, resolution, pixelRatio, projection) {\n        resolution = this.findNearestResolution(resolution);\n        pixelRatio = this.hidpi_ ? pixelRatio : 1;\n        var image = this.image_;\n        if (image &&\n            this.renderedRevision_ == this.getRevision() &&\n            image.getResolution() == resolution &&\n            image.getPixelRatio() == pixelRatio &&\n            containsExtent(image.getExtent(), extent)) {\n            return image;\n        }\n        if (this.ratio_ != 1) {\n            extent = extent.slice();\n            scaleFromCenter(extent, this.ratio_);\n        }\n        var width = getWidth(extent) / resolution;\n        var height = getHeight(extent) / resolution;\n        var size = [width * pixelRatio, height * pixelRatio];\n        if (this.url_ !== undefined) {\n            var imageUrl = this.getUrl(this.url_, this.params_, extent, size, projection);\n            image = new ImageWrapper(extent, resolution, pixelRatio, imageUrl, this.crossOrigin_, this.imageLoadFunction_);\n            image.addEventListener(EventType.CHANGE, this.handleImageChange.bind(this));\n        }\n        else {\n            image = null;\n        }\n        this.image_ = image;\n        this.renderedRevision_ = this.getRevision();\n        return image;\n    };\n    /**\n     * Return the image load function of the source.\n     * @return {import(\"../Image.js\").LoadFunction} The image load function.\n     * @api\n     */\n    ImageMapGuide.prototype.getImageLoadFunction = function () {\n        return this.imageLoadFunction_;\n    };\n    /**\n     * Update the user-provided params.\n     * @param {Object} params Params.\n     * @api\n     */\n    ImageMapGuide.prototype.updateParams = function (params) {\n        assign(this.params_, params);\n        this.changed();\n    };\n    /**\n     * @param {string} baseUrl The mapagent url.\n     * @param {Object<string, string|number>} params Request parameters.\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @param {import(\"../size.js\").Size} size Size.\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @return {string} The mapagent map image request URL.\n     */\n    ImageMapGuide.prototype.getUrl = function (baseUrl, params, extent, size, projection) {\n        var scale = getScale(extent, size, this.metersPerUnit_, this.displayDpi_);\n        var center = getCenter(extent);\n        var baseParams = {\n            'OPERATION': this.useOverlay_ ? 'GETDYNAMICMAPOVERLAYIMAGE' : 'GETMAPIMAGE',\n            'VERSION': '2.0.0',\n            'LOCALE': 'en',\n            'CLIENTAGENT': 'ol/source/ImageMapGuide source',\n            'CLIP': '1',\n            'SETDISPLAYDPI': this.displayDpi_,\n            'SETDISPLAYWIDTH': Math.round(size[0]),\n            'SETDISPLAYHEIGHT': Math.round(size[1]),\n            'SETVIEWSCALE': scale,\n            'SETVIEWCENTERX': center[0],\n            'SETVIEWCENTERY': center[1]\n        };\n        assign(baseParams, params);\n        return appendParams(baseUrl, baseParams);\n    };\n    /**\n     * Set the image load function of the MapGuide source.\n     * @param {import(\"../Image.js\").LoadFunction} imageLoadFunction Image load function.\n     * @api\n     */\n    ImageMapGuide.prototype.setImageLoadFunction = function (imageLoadFunction) {\n        this.image_ = null;\n        this.imageLoadFunction_ = imageLoadFunction;\n        this.changed();\n    };\n    return ImageMapGuide;\n}(ImageSource));\n/**\n * @param {import(\"../extent.js\").Extent} extent The map extents.\n * @param {import(\"../size.js\").Size} size The viewport size.\n * @param {number} metersPerUnit The meters-per-unit value.\n * @param {number} dpi The display resolution.\n * @return {number} The computed map scale.\n */\nfunction getScale(extent, size, metersPerUnit, dpi) {\n    var mcsW = getWidth(extent);\n    var mcsH = getHeight(extent);\n    var devW = size[0];\n    var devH = size[1];\n    var mpp = 0.0254 / dpi;\n    if (devH * mcsW > devW * mcsH) {\n        return mcsW * metersPerUnit / (devW * mpp); // width limited\n    }\n    else {\n        return mcsH * metersPerUnit / (devH * mpp); // height limited\n    }\n}\nexport default ImageMapGuide;\n//# sourceMappingURL=ImageMapGuide.js.map"]},"metadata":{},"sourceType":"module"}