{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/Overlay\n */\n\n\nimport MapEventType from './MapEventType.js';\nimport BaseObject, { getChangeEventType } from './Object.js';\nimport OverlayPositioning from './OverlayPositioning.js';\nimport { CLASS_SELECTABLE } from './css.js';\nimport { removeNode, removeChildren, outerWidth, outerHeight } from './dom.js';\nimport { listen, unlistenByKey } from './events.js';\nimport { containsExtent } from './extent.js';\n/**\n * @typedef {Object} Options\n * @property {number|string} [id] Set the overlay id. The overlay id can be used\n * with the {@link module:ol/Map~Map#getOverlayById} method.\n * @property {HTMLElement} [element] The overlay element.\n * @property {Array<number>} [offset=[0, 0]] Offsets in pixels used when positioning\n * the overlay. The first element in the\n * array is the horizontal offset. A positive value shifts the overlay right.\n * The second element in the array is the vertical offset. A positive value\n * shifts the overlay down.\n * @property {import(\"./coordinate.js\").Coordinate} [position] The overlay position\n * in map projection.\n * @property {OverlayPositioning} [positioning='top-left'] Defines how\n * the overlay is actually positioned with respect to its `position` property.\n * Possible values are `'bottom-left'`, `'bottom-center'`, `'bottom-right'`,\n * `'center-left'`, `'center-center'`, `'center-right'`, `'top-left'`,\n * `'top-center'`, and `'top-right'`.\n * @property {boolean} [stopEvent=true] Whether event propagation to the map\n * viewport should be stopped. If `true` the overlay is placed in the same\n * container as that of the controls (CSS class name\n * `ol-overlaycontainer-stopevent`); if `false` it is placed in the container\n * with CSS class name specified by the `className` property.\n * @property {boolean} [insertFirst=true] Whether the overlay is inserted first\n * in the overlay container, or appended. If the overlay is placed in the same\n * container as that of the controls (see the `stopEvent` option) you will\n * probably set `insertFirst` to `true` so the overlay is displayed below the\n * controls.\n * @property {boolean} [autoPan=false] If set to `true` the map is panned when\n * calling `setPosition`, so that the overlay is entirely visible in the current\n * viewport.\n * @property {PanOptions} [autoPanAnimation] The\n * animation options used to pan the overlay into view. This animation is only\n * used when `autoPan` is enabled. A `duration` and `easing` may be provided to\n * customize the animation.\n * @property {number} [autoPanMargin=20] The margin (in pixels) between the\n * overlay and the borders of the map when autopanning.\n * @property {string} [className='ol-overlay-container ol-selectable'] CSS class\n * name.\n */\n\n/**\n * @typedef {Object} PanOptions\n * @property {number} [duration=1000] The duration of the animation in\n * milliseconds.\n * @property {function(number):number} [easing] The easing function to use. Can\n * be one from {@link module:ol/easing} or a custom function.\n * Default is {@link module:ol/easing~inAndOut}.\n */\n\n/**\n * @enum {string}\n * @protected\n */\n\nvar Property = {\n  ELEMENT: 'element',\n  MAP: 'map',\n  OFFSET: 'offset',\n  POSITION: 'position',\n  POSITIONING: 'positioning'\n};\n/**\n * @classdesc\n * An element to be displayed over the map and attached to a single map\n * location.  Like {@link module:ol/control/Control~Control}, Overlays are\n * visible widgets. Unlike Controls, they are not in a fixed position on the\n * screen, but are tied to a geographical coordinate, so panning the map will\n * move an Overlay but not a Control.\n *\n * Example:\n *\n *     import Overlay from 'ol/Overlay';\n *\n *     var popup = new Overlay({\n *       element: document.getElementById('popup')\n *     });\n *     popup.setPosition(coordinate);\n *     map.addOverlay(popup);\n *\n * @api\n */\n\nvar Overlay =\n/** @class */\nfunction (_super) {\n  __extends(Overlay, _super);\n  /**\n   * @param {Options} options Overlay options.\n   */\n\n\n  function Overlay(options) {\n    var _this = _super.call(this) || this;\n    /**\n     * @protected\n     * @type {Options}\n     */\n\n\n    _this.options = options;\n    /**\n     * @protected\n     * @type {number|string|undefined}\n     */\n\n    _this.id = options.id;\n    /**\n     * @protected\n     * @type {boolean}\n     */\n\n    _this.insertFirst = options.insertFirst !== undefined ? options.insertFirst : true;\n    /**\n     * @protected\n     * @type {boolean}\n     */\n\n    _this.stopEvent = options.stopEvent !== undefined ? options.stopEvent : true;\n    /**\n     * @protected\n     * @type {HTMLElement}\n     */\n\n    _this.element = document.createElement('div');\n    _this.element.className = options.className !== undefined ? options.className : 'ol-overlay-container ' + CLASS_SELECTABLE;\n    _this.element.style.position = 'absolute';\n    /**\n     * @protected\n     * @type {boolean}\n     */\n\n    _this.autoPan = options.autoPan !== undefined ? options.autoPan : false;\n    /**\n     * @protected\n     * @type {PanOptions}\n     */\n\n    _this.autoPanAnimation = options.autoPanAnimation ||\n    /** @type {PanOptions} */\n    {};\n    /**\n     * @protected\n     * @type {number}\n     */\n\n    _this.autoPanMargin = options.autoPanMargin !== undefined ? options.autoPanMargin : 20;\n    /**\n     * @protected\n     * @type {{bottom_: string,\n     *         left_: string,\n     *         right_: string,\n     *         top_: string,\n     *         visible: boolean}}\n     */\n\n    _this.rendered = {\n      bottom_: '',\n      left_: '',\n      right_: '',\n      top_: '',\n      visible: true\n    };\n    /**\n     * @protected\n     * @type {?import(\"./events.js\").EventsKey}\n     */\n\n    _this.mapPostrenderListenerKey = null;\n\n    _this.addEventListener(getChangeEventType(Property.ELEMENT), _this.handleElementChanged);\n\n    _this.addEventListener(getChangeEventType(Property.MAP), _this.handleMapChanged);\n\n    _this.addEventListener(getChangeEventType(Property.OFFSET), _this.handleOffsetChanged);\n\n    _this.addEventListener(getChangeEventType(Property.POSITION), _this.handlePositionChanged);\n\n    _this.addEventListener(getChangeEventType(Property.POSITIONING), _this.handlePositioningChanged);\n\n    if (options.element !== undefined) {\n      _this.setElement(options.element);\n    }\n\n    _this.setOffset(options.offset !== undefined ? options.offset : [0, 0]);\n\n    _this.setPositioning(options.positioning !== undefined ?\n    /** @type {OverlayPositioning} */\n    options.positioning : OverlayPositioning.TOP_LEFT);\n\n    if (options.position !== undefined) {\n      _this.setPosition(options.position);\n    }\n\n    return _this;\n  }\n  /**\n   * Get the DOM element of this overlay.\n   * @return {HTMLElement|undefined} The Element containing the overlay.\n   * @observable\n   * @api\n   */\n\n\n  Overlay.prototype.getElement = function () {\n    return (\n      /** @type {HTMLElement|undefined} */\n      this.get(Property.ELEMENT)\n    );\n  };\n  /**\n   * Get the overlay identifier which is set on constructor.\n   * @return {number|string|undefined} Id.\n   * @api\n   */\n\n\n  Overlay.prototype.getId = function () {\n    return this.id;\n  };\n  /**\n   * Get the map associated with this overlay.\n   * @return {import(\"./PluggableMap.js\").default|undefined} The map that the\n   * overlay is part of.\n   * @observable\n   * @api\n   */\n\n\n  Overlay.prototype.getMap = function () {\n    return (\n      /** @type {import(\"./PluggableMap.js\").default|undefined} */\n      this.get(Property.MAP)\n    );\n  };\n  /**\n   * Get the offset of this overlay.\n   * @return {Array<number>} The offset.\n   * @observable\n   * @api\n   */\n\n\n  Overlay.prototype.getOffset = function () {\n    return (\n      /** @type {Array<number>} */\n      this.get(Property.OFFSET)\n    );\n  };\n  /**\n   * Get the current position of this overlay.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} The spatial point that the overlay is\n   *     anchored at.\n   * @observable\n   * @api\n   */\n\n\n  Overlay.prototype.getPosition = function () {\n    return (\n      /** @type {import(\"./coordinate.js\").Coordinate|undefined} */\n      this.get(Property.POSITION)\n    );\n  };\n  /**\n   * Get the current positioning of this overlay.\n   * @return {OverlayPositioning} How the overlay is positioned\n   *     relative to its point on the map.\n   * @observable\n   * @api\n   */\n\n\n  Overlay.prototype.getPositioning = function () {\n    return (\n      /** @type {OverlayPositioning} */\n      this.get(Property.POSITIONING)\n    );\n  };\n  /**\n   * @protected\n   */\n\n\n  Overlay.prototype.handleElementChanged = function () {\n    removeChildren(this.element);\n    var element = this.getElement();\n\n    if (element) {\n      this.element.appendChild(element);\n    }\n  };\n  /**\n   * @protected\n   */\n\n\n  Overlay.prototype.handleMapChanged = function () {\n    if (this.mapPostrenderListenerKey) {\n      removeNode(this.element);\n      unlistenByKey(this.mapPostrenderListenerKey);\n      this.mapPostrenderListenerKey = null;\n    }\n\n    var map = this.getMap();\n\n    if (map) {\n      this.mapPostrenderListenerKey = listen(map, MapEventType.POSTRENDER, this.render, this);\n      this.updatePixelPosition();\n      var container = this.stopEvent ? map.getOverlayContainerStopEvent() : map.getOverlayContainer();\n\n      if (this.insertFirst) {\n        container.insertBefore(this.element, container.childNodes[0] || null);\n      } else {\n        container.appendChild(this.element);\n      }\n    }\n  };\n  /**\n   * @protected\n   */\n\n\n  Overlay.prototype.render = function () {\n    this.updatePixelPosition();\n  };\n  /**\n   * @protected\n   */\n\n\n  Overlay.prototype.handleOffsetChanged = function () {\n    this.updatePixelPosition();\n  };\n  /**\n   * @protected\n   */\n\n\n  Overlay.prototype.handlePositionChanged = function () {\n    this.updatePixelPosition();\n\n    if (this.get(Property.POSITION) && this.autoPan) {\n      this.panIntoView();\n    }\n  };\n  /**\n   * @protected\n   */\n\n\n  Overlay.prototype.handlePositioningChanged = function () {\n    this.updatePixelPosition();\n  };\n  /**\n   * Set the DOM element to be associated with this overlay.\n   * @param {HTMLElement|undefined} element The Element containing the overlay.\n   * @observable\n   * @api\n   */\n\n\n  Overlay.prototype.setElement = function (element) {\n    this.set(Property.ELEMENT, element);\n  };\n  /**\n   * Set the map to be associated with this overlay.\n   * @param {import(\"./PluggableMap.js\").default|undefined} map The map that the\n   * overlay is part of.\n   * @observable\n   * @api\n   */\n\n\n  Overlay.prototype.setMap = function (map) {\n    this.set(Property.MAP, map);\n  };\n  /**\n   * Set the offset for this overlay.\n   * @param {Array<number>} offset Offset.\n   * @observable\n   * @api\n   */\n\n\n  Overlay.prototype.setOffset = function (offset) {\n    this.set(Property.OFFSET, offset);\n  };\n  /**\n   * Set the position for this overlay. If the position is `undefined` the\n   * overlay is hidden.\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} position The spatial point that the overlay\n   *     is anchored at.\n   * @observable\n   * @api\n   */\n\n\n  Overlay.prototype.setPosition = function (position) {\n    this.set(Property.POSITION, position);\n  };\n  /**\n   * Pan the map so that the overlay is entirely visible in the current viewport\n   * (if necessary).\n   * @protected\n   */\n\n\n  Overlay.prototype.panIntoView = function () {\n    var map = this.getMap();\n\n    if (!map || !map.getTargetElement()) {\n      return;\n    }\n\n    var mapRect = this.getRect(map.getTargetElement(), map.getSize());\n    var element = this.getElement();\n    var overlayRect = this.getRect(element, [outerWidth(element), outerHeight(element)]);\n    var margin = this.autoPanMargin;\n\n    if (!containsExtent(mapRect, overlayRect)) {\n      // the overlay is not completely inside the viewport, so pan the map\n      var offsetLeft = overlayRect[0] - mapRect[0];\n      var offsetRight = mapRect[2] - overlayRect[2];\n      var offsetTop = overlayRect[1] - mapRect[1];\n      var offsetBottom = mapRect[3] - overlayRect[3];\n      var delta = [0, 0];\n\n      if (offsetLeft < 0) {\n        // move map to the left\n        delta[0] = offsetLeft - margin;\n      } else if (offsetRight < 0) {\n        // move map to the right\n        delta[0] = Math.abs(offsetRight) + margin;\n      }\n\n      if (offsetTop < 0) {\n        // move map up\n        delta[1] = offsetTop - margin;\n      } else if (offsetBottom < 0) {\n        // move map down\n        delta[1] = Math.abs(offsetBottom) + margin;\n      }\n\n      if (delta[0] !== 0 || delta[1] !== 0) {\n        var center =\n        /** @type {import(\"./coordinate.js\").Coordinate} */\n        map.getView().getCenterInternal();\n        var centerPx = map.getPixelFromCoordinateInternal(center);\n        var newCenterPx = [centerPx[0] + delta[0], centerPx[1] + delta[1]];\n        map.getView().animateInternal({\n          center: map.getCoordinateFromPixelInternal(newCenterPx),\n          duration: this.autoPanAnimation.duration,\n          easing: this.autoPanAnimation.easing\n        });\n      }\n    }\n  };\n  /**\n   * Get the extent of an element relative to the document\n   * @param {HTMLElement} element The element.\n   * @param {import(\"./size.js\").Size} size The size of the element.\n   * @return {import(\"./extent.js\").Extent} The extent.\n   * @protected\n   */\n\n\n  Overlay.prototype.getRect = function (element, size) {\n    var box = element.getBoundingClientRect();\n    var offsetX = box.left + window.pageXOffset;\n    var offsetY = box.top + window.pageYOffset;\n    return [offsetX, offsetY, offsetX + size[0], offsetY + size[1]];\n  };\n  /**\n   * Set the positioning for this overlay.\n   * @param {OverlayPositioning} positioning how the overlay is\n   *     positioned relative to its point on the map.\n   * @observable\n   * @api\n   */\n\n\n  Overlay.prototype.setPositioning = function (positioning) {\n    this.set(Property.POSITIONING, positioning);\n  };\n  /**\n   * Modify the visibility of the element.\n   * @param {boolean} visible Element visibility.\n   * @protected\n   */\n\n\n  Overlay.prototype.setVisible = function (visible) {\n    if (this.rendered.visible !== visible) {\n      this.element.style.display = visible ? '' : 'none';\n      this.rendered.visible = visible;\n    }\n  };\n  /**\n   * Update pixel position.\n   * @protected\n   */\n\n\n  Overlay.prototype.updatePixelPosition = function () {\n    var map = this.getMap();\n    var position = this.getPosition();\n\n    if (!map || !map.isRendered() || !position) {\n      this.setVisible(false);\n      return;\n    }\n\n    var pixel = map.getPixelFromCoordinate(position);\n    var mapSize = map.getSize();\n    this.updateRenderedPosition(pixel, mapSize);\n  };\n  /**\n   * @param {import(\"./pixel.js\").Pixel} pixel The pixel location.\n   * @param {import(\"./size.js\").Size|undefined} mapSize The map size.\n   * @protected\n   */\n\n\n  Overlay.prototype.updateRenderedPosition = function (pixel, mapSize) {\n    var style = this.element.style;\n    var offset = this.getOffset();\n    var positioning = this.getPositioning();\n    this.setVisible(true);\n    var offsetX = offset[0];\n    var offsetY = offset[1];\n\n    if (positioning == OverlayPositioning.BOTTOM_RIGHT || positioning == OverlayPositioning.CENTER_RIGHT || positioning == OverlayPositioning.TOP_RIGHT) {\n      if (this.rendered.left_ !== '') {\n        this.rendered.left_ = '';\n        style.left = '';\n      }\n\n      var right = Math.round(mapSize[0] - pixel[0] - offsetX) + 'px';\n\n      if (this.rendered.right_ != right) {\n        this.rendered.right_ = right;\n        style.right = right;\n      }\n    } else {\n      if (this.rendered.right_ !== '') {\n        this.rendered.right_ = '';\n        style.right = '';\n      }\n\n      if (positioning == OverlayPositioning.BOTTOM_CENTER || positioning == OverlayPositioning.CENTER_CENTER || positioning == OverlayPositioning.TOP_CENTER) {\n        offsetX -= this.element.offsetWidth / 2;\n      }\n\n      var left = Math.round(pixel[0] + offsetX) + 'px';\n\n      if (this.rendered.left_ != left) {\n        this.rendered.left_ = left;\n        style.left = left;\n      }\n    }\n\n    if (positioning == OverlayPositioning.BOTTOM_LEFT || positioning == OverlayPositioning.BOTTOM_CENTER || positioning == OverlayPositioning.BOTTOM_RIGHT) {\n      if (this.rendered.top_ !== '') {\n        this.rendered.top_ = '';\n        style.top = '';\n      }\n\n      var bottom = Math.round(mapSize[1] - pixel[1] - offsetY) + 'px';\n\n      if (this.rendered.bottom_ != bottom) {\n        this.rendered.bottom_ = bottom;\n        style.bottom = bottom;\n      }\n    } else {\n      if (this.rendered.bottom_ !== '') {\n        this.rendered.bottom_ = '';\n        style.bottom = '';\n      }\n\n      if (positioning == OverlayPositioning.CENTER_LEFT || positioning == OverlayPositioning.CENTER_CENTER || positioning == OverlayPositioning.CENTER_RIGHT) {\n        offsetY -= this.element.offsetHeight / 2;\n      }\n\n      var top_1 = Math.round(pixel[1] + offsetY) + 'px';\n\n      if (this.rendered.top_ != top_1) {\n        this.rendered.top_ = 'top';\n        style.top = top_1;\n      }\n    }\n  };\n  /**\n   * returns the options this Overlay has been created with\n   * @return {Options} overlay options\n   */\n\n\n  Overlay.prototype.getOptions = function () {\n    return this.options;\n  };\n\n  return Overlay;\n}(BaseObject);\n\nexport default Overlay;","map":{"version":3,"sources":["src/Overlay.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/Overlay\n */\nimport MapEventType from './MapEventType.js';\nimport BaseObject, { getChangeEventType } from './Object.js';\nimport OverlayPositioning from './OverlayPositioning.js';\nimport { CLASS_SELECTABLE } from './css.js';\nimport { removeNode, removeChildren, outerWidth, outerHeight } from './dom.js';\nimport { listen, unlistenByKey } from './events.js';\nimport { containsExtent } from './extent.js';\n/**\n * @typedef {Object} Options\n * @property {number|string} [id] Set the overlay id. The overlay id can be used\n * with the {@link module:ol/Map~Map#getOverlayById} method.\n * @property {HTMLElement} [element] The overlay element.\n * @property {Array<number>} [offset=[0, 0]] Offsets in pixels used when positioning\n * the overlay. The first element in the\n * array is the horizontal offset. A positive value shifts the overlay right.\n * The second element in the array is the vertical offset. A positive value\n * shifts the overlay down.\n * @property {import(\"./coordinate.js\").Coordinate} [position] The overlay position\n * in map projection.\n * @property {OverlayPositioning} [positioning='top-left'] Defines how\n * the overlay is actually positioned with respect to its `position` property.\n * Possible values are `'bottom-left'`, `'bottom-center'`, `'bottom-right'`,\n * `'center-left'`, `'center-center'`, `'center-right'`, `'top-left'`,\n * `'top-center'`, and `'top-right'`.\n * @property {boolean} [stopEvent=true] Whether event propagation to the map\n * viewport should be stopped. If `true` the overlay is placed in the same\n * container as that of the controls (CSS class name\n * `ol-overlaycontainer-stopevent`); if `false` it is placed in the container\n * with CSS class name specified by the `className` property.\n * @property {boolean} [insertFirst=true] Whether the overlay is inserted first\n * in the overlay container, or appended. If the overlay is placed in the same\n * container as that of the controls (see the `stopEvent` option) you will\n * probably set `insertFirst` to `true` so the overlay is displayed below the\n * controls.\n * @property {boolean} [autoPan=false] If set to `true` the map is panned when\n * calling `setPosition`, so that the overlay is entirely visible in the current\n * viewport.\n * @property {PanOptions} [autoPanAnimation] The\n * animation options used to pan the overlay into view. This animation is only\n * used when `autoPan` is enabled. A `duration` and `easing` may be provided to\n * customize the animation.\n * @property {number} [autoPanMargin=20] The margin (in pixels) between the\n * overlay and the borders of the map when autopanning.\n * @property {string} [className='ol-overlay-container ol-selectable'] CSS class\n * name.\n */\n/**\n * @typedef {Object} PanOptions\n * @property {number} [duration=1000] The duration of the animation in\n * milliseconds.\n * @property {function(number):number} [easing] The easing function to use. Can\n * be one from {@link module:ol/easing} or a custom function.\n * Default is {@link module:ol/easing~inAndOut}.\n */\n/**\n * @enum {string}\n * @protected\n */\nvar Property = {\n    ELEMENT: 'element',\n    MAP: 'map',\n    OFFSET: 'offset',\n    POSITION: 'position',\n    POSITIONING: 'positioning'\n};\n/**\n * @classdesc\n * An element to be displayed over the map and attached to a single map\n * location.  Like {@link module:ol/control/Control~Control}, Overlays are\n * visible widgets. Unlike Controls, they are not in a fixed position on the\n * screen, but are tied to a geographical coordinate, so panning the map will\n * move an Overlay but not a Control.\n *\n * Example:\n *\n *     import Overlay from 'ol/Overlay';\n *\n *     var popup = new Overlay({\n *       element: document.getElementById('popup')\n *     });\n *     popup.setPosition(coordinate);\n *     map.addOverlay(popup);\n *\n * @api\n */\nvar Overlay = /** @class */ (function (_super) {\n    __extends(Overlay, _super);\n    /**\n     * @param {Options} options Overlay options.\n     */\n    function Overlay(options) {\n        var _this = _super.call(this) || this;\n        /**\n         * @protected\n         * @type {Options}\n         */\n        _this.options = options;\n        /**\n         * @protected\n         * @type {number|string|undefined}\n         */\n        _this.id = options.id;\n        /**\n         * @protected\n         * @type {boolean}\n         */\n        _this.insertFirst = options.insertFirst !== undefined ?\n            options.insertFirst : true;\n        /**\n         * @protected\n         * @type {boolean}\n         */\n        _this.stopEvent = options.stopEvent !== undefined ? options.stopEvent : true;\n        /**\n         * @protected\n         * @type {HTMLElement}\n         */\n        _this.element = document.createElement('div');\n        _this.element.className = options.className !== undefined ?\n            options.className : 'ol-overlay-container ' + CLASS_SELECTABLE;\n        _this.element.style.position = 'absolute';\n        /**\n         * @protected\n         * @type {boolean}\n         */\n        _this.autoPan = options.autoPan !== undefined ? options.autoPan : false;\n        /**\n         * @protected\n         * @type {PanOptions}\n         */\n        _this.autoPanAnimation = options.autoPanAnimation || /** @type {PanOptions} */ ({});\n        /**\n         * @protected\n         * @type {number}\n         */\n        _this.autoPanMargin = options.autoPanMargin !== undefined ?\n            options.autoPanMargin : 20;\n        /**\n         * @protected\n         * @type {{bottom_: string,\n         *         left_: string,\n         *         right_: string,\n         *         top_: string,\n         *         visible: boolean}}\n         */\n        _this.rendered = {\n            bottom_: '',\n            left_: '',\n            right_: '',\n            top_: '',\n            visible: true\n        };\n        /**\n         * @protected\n         * @type {?import(\"./events.js\").EventsKey}\n         */\n        _this.mapPostrenderListenerKey = null;\n        _this.addEventListener(getChangeEventType(Property.ELEMENT), _this.handleElementChanged);\n        _this.addEventListener(getChangeEventType(Property.MAP), _this.handleMapChanged);\n        _this.addEventListener(getChangeEventType(Property.OFFSET), _this.handleOffsetChanged);\n        _this.addEventListener(getChangeEventType(Property.POSITION), _this.handlePositionChanged);\n        _this.addEventListener(getChangeEventType(Property.POSITIONING), _this.handlePositioningChanged);\n        if (options.element !== undefined) {\n            _this.setElement(options.element);\n        }\n        _this.setOffset(options.offset !== undefined ? options.offset : [0, 0]);\n        _this.setPositioning(options.positioning !== undefined ?\n            /** @type {OverlayPositioning} */ (options.positioning) :\n            OverlayPositioning.TOP_LEFT);\n        if (options.position !== undefined) {\n            _this.setPosition(options.position);\n        }\n        return _this;\n    }\n    /**\n     * Get the DOM element of this overlay.\n     * @return {HTMLElement|undefined} The Element containing the overlay.\n     * @observable\n     * @api\n     */\n    Overlay.prototype.getElement = function () {\n        return /** @type {HTMLElement|undefined} */ (this.get(Property.ELEMENT));\n    };\n    /**\n     * Get the overlay identifier which is set on constructor.\n     * @return {number|string|undefined} Id.\n     * @api\n     */\n    Overlay.prototype.getId = function () {\n        return this.id;\n    };\n    /**\n     * Get the map associated with this overlay.\n     * @return {import(\"./PluggableMap.js\").default|undefined} The map that the\n     * overlay is part of.\n     * @observable\n     * @api\n     */\n    Overlay.prototype.getMap = function () {\n        return (\n        /** @type {import(\"./PluggableMap.js\").default|undefined} */ (this.get(Property.MAP)));\n    };\n    /**\n     * Get the offset of this overlay.\n     * @return {Array<number>} The offset.\n     * @observable\n     * @api\n     */\n    Overlay.prototype.getOffset = function () {\n        return /** @type {Array<number>} */ (this.get(Property.OFFSET));\n    };\n    /**\n     * Get the current position of this overlay.\n     * @return {import(\"./coordinate.js\").Coordinate|undefined} The spatial point that the overlay is\n     *     anchored at.\n     * @observable\n     * @api\n     */\n    Overlay.prototype.getPosition = function () {\n        return (\n        /** @type {import(\"./coordinate.js\").Coordinate|undefined} */ (this.get(Property.POSITION)));\n    };\n    /**\n     * Get the current positioning of this overlay.\n     * @return {OverlayPositioning} How the overlay is positioned\n     *     relative to its point on the map.\n     * @observable\n     * @api\n     */\n    Overlay.prototype.getPositioning = function () {\n        return (\n        /** @type {OverlayPositioning} */ (this.get(Property.POSITIONING)));\n    };\n    /**\n     * @protected\n     */\n    Overlay.prototype.handleElementChanged = function () {\n        removeChildren(this.element);\n        var element = this.getElement();\n        if (element) {\n            this.element.appendChild(element);\n        }\n    };\n    /**\n     * @protected\n     */\n    Overlay.prototype.handleMapChanged = function () {\n        if (this.mapPostrenderListenerKey) {\n            removeNode(this.element);\n            unlistenByKey(this.mapPostrenderListenerKey);\n            this.mapPostrenderListenerKey = null;\n        }\n        var map = this.getMap();\n        if (map) {\n            this.mapPostrenderListenerKey = listen(map, MapEventType.POSTRENDER, this.render, this);\n            this.updatePixelPosition();\n            var container = this.stopEvent ?\n                map.getOverlayContainerStopEvent() : map.getOverlayContainer();\n            if (this.insertFirst) {\n                container.insertBefore(this.element, container.childNodes[0] || null);\n            }\n            else {\n                container.appendChild(this.element);\n            }\n        }\n    };\n    /**\n     * @protected\n     */\n    Overlay.prototype.render = function () {\n        this.updatePixelPosition();\n    };\n    /**\n     * @protected\n     */\n    Overlay.prototype.handleOffsetChanged = function () {\n        this.updatePixelPosition();\n    };\n    /**\n     * @protected\n     */\n    Overlay.prototype.handlePositionChanged = function () {\n        this.updatePixelPosition();\n        if (this.get(Property.POSITION) && this.autoPan) {\n            this.panIntoView();\n        }\n    };\n    /**\n     * @protected\n     */\n    Overlay.prototype.handlePositioningChanged = function () {\n        this.updatePixelPosition();\n    };\n    /**\n     * Set the DOM element to be associated with this overlay.\n     * @param {HTMLElement|undefined} element The Element containing the overlay.\n     * @observable\n     * @api\n     */\n    Overlay.prototype.setElement = function (element) {\n        this.set(Property.ELEMENT, element);\n    };\n    /**\n     * Set the map to be associated with this overlay.\n     * @param {import(\"./PluggableMap.js\").default|undefined} map The map that the\n     * overlay is part of.\n     * @observable\n     * @api\n     */\n    Overlay.prototype.setMap = function (map) {\n        this.set(Property.MAP, map);\n    };\n    /**\n     * Set the offset for this overlay.\n     * @param {Array<number>} offset Offset.\n     * @observable\n     * @api\n     */\n    Overlay.prototype.setOffset = function (offset) {\n        this.set(Property.OFFSET, offset);\n    };\n    /**\n     * Set the position for this overlay. If the position is `undefined` the\n     * overlay is hidden.\n     * @param {import(\"./coordinate.js\").Coordinate|undefined} position The spatial point that the overlay\n     *     is anchored at.\n     * @observable\n     * @api\n     */\n    Overlay.prototype.setPosition = function (position) {\n        this.set(Property.POSITION, position);\n    };\n    /**\n     * Pan the map so that the overlay is entirely visible in the current viewport\n     * (if necessary).\n     * @protected\n     */\n    Overlay.prototype.panIntoView = function () {\n        var map = this.getMap();\n        if (!map || !map.getTargetElement()) {\n            return;\n        }\n        var mapRect = this.getRect(map.getTargetElement(), map.getSize());\n        var element = this.getElement();\n        var overlayRect = this.getRect(element, [outerWidth(element), outerHeight(element)]);\n        var margin = this.autoPanMargin;\n        if (!containsExtent(mapRect, overlayRect)) {\n            // the overlay is not completely inside the viewport, so pan the map\n            var offsetLeft = overlayRect[0] - mapRect[0];\n            var offsetRight = mapRect[2] - overlayRect[2];\n            var offsetTop = overlayRect[1] - mapRect[1];\n            var offsetBottom = mapRect[3] - overlayRect[3];\n            var delta = [0, 0];\n            if (offsetLeft < 0) {\n                // move map to the left\n                delta[0] = offsetLeft - margin;\n            }\n            else if (offsetRight < 0) {\n                // move map to the right\n                delta[0] = Math.abs(offsetRight) + margin;\n            }\n            if (offsetTop < 0) {\n                // move map up\n                delta[1] = offsetTop - margin;\n            }\n            else if (offsetBottom < 0) {\n                // move map down\n                delta[1] = Math.abs(offsetBottom) + margin;\n            }\n            if (delta[0] !== 0 || delta[1] !== 0) {\n                var center = /** @type {import(\"./coordinate.js\").Coordinate} */ (map.getView().getCenterInternal());\n                var centerPx = map.getPixelFromCoordinateInternal(center);\n                var newCenterPx = [\n                    centerPx[0] + delta[0],\n                    centerPx[1] + delta[1]\n                ];\n                map.getView().animateInternal({\n                    center: map.getCoordinateFromPixelInternal(newCenterPx),\n                    duration: this.autoPanAnimation.duration,\n                    easing: this.autoPanAnimation.easing\n                });\n            }\n        }\n    };\n    /**\n     * Get the extent of an element relative to the document\n     * @param {HTMLElement} element The element.\n     * @param {import(\"./size.js\").Size} size The size of the element.\n     * @return {import(\"./extent.js\").Extent} The extent.\n     * @protected\n     */\n    Overlay.prototype.getRect = function (element, size) {\n        var box = element.getBoundingClientRect();\n        var offsetX = box.left + window.pageXOffset;\n        var offsetY = box.top + window.pageYOffset;\n        return [\n            offsetX,\n            offsetY,\n            offsetX + size[0],\n            offsetY + size[1]\n        ];\n    };\n    /**\n     * Set the positioning for this overlay.\n     * @param {OverlayPositioning} positioning how the overlay is\n     *     positioned relative to its point on the map.\n     * @observable\n     * @api\n     */\n    Overlay.prototype.setPositioning = function (positioning) {\n        this.set(Property.POSITIONING, positioning);\n    };\n    /**\n     * Modify the visibility of the element.\n     * @param {boolean} visible Element visibility.\n     * @protected\n     */\n    Overlay.prototype.setVisible = function (visible) {\n        if (this.rendered.visible !== visible) {\n            this.element.style.display = visible ? '' : 'none';\n            this.rendered.visible = visible;\n        }\n    };\n    /**\n     * Update pixel position.\n     * @protected\n     */\n    Overlay.prototype.updatePixelPosition = function () {\n        var map = this.getMap();\n        var position = this.getPosition();\n        if (!map || !map.isRendered() || !position) {\n            this.setVisible(false);\n            return;\n        }\n        var pixel = map.getPixelFromCoordinate(position);\n        var mapSize = map.getSize();\n        this.updateRenderedPosition(pixel, mapSize);\n    };\n    /**\n     * @param {import(\"./pixel.js\").Pixel} pixel The pixel location.\n     * @param {import(\"./size.js\").Size|undefined} mapSize The map size.\n     * @protected\n     */\n    Overlay.prototype.updateRenderedPosition = function (pixel, mapSize) {\n        var style = this.element.style;\n        var offset = this.getOffset();\n        var positioning = this.getPositioning();\n        this.setVisible(true);\n        var offsetX = offset[0];\n        var offsetY = offset[1];\n        if (positioning == OverlayPositioning.BOTTOM_RIGHT ||\n            positioning == OverlayPositioning.CENTER_RIGHT ||\n            positioning == OverlayPositioning.TOP_RIGHT) {\n            if (this.rendered.left_ !== '') {\n                this.rendered.left_ = '';\n                style.left = '';\n            }\n            var right = Math.round(mapSize[0] - pixel[0] - offsetX) + 'px';\n            if (this.rendered.right_ != right) {\n                this.rendered.right_ = right;\n                style.right = right;\n            }\n        }\n        else {\n            if (this.rendered.right_ !== '') {\n                this.rendered.right_ = '';\n                style.right = '';\n            }\n            if (positioning == OverlayPositioning.BOTTOM_CENTER ||\n                positioning == OverlayPositioning.CENTER_CENTER ||\n                positioning == OverlayPositioning.TOP_CENTER) {\n                offsetX -= this.element.offsetWidth / 2;\n            }\n            var left = Math.round(pixel[0] + offsetX) + 'px';\n            if (this.rendered.left_ != left) {\n                this.rendered.left_ = left;\n                style.left = left;\n            }\n        }\n        if (positioning == OverlayPositioning.BOTTOM_LEFT ||\n            positioning == OverlayPositioning.BOTTOM_CENTER ||\n            positioning == OverlayPositioning.BOTTOM_RIGHT) {\n            if (this.rendered.top_ !== '') {\n                this.rendered.top_ = '';\n                style.top = '';\n            }\n            var bottom = Math.round(mapSize[1] - pixel[1] - offsetY) + 'px';\n            if (this.rendered.bottom_ != bottom) {\n                this.rendered.bottom_ = bottom;\n                style.bottom = bottom;\n            }\n        }\n        else {\n            if (this.rendered.bottom_ !== '') {\n                this.rendered.bottom_ = '';\n                style.bottom = '';\n            }\n            if (positioning == OverlayPositioning.CENTER_LEFT ||\n                positioning == OverlayPositioning.CENTER_CENTER ||\n                positioning == OverlayPositioning.CENTER_RIGHT) {\n                offsetY -= this.element.offsetHeight / 2;\n            }\n            var top_1 = Math.round(pixel[1] + offsetY) + 'px';\n            if (this.rendered.top_ != top_1) {\n                this.rendered.top_ = 'top';\n                style.top = top_1;\n            }\n        }\n    };\n    /**\n     * returns the options this Overlay has been created with\n     * @return {Options} overlay options\n     */\n    Overlay.prototype.getOptions = function () {\n        return this.options;\n    };\n    return Overlay;\n}(BaseObject));\nexport default Overlay;\n//# sourceMappingURL=Overlay.js.map"]},"metadata":{},"sourceType":"module"}