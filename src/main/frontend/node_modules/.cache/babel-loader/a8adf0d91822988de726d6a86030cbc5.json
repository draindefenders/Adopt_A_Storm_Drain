{"ast":null,"code":"/**\n * A wrapper class to simplify rendering to a texture instead of the final canvas\n * @module ol/webgl/RenderTarget\n */\nimport { equals } from '../array.js'; // for pixel color reading\n\nvar tmpArray4 = new Uint8Array(4);\n/**\n * @classdesc\n * This class is a wrapper around the association of both a `WebGLTexture` and a `WebGLFramebuffer` instances,\n * simplifying initialization and binding for rendering.\n * @api\n */\n\nvar WebGLRenderTarget =\n/** @class */\nfunction () {\n  /**\n   * @param {import(\"./Helper.js\").default} helper WebGL helper; mandatory.\n   * @param {Array<number>} [opt_size] Expected size of the render target texture; note: this can be changed later on.\n   */\n  function WebGLRenderTarget(helper, opt_size) {\n    /**\n     * @private\n     * @type {import(\"./Helper.js\").default}\n     */\n    this.helper_ = helper;\n    var gl = helper.getGL();\n    /**\n     * @private\n     * @type {WebGLTexture}\n     */\n\n    this.texture_ = gl.createTexture();\n    /**\n     * @private\n     * @type {WebGLFramebuffer}\n     */\n\n    this.framebuffer_ = gl.createFramebuffer();\n    /**\n     * @type {Array<number>}\n     * @private\n     */\n\n    this.size_ = opt_size || [1, 1];\n    /**\n     * @type {Uint8Array}\n     * @private\n     */\n\n    this.data_ = new Uint8Array(0);\n    /**\n     * @type {boolean}\n     * @private\n     */\n\n    this.dataCacheDirty_ = true;\n    this.updateSize_();\n  }\n  /**\n   * Changes the size of the render target texture. Note: will do nothing if the size\n   * is already the same.\n   * @param {Array<number>} size Expected size of the render target texture\n   * @api\n   */\n\n\n  WebGLRenderTarget.prototype.setSize = function (size) {\n    if (equals(size, this.size_)) {\n      return;\n    }\n\n    this.size_[0] = size[0];\n    this.size_[1] = size[1];\n    this.updateSize_();\n  };\n  /**\n   * Returns the size of the render target texture\n   * @return {Array<number>} Size of the render target texture\n   * @api\n   */\n\n\n  WebGLRenderTarget.prototype.getSize = function () {\n    return this.size_;\n  };\n  /**\n   * This will cause following calls to `#readAll` or `#readPixel` to download the content of the\n   * render target into memory, which is an expensive operation.\n   * This content will be kept in cache but should be cleared after each new render.\n   * @api\n   */\n\n\n  WebGLRenderTarget.prototype.clearCachedData = function () {\n    this.dataCacheDirty_ = true;\n  };\n  /**\n   * Returns the full content of the frame buffer as a series of r, g, b, a components\n   * in the 0-255 range (unsigned byte).\n   * @return {Uint8Array} Integer array of color values\n   * @api\n   */\n\n\n  WebGLRenderTarget.prototype.readAll = function () {\n    if (this.dataCacheDirty_) {\n      var size = this.size_;\n      var gl = this.helper_.getGL();\n      gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer_);\n      gl.readPixels(0, 0, size[0], size[1], gl.RGBA, gl.UNSIGNED_BYTE, this.data_);\n      this.dataCacheDirty_ = false;\n    }\n\n    return this.data_;\n  };\n  /**\n   * Reads one pixel of the frame buffer as an array of r, g, b, a components\n   * in the 0-255 range (unsigned byte).\n   * If x and/or y are outside of existing data, an array filled with 0 is returned.\n   * @param {number} x Pixel coordinate\n   * @param {number} y Pixel coordinate\n   * @returns {Uint8Array} Integer array with one color value (4 components)\n   * @api\n   */\n\n\n  WebGLRenderTarget.prototype.readPixel = function (x, y) {\n    if (x < 0 || y < 0 || x > this.size_[0] || y >= this.size_[1]) {\n      tmpArray4[0] = 0;\n      tmpArray4[1] = 0;\n      tmpArray4[2] = 0;\n      tmpArray4[3] = 0;\n      return tmpArray4;\n    }\n\n    this.readAll();\n    var index = Math.floor(x) + (this.size_[1] - Math.floor(y) - 1) * this.size_[0];\n    tmpArray4[0] = this.data_[index * 4];\n    tmpArray4[1] = this.data_[index * 4 + 1];\n    tmpArray4[2] = this.data_[index * 4 + 2];\n    tmpArray4[3] = this.data_[index * 4 + 3];\n    return tmpArray4;\n  };\n  /**\n   * @return {WebGLTexture} Texture to render to\n   */\n\n\n  WebGLRenderTarget.prototype.getTexture = function () {\n    return this.texture_;\n  };\n  /**\n   * @return {WebGLFramebuffer} Frame buffer of the render target\n   */\n\n\n  WebGLRenderTarget.prototype.getFramebuffer = function () {\n    return this.framebuffer_;\n  };\n  /**\n   * @private\n   */\n\n\n  WebGLRenderTarget.prototype.updateSize_ = function () {\n    var size = this.size_;\n    var gl = this.helper_.getGL();\n    this.texture_ = this.helper_.createTexture(size, null, this.texture_);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer_);\n    gl.viewport(0, 0, size[0], size[1]);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.texture_, 0);\n    this.data_ = new Uint8Array(size[0] * size[1] * 4);\n  };\n\n  return WebGLRenderTarget;\n}();\n\nexport default WebGLRenderTarget;","map":{"version":3,"sources":["../src/webgl/RenderTarget.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * A wrapper class to simplify rendering to a texture instead of the final canvas\n * @module ol/webgl/RenderTarget\n */\nimport { equals } from '../array.js';\n// for pixel color reading\nvar tmpArray4 = new Uint8Array(4);\n/**\n * @classdesc\n * This class is a wrapper around the association of both a `WebGLTexture` and a `WebGLFramebuffer` instances,\n * simplifying initialization and binding for rendering.\n * @api\n */\nvar WebGLRenderTarget = /** @class */ (function () {\n    /**\n     * @param {import(\"./Helper.js\").default} helper WebGL helper; mandatory.\n     * @param {Array<number>} [opt_size] Expected size of the render target texture; note: this can be changed later on.\n     */\n    function WebGLRenderTarget(helper, opt_size) {\n        /**\n         * @private\n         * @type {import(\"./Helper.js\").default}\n         */\n        this.helper_ = helper;\n        var gl = helper.getGL();\n        /**\n         * @private\n         * @type {WebGLTexture}\n         */\n        this.texture_ = gl.createTexture();\n        /**\n         * @private\n         * @type {WebGLFramebuffer}\n         */\n        this.framebuffer_ = gl.createFramebuffer();\n        /**\n         * @type {Array<number>}\n         * @private\n         */\n        this.size_ = opt_size || [1, 1];\n        /**\n         * @type {Uint8Array}\n         * @private\n         */\n        this.data_ = new Uint8Array(0);\n        /**\n         * @type {boolean}\n         * @private\n         */\n        this.dataCacheDirty_ = true;\n        this.updateSize_();\n    }\n    /**\n     * Changes the size of the render target texture. Note: will do nothing if the size\n     * is already the same.\n     * @param {Array<number>} size Expected size of the render target texture\n     * @api\n     */\n    WebGLRenderTarget.prototype.setSize = function (size) {\n        if (equals(size, this.size_)) {\n            return;\n        }\n        this.size_[0] = size[0];\n        this.size_[1] = size[1];\n        this.updateSize_();\n    };\n    /**\n     * Returns the size of the render target texture\n     * @return {Array<number>} Size of the render target texture\n     * @api\n     */\n    WebGLRenderTarget.prototype.getSize = function () {\n        return this.size_;\n    };\n    /**\n     * This will cause following calls to `#readAll` or `#readPixel` to download the content of the\n     * render target into memory, which is an expensive operation.\n     * This content will be kept in cache but should be cleared after each new render.\n     * @api\n     */\n    WebGLRenderTarget.prototype.clearCachedData = function () {\n        this.dataCacheDirty_ = true;\n    };\n    /**\n     * Returns the full content of the frame buffer as a series of r, g, b, a components\n     * in the 0-255 range (unsigned byte).\n     * @return {Uint8Array} Integer array of color values\n     * @api\n     */\n    WebGLRenderTarget.prototype.readAll = function () {\n        if (this.dataCacheDirty_) {\n            var size = this.size_;\n            var gl = this.helper_.getGL();\n            gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer_);\n            gl.readPixels(0, 0, size[0], size[1], gl.RGBA, gl.UNSIGNED_BYTE, this.data_);\n            this.dataCacheDirty_ = false;\n        }\n        return this.data_;\n    };\n    /**\n     * Reads one pixel of the frame buffer as an array of r, g, b, a components\n     * in the 0-255 range (unsigned byte).\n     * If x and/or y are outside of existing data, an array filled with 0 is returned.\n     * @param {number} x Pixel coordinate\n     * @param {number} y Pixel coordinate\n     * @returns {Uint8Array} Integer array with one color value (4 components)\n     * @api\n     */\n    WebGLRenderTarget.prototype.readPixel = function (x, y) {\n        if (x < 0 || y < 0 || x > this.size_[0] || y >= this.size_[1]) {\n            tmpArray4[0] = 0;\n            tmpArray4[1] = 0;\n            tmpArray4[2] = 0;\n            tmpArray4[3] = 0;\n            return tmpArray4;\n        }\n        this.readAll();\n        var index = Math.floor(x) + (this.size_[1] - Math.floor(y) - 1) * this.size_[0];\n        tmpArray4[0] = this.data_[index * 4];\n        tmpArray4[1] = this.data_[index * 4 + 1];\n        tmpArray4[2] = this.data_[index * 4 + 2];\n        tmpArray4[3] = this.data_[index * 4 + 3];\n        return tmpArray4;\n    };\n    /**\n     * @return {WebGLTexture} Texture to render to\n     */\n    WebGLRenderTarget.prototype.getTexture = function () {\n        return this.texture_;\n    };\n    /**\n     * @return {WebGLFramebuffer} Frame buffer of the render target\n     */\n    WebGLRenderTarget.prototype.getFramebuffer = function () {\n        return this.framebuffer_;\n    };\n    /**\n     * @private\n     */\n    WebGLRenderTarget.prototype.updateSize_ = function () {\n        var size = this.size_;\n        var gl = this.helper_.getGL();\n        this.texture_ = this.helper_.createTexture(size, null, this.texture_);\n        gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer_);\n        gl.viewport(0, 0, size[0], size[1]);\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.texture_, 0);\n        this.data_ = new Uint8Array(size[0] * size[1] * 4);\n    };\n    return WebGLRenderTarget;\n}());\nexport default WebGLRenderTarget;\n//# sourceMappingURL=RenderTarget.js.map"]},"metadata":{},"sourceType":"module"}