{"ast":null,"code":"/**\n * @module ol/tilecoord\n */\n\n/**\n * An array of three numbers representing the location of a tile in a tile\n * grid. The order is `z` (zoom level), `x` (column), and `y` (row).\n * @typedef {Array<number>} TileCoord\n * @api\n */\n\n/**\n * @param {number} z Z.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {TileCoord=} opt_tileCoord Tile coordinate.\n * @return {TileCoord} Tile coordinate.\n */\nexport function createOrUpdate(z, x, y, opt_tileCoord) {\n  if (opt_tileCoord !== undefined) {\n    opt_tileCoord[0] = z;\n    opt_tileCoord[1] = x;\n    opt_tileCoord[2] = y;\n    return opt_tileCoord;\n  } else {\n    return [z, x, y];\n  }\n}\n/**\n * @param {number} z Z.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {string} Key.\n */\n\nexport function getKeyZXY(z, x, y) {\n  return z + '/' + x + '/' + y;\n}\n/**\n * Get the key for a tile coord.\n * @param {TileCoord} tileCoord The tile coord.\n * @return {string} Key.\n */\n\nexport function getKey(tileCoord) {\n  return getKeyZXY(tileCoord[0], tileCoord[1], tileCoord[2]);\n}\n/**\n * Get a tile coord given a key.\n * @param {string} key The tile coord key.\n * @return {TileCoord} The tile coord.\n */\n\nexport function fromKey(key) {\n  return key.split('/').map(Number);\n}\n/**\n * @param {TileCoord} tileCoord Tile coord.\n * @return {number} Hash.\n */\n\nexport function hash(tileCoord) {\n  return (tileCoord[1] << tileCoord[0]) + tileCoord[2];\n}\n/**\n * @param {TileCoord} tileCoord Tile coordinate.\n * @param {!import(\"./tilegrid/TileGrid.js\").default} tileGrid Tile grid.\n * @return {boolean} Tile coordinate is within extent and zoom level range.\n */\n\nexport function withinExtentAndZ(tileCoord, tileGrid) {\n  var z = tileCoord[0];\n  var x = tileCoord[1];\n  var y = tileCoord[2];\n\n  if (tileGrid.getMinZoom() > z || z > tileGrid.getMaxZoom()) {\n    return false;\n  }\n\n  var extent = tileGrid.getExtent();\n  var tileRange;\n\n  if (!extent) {\n    tileRange = tileGrid.getFullTileRange(z);\n  } else {\n    tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z);\n  }\n\n  if (!tileRange) {\n    return true;\n  } else {\n    return tileRange.containsXY(x, y);\n  }\n}","map":{"version":3,"sources":["src/tilecoord.js"],"names":[],"mappings":"AAAA;;;;AAKA;;;;;;;AAQA;;;;;;;AAOA,OAAM,SAAU,cAAV,CAAyB,CAAzB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,aAAlC,EAA+C;AACnD,MAAI,aAAa,KAAK,SAAtB,EAAiC;AAC/B,IAAA,aAAa,CAAC,CAAD,CAAb,GAAmB,CAAnB;AACA,IAAA,aAAa,CAAC,CAAD,CAAb,GAAmB,CAAnB;AACA,IAAA,aAAa,CAAC,CAAD,CAAb,GAAmB,CAAnB;AACA,WAAO,aAAP;AACD,GALD,MAKO;AACL,WAAO,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAP;AACD;AACF;AAGD;;;;;;;AAMA,OAAM,SAAU,SAAV,CAAoB,CAApB,EAAuB,CAAvB,EAA0B,CAA1B,EAA2B;AAC/B,SAAO,CAAC,GAAG,GAAJ,GAAU,CAAV,GAAc,GAAd,GAAoB,CAA3B;AACD;AAGD;;;;;;AAKA,OAAM,SAAU,MAAV,CAAiB,SAAjB,EAA0B;AAC9B,SAAO,SAAS,CAAC,SAAS,CAAC,CAAD,CAAV,EAAe,SAAS,CAAC,CAAD,CAAxB,EAA6B,SAAS,CAAC,CAAD,CAAtC,CAAhB;AACD;AAGD;;;;;;AAKA,OAAM,SAAU,OAAV,CAAkB,GAAlB,EAAqB;AACzB,SAAO,GAAG,CAAC,KAAJ,CAAU,GAAV,EAAe,GAAf,CAAmB,MAAnB,CAAP;AACD;AAGD;;;;;AAIA,OAAM,SAAU,IAAV,CAAe,SAAf,EAAwB;AAC5B,SAAO,CAAC,SAAS,CAAC,CAAD,CAAT,IAAgB,SAAS,CAAC,CAAD,CAA1B,IAAiC,SAAS,CAAC,CAAD,CAAjD;AACD;AAGD;;;;;;AAKA,OAAM,SAAU,gBAAV,CAA2B,SAA3B,EAAsC,QAAtC,EAA8C;AAClD,MAAM,CAAC,GAAG,SAAS,CAAC,CAAD,CAAnB;AACA,MAAM,CAAC,GAAG,SAAS,CAAC,CAAD,CAAnB;AACA,MAAM,CAAC,GAAG,SAAS,CAAC,CAAD,CAAnB;;AAEA,MAAI,QAAQ,CAAC,UAAT,KAAwB,CAAxB,IAA6B,CAAC,GAAG,QAAQ,CAAC,UAAT,EAArC,EAA4D;AAC1D,WAAO,KAAP;AACD;;AACD,MAAM,MAAM,GAAG,QAAQ,CAAC,SAAT,EAAf;AACA,MAAI,SAAJ;;AACA,MAAI,CAAC,MAAL,EAAa;AACX,IAAA,SAAS,GAAG,QAAQ,CAAC,gBAAT,CAA0B,CAA1B,CAAZ;AACD,GAFD,MAEO;AACL,IAAA,SAAS,GAAG,QAAQ,CAAC,yBAAT,CAAmC,MAAnC,EAA2C,CAA3C,CAAZ;AACD;;AACD,MAAI,CAAC,SAAL,EAAgB;AACd,WAAO,IAAP;AACD,GAFD,MAEO;AACL,WAAO,SAAS,CAAC,UAAV,CAAqB,CAArB,EAAwB,CAAxB,CAAP;AACD;AACF","sourceRoot":"","sourcesContent":["/**\n * @module ol/tilecoord\n */\n/**\n * An array of three numbers representing the location of a tile in a tile\n * grid. The order is `z` (zoom level), `x` (column), and `y` (row).\n * @typedef {Array<number>} TileCoord\n * @api\n */\n/**\n * @param {number} z Z.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {TileCoord=} opt_tileCoord Tile coordinate.\n * @return {TileCoord} Tile coordinate.\n */\nexport function createOrUpdate(z, x, y, opt_tileCoord) {\n    if (opt_tileCoord !== undefined) {\n        opt_tileCoord[0] = z;\n        opt_tileCoord[1] = x;\n        opt_tileCoord[2] = y;\n        return opt_tileCoord;\n    }\n    else {\n        return [z, x, y];\n    }\n}\n/**\n * @param {number} z Z.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {string} Key.\n */\nexport function getKeyZXY(z, x, y) {\n    return z + '/' + x + '/' + y;\n}\n/**\n * Get the key for a tile coord.\n * @param {TileCoord} tileCoord The tile coord.\n * @return {string} Key.\n */\nexport function getKey(tileCoord) {\n    return getKeyZXY(tileCoord[0], tileCoord[1], tileCoord[2]);\n}\n/**\n * Get a tile coord given a key.\n * @param {string} key The tile coord key.\n * @return {TileCoord} The tile coord.\n */\nexport function fromKey(key) {\n    return key.split('/').map(Number);\n}\n/**\n * @param {TileCoord} tileCoord Tile coord.\n * @return {number} Hash.\n */\nexport function hash(tileCoord) {\n    return (tileCoord[1] << tileCoord[0]) + tileCoord[2];\n}\n/**\n * @param {TileCoord} tileCoord Tile coordinate.\n * @param {!import(\"./tilegrid/TileGrid.js\").default} tileGrid Tile grid.\n * @return {boolean} Tile coordinate is within extent and zoom level range.\n */\nexport function withinExtentAndZ(tileCoord, tileGrid) {\n    var z = tileCoord[0];\n    var x = tileCoord[1];\n    var y = tileCoord[2];\n    if (tileGrid.getMinZoom() > z || z > tileGrid.getMaxZoom()) {\n        return false;\n    }\n    var extent = tileGrid.getExtent();\n    var tileRange;\n    if (!extent) {\n        tileRange = tileGrid.getFullTileRange(z);\n    }\n    else {\n        tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z);\n    }\n    if (!tileRange) {\n        return true;\n    }\n    else {\n        return tileRange.containsXY(x, y);\n    }\n}\n//# sourceMappingURL=tilecoord.js.map"]},"metadata":{},"sourceType":"module"}