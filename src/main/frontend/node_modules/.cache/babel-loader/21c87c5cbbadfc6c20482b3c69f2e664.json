{"ast":null,"code":"/**\n * @module ol/control/ZoomSlider\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport 'elm-pep';\nimport Control from './Control.js';\nimport { CLASS_CONTROL, CLASS_UNSELECTABLE } from '../css.js';\nimport { easeOut } from '../easing.js';\nimport { listen, unlistenByKey } from '../events.js';\nimport { stopPropagation } from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport { clamp } from '../math.js';\nimport PointerEventType from '../pointer/EventType.js';\n/**\n * The enum for available directions.\n *\n * @enum {number}\n */\n\nvar Direction = {\n  VERTICAL: 0,\n  HORIZONTAL: 1\n};\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-zoomslider'] CSS class name.\n * @property {number} [duration=200] Animation duration in milliseconds.\n * @property {function(import(\"../MapEvent.js\").default)} [render] Function called when the control\n * should be re-rendered. This is called in a `requestAnimationFrame` callback.\n */\n\n/**\n * @classdesc\n * A slider type of control for zooming.\n *\n * Example:\n *\n *     map.addControl(new ZoomSlider());\n *\n * @api\n */\n\nvar ZoomSlider =\n/** @class */\nfunction (_super) {\n  __extends(ZoomSlider, _super);\n  /**\n   * @param {Options=} opt_options Zoom slider options.\n   */\n\n\n  function ZoomSlider(opt_options) {\n    var _this = this;\n\n    var options = opt_options ? opt_options : {};\n    _this = _super.call(this, {\n      element: document.createElement('div'),\n      render: options.render || render\n    }) || this;\n    /**\n      * @type {!Array.<import(\"../events.js\").EventsKey>}\n      * @private\n      */\n\n    _this.dragListenerKeys_ = [];\n    /**\n     * Will hold the current resolution of the view.\n     *\n     * @type {number|undefined}\n     * @private\n     */\n\n    _this.currentResolution_ = undefined;\n    /**\n     * The direction of the slider. Will be determined from actual display of the\n     * container and defaults to Direction.VERTICAL.\n     *\n     * @type {Direction}\n     * @private\n     */\n\n    _this.direction_ = Direction.VERTICAL;\n    /**\n     * @type {boolean}\n     * @private\n     */\n\n    _this.dragging_;\n    /**\n     * @type {number}\n     * @private\n     */\n\n    _this.heightLimit_ = 0;\n    /**\n     * @type {number}\n     * @private\n     */\n\n    _this.widthLimit_ = 0;\n    /**\n     * @type {number|undefined}\n     * @private\n     */\n\n    _this.startX_;\n    /**\n     * @type {number|undefined}\n     * @private\n     */\n\n    _this.startY_;\n    /**\n     * The calculated thumb size (border box plus margins).  Set when initSlider_\n     * is called.\n     * @type {import(\"../size.js\").Size}\n     * @private\n     */\n\n    _this.thumbSize_ = null;\n    /**\n     * Whether the slider is initialized.\n     * @type {boolean}\n     * @private\n     */\n\n    _this.sliderInitialized_ = false;\n    /**\n     * @type {number}\n     * @private\n     */\n\n    _this.duration_ = options.duration !== undefined ? options.duration : 200;\n    var className = options.className !== undefined ? options.className : 'ol-zoomslider';\n    var thumbElement = document.createElement('button');\n    thumbElement.setAttribute('type', 'button');\n    thumbElement.className = className + '-thumb ' + CLASS_UNSELECTABLE;\n    var containerElement = _this.element;\n    containerElement.className = className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL;\n    containerElement.appendChild(thumbElement);\n    containerElement.addEventListener(PointerEventType.POINTERDOWN, _this.handleDraggerStart_.bind(_this), false);\n    containerElement.addEventListener(PointerEventType.POINTERMOVE, _this.handleDraggerDrag_.bind(_this), false);\n    containerElement.addEventListener(PointerEventType.POINTERUP, _this.handleDraggerEnd_.bind(_this), false);\n    containerElement.addEventListener(EventType.CLICK, _this.handleContainerClick_.bind(_this), false);\n    thumbElement.addEventListener(EventType.CLICK, stopPropagation, false);\n    return _this;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  ZoomSlider.prototype.setMap = function (map) {\n    _super.prototype.setMap.call(this, map);\n\n    if (map) {\n      map.render();\n    }\n  };\n  /**\n   * Initializes the slider element. This will determine and set this controls\n   * direction_ and also constrain the dragging of the thumb to always be within\n   * the bounds of the container.\n   *\n   * @private\n   */\n\n\n  ZoomSlider.prototype.initSlider_ = function () {\n    var container = this.element;\n    var containerSize = {\n      width: container.offsetWidth,\n      height: container.offsetHeight\n    };\n    var thumb =\n    /** @type {HTMLElement} */\n    container.firstElementChild;\n    var computedStyle = getComputedStyle(thumb);\n    var thumbWidth = thumb.offsetWidth + parseFloat(computedStyle['marginRight']) + parseFloat(computedStyle['marginLeft']);\n    var thumbHeight = thumb.offsetHeight + parseFloat(computedStyle['marginTop']) + parseFloat(computedStyle['marginBottom']);\n    this.thumbSize_ = [thumbWidth, thumbHeight];\n\n    if (containerSize.width > containerSize.height) {\n      this.direction_ = Direction.HORIZONTAL;\n      this.widthLimit_ = containerSize.width - thumbWidth;\n    } else {\n      this.direction_ = Direction.VERTICAL;\n      this.heightLimit_ = containerSize.height - thumbHeight;\n    }\n\n    this.sliderInitialized_ = true;\n  };\n  /**\n   * @param {PointerEvent} event The browser event to handle.\n   * @private\n   */\n\n\n  ZoomSlider.prototype.handleContainerClick_ = function (event) {\n    var view = this.getMap().getView();\n    var relativePosition = this.getRelativePosition_(event.offsetX - this.thumbSize_[0] / 2, event.offsetY - this.thumbSize_[1] / 2);\n    var resolution = this.getResolutionForPosition_(relativePosition);\n    var zoom = view.getConstrainedZoom(view.getZoomForResolution(resolution));\n    view.animateInternal({\n      zoom: zoom,\n      duration: this.duration_,\n      easing: easeOut\n    });\n  };\n  /**\n   * Handle dragger start events.\n   * @param {PointerEvent} event The drag event.\n   * @private\n   */\n\n\n  ZoomSlider.prototype.handleDraggerStart_ = function (event) {\n    if (!this.dragging_ && event.target === this.element.firstElementChild) {\n      var element =\n      /** @type {HTMLElement} */\n      this.element.firstElementChild;\n      this.getMap().getView().beginInteraction();\n      this.startX_ = event.clientX - parseFloat(element.style.left);\n      this.startY_ = event.clientY - parseFloat(element.style.top);\n      this.dragging_ = true;\n\n      if (this.dragListenerKeys_.length === 0) {\n        var drag = this.handleDraggerDrag_;\n        var end = this.handleDraggerEnd_;\n        this.dragListenerKeys_.push(listen(document, PointerEventType.POINTERMOVE, drag, this), listen(document, PointerEventType.POINTERUP, end, this));\n      }\n    }\n  };\n  /**\n   * Handle dragger drag events.\n   *\n   * @param {PointerEvent} event The drag event.\n   * @private\n   */\n\n\n  ZoomSlider.prototype.handleDraggerDrag_ = function (event) {\n    if (this.dragging_) {\n      var deltaX = event.clientX - this.startX_;\n      var deltaY = event.clientY - this.startY_;\n      var relativePosition = this.getRelativePosition_(deltaX, deltaY);\n      this.currentResolution_ = this.getResolutionForPosition_(relativePosition);\n      this.getMap().getView().setResolution(this.currentResolution_);\n    }\n  };\n  /**\n   * Handle dragger end events.\n   * @param {PointerEvent} event The drag event.\n   * @private\n   */\n\n\n  ZoomSlider.prototype.handleDraggerEnd_ = function (event) {\n    if (this.dragging_) {\n      var view = this.getMap().getView();\n      view.endInteraction();\n      this.dragging_ = false;\n      this.startX_ = undefined;\n      this.startY_ = undefined;\n      this.dragListenerKeys_.forEach(unlistenByKey);\n      this.dragListenerKeys_.length = 0;\n    }\n  };\n  /**\n   * Positions the thumb inside its container according to the given resolution.\n   *\n   * @param {number} res The res.\n   * @private\n   */\n\n\n  ZoomSlider.prototype.setThumbPosition_ = function (res) {\n    var position = this.getPositionForResolution_(res);\n    var thumb =\n    /** @type {HTMLElement} */\n    this.element.firstElementChild;\n\n    if (this.direction_ == Direction.HORIZONTAL) {\n      thumb.style.left = this.widthLimit_ * position + 'px';\n    } else {\n      thumb.style.top = this.heightLimit_ * position + 'px';\n    }\n  };\n  /**\n   * Calculates the relative position of the thumb given x and y offsets.  The\n   * relative position scales from 0 to 1.  The x and y offsets are assumed to be\n   * in pixel units within the dragger limits.\n   *\n   * @param {number} x Pixel position relative to the left of the slider.\n   * @param {number} y Pixel position relative to the top of the slider.\n   * @return {number} The relative position of the thumb.\n   * @private\n   */\n\n\n  ZoomSlider.prototype.getRelativePosition_ = function (x, y) {\n    var amount;\n\n    if (this.direction_ === Direction.HORIZONTAL) {\n      amount = x / this.widthLimit_;\n    } else {\n      amount = y / this.heightLimit_;\n    }\n\n    return clamp(amount, 0, 1);\n  };\n  /**\n   * Calculates the corresponding resolution of the thumb given its relative\n   * position (where 0 is the minimum and 1 is the maximum).\n   *\n   * @param {number} position The relative position of the thumb.\n   * @return {number} The corresponding resolution.\n   * @private\n   */\n\n\n  ZoomSlider.prototype.getResolutionForPosition_ = function (position) {\n    var fn = this.getMap().getView().getResolutionForValueFunction();\n    return fn(1 - position);\n  };\n  /**\n   * Determines the relative position of the slider for the given resolution.  A\n   * relative position of 0 corresponds to the minimum view resolution.  A\n   * relative position of 1 corresponds to the maximum view resolution.\n   *\n   * @param {number} res The resolution.\n   * @return {number} The relative position value (between 0 and 1).\n   * @private\n   */\n\n\n  ZoomSlider.prototype.getPositionForResolution_ = function (res) {\n    var fn = this.getMap().getView().getValueForResolutionFunction();\n    return clamp(1 - fn(res), 0, 1);\n  };\n\n  return ZoomSlider;\n}(Control);\n/**\n * Update the zoomslider element.\n * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n * @this {ZoomSlider}\n */\n\n\nexport function render(mapEvent) {\n  if (!mapEvent.frameState) {\n    return;\n  }\n\n  if (!this.sliderInitialized_) {\n    this.initSlider_();\n  }\n\n  var res = mapEvent.frameState.viewState.resolution;\n  this.currentResolution_ = res;\n  this.setThumbPosition_(res);\n}\nexport default ZoomSlider;","map":{"version":3,"sources":["../src/control/ZoomSlider.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @module ol/control/ZoomSlider\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport 'elm-pep';\nimport Control from './Control.js';\nimport { CLASS_CONTROL, CLASS_UNSELECTABLE } from '../css.js';\nimport { easeOut } from '../easing.js';\nimport { listen, unlistenByKey } from '../events.js';\nimport { stopPropagation } from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport { clamp } from '../math.js';\nimport PointerEventType from '../pointer/EventType.js';\n/**\n * The enum for available directions.\n *\n * @enum {number}\n */\nvar Direction = {\n    VERTICAL: 0,\n    HORIZONTAL: 1\n};\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-zoomslider'] CSS class name.\n * @property {number} [duration=200] Animation duration in milliseconds.\n * @property {function(import(\"../MapEvent.js\").default)} [render] Function called when the control\n * should be re-rendered. This is called in a `requestAnimationFrame` callback.\n */\n/**\n * @classdesc\n * A slider type of control for zooming.\n *\n * Example:\n *\n *     map.addControl(new ZoomSlider());\n *\n * @api\n */\nvar ZoomSlider = /** @class */ (function (_super) {\n    __extends(ZoomSlider, _super);\n    /**\n     * @param {Options=} opt_options Zoom slider options.\n     */\n    function ZoomSlider(opt_options) {\n        var _this = this;\n        var options = opt_options ? opt_options : {};\n        _this = _super.call(this, {\n            element: document.createElement('div'),\n            render: options.render || render\n        }) || this;\n        /**\n          * @type {!Array.<import(\"../events.js\").EventsKey>}\n          * @private\n          */\n        _this.dragListenerKeys_ = [];\n        /**\n         * Will hold the current resolution of the view.\n         *\n         * @type {number|undefined}\n         * @private\n         */\n        _this.currentResolution_ = undefined;\n        /**\n         * The direction of the slider. Will be determined from actual display of the\n         * container and defaults to Direction.VERTICAL.\n         *\n         * @type {Direction}\n         * @private\n         */\n        _this.direction_ = Direction.VERTICAL;\n        /**\n         * @type {boolean}\n         * @private\n         */\n        _this.dragging_;\n        /**\n         * @type {number}\n         * @private\n         */\n        _this.heightLimit_ = 0;\n        /**\n         * @type {number}\n         * @private\n         */\n        _this.widthLimit_ = 0;\n        /**\n         * @type {number|undefined}\n         * @private\n         */\n        _this.startX_;\n        /**\n         * @type {number|undefined}\n         * @private\n         */\n        _this.startY_;\n        /**\n         * The calculated thumb size (border box plus margins).  Set when initSlider_\n         * is called.\n         * @type {import(\"../size.js\").Size}\n         * @private\n         */\n        _this.thumbSize_ = null;\n        /**\n         * Whether the slider is initialized.\n         * @type {boolean}\n         * @private\n         */\n        _this.sliderInitialized_ = false;\n        /**\n         * @type {number}\n         * @private\n         */\n        _this.duration_ = options.duration !== undefined ? options.duration : 200;\n        var className = options.className !== undefined ? options.className : 'ol-zoomslider';\n        var thumbElement = document.createElement('button');\n        thumbElement.setAttribute('type', 'button');\n        thumbElement.className = className + '-thumb ' + CLASS_UNSELECTABLE;\n        var containerElement = _this.element;\n        containerElement.className = className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL;\n        containerElement.appendChild(thumbElement);\n        containerElement.addEventListener(PointerEventType.POINTERDOWN, _this.handleDraggerStart_.bind(_this), false);\n        containerElement.addEventListener(PointerEventType.POINTERMOVE, _this.handleDraggerDrag_.bind(_this), false);\n        containerElement.addEventListener(PointerEventType.POINTERUP, _this.handleDraggerEnd_.bind(_this), false);\n        containerElement.addEventListener(EventType.CLICK, _this.handleContainerClick_.bind(_this), false);\n        thumbElement.addEventListener(EventType.CLICK, stopPropagation, false);\n        return _this;\n    }\n    /**\n     * @inheritDoc\n     */\n    ZoomSlider.prototype.setMap = function (map) {\n        _super.prototype.setMap.call(this, map);\n        if (map) {\n            map.render();\n        }\n    };\n    /**\n     * Initializes the slider element. This will determine and set this controls\n     * direction_ and also constrain the dragging of the thumb to always be within\n     * the bounds of the container.\n     *\n     * @private\n     */\n    ZoomSlider.prototype.initSlider_ = function () {\n        var container = this.element;\n        var containerSize = {\n            width: container.offsetWidth, height: container.offsetHeight\n        };\n        var thumb = /** @type {HTMLElement} */ (container.firstElementChild);\n        var computedStyle = getComputedStyle(thumb);\n        var thumbWidth = thumb.offsetWidth +\n            parseFloat(computedStyle['marginRight']) +\n            parseFloat(computedStyle['marginLeft']);\n        var thumbHeight = thumb.offsetHeight +\n            parseFloat(computedStyle['marginTop']) +\n            parseFloat(computedStyle['marginBottom']);\n        this.thumbSize_ = [thumbWidth, thumbHeight];\n        if (containerSize.width > containerSize.height) {\n            this.direction_ = Direction.HORIZONTAL;\n            this.widthLimit_ = containerSize.width - thumbWidth;\n        }\n        else {\n            this.direction_ = Direction.VERTICAL;\n            this.heightLimit_ = containerSize.height - thumbHeight;\n        }\n        this.sliderInitialized_ = true;\n    };\n    /**\n     * @param {PointerEvent} event The browser event to handle.\n     * @private\n     */\n    ZoomSlider.prototype.handleContainerClick_ = function (event) {\n        var view = this.getMap().getView();\n        var relativePosition = this.getRelativePosition_(event.offsetX - this.thumbSize_[0] / 2, event.offsetY - this.thumbSize_[1] / 2);\n        var resolution = this.getResolutionForPosition_(relativePosition);\n        var zoom = view.getConstrainedZoom(view.getZoomForResolution(resolution));\n        view.animateInternal({\n            zoom: zoom,\n            duration: this.duration_,\n            easing: easeOut\n        });\n    };\n    /**\n     * Handle dragger start events.\n     * @param {PointerEvent} event The drag event.\n     * @private\n     */\n    ZoomSlider.prototype.handleDraggerStart_ = function (event) {\n        if (!this.dragging_ && event.target === this.element.firstElementChild) {\n            var element = /** @type {HTMLElement} */ (this.element.firstElementChild);\n            this.getMap().getView().beginInteraction();\n            this.startX_ = event.clientX - parseFloat(element.style.left);\n            this.startY_ = event.clientY - parseFloat(element.style.top);\n            this.dragging_ = true;\n            if (this.dragListenerKeys_.length === 0) {\n                var drag = this.handleDraggerDrag_;\n                var end = this.handleDraggerEnd_;\n                this.dragListenerKeys_.push(listen(document, PointerEventType.POINTERMOVE, drag, this), listen(document, PointerEventType.POINTERUP, end, this));\n            }\n        }\n    };\n    /**\n     * Handle dragger drag events.\n     *\n     * @param {PointerEvent} event The drag event.\n     * @private\n     */\n    ZoomSlider.prototype.handleDraggerDrag_ = function (event) {\n        if (this.dragging_) {\n            var deltaX = event.clientX - this.startX_;\n            var deltaY = event.clientY - this.startY_;\n            var relativePosition = this.getRelativePosition_(deltaX, deltaY);\n            this.currentResolution_ = this.getResolutionForPosition_(relativePosition);\n            this.getMap().getView().setResolution(this.currentResolution_);\n        }\n    };\n    /**\n     * Handle dragger end events.\n     * @param {PointerEvent} event The drag event.\n     * @private\n     */\n    ZoomSlider.prototype.handleDraggerEnd_ = function (event) {\n        if (this.dragging_) {\n            var view = this.getMap().getView();\n            view.endInteraction();\n            this.dragging_ = false;\n            this.startX_ = undefined;\n            this.startY_ = undefined;\n            this.dragListenerKeys_.forEach(unlistenByKey);\n            this.dragListenerKeys_.length = 0;\n        }\n    };\n    /**\n     * Positions the thumb inside its container according to the given resolution.\n     *\n     * @param {number} res The res.\n     * @private\n     */\n    ZoomSlider.prototype.setThumbPosition_ = function (res) {\n        var position = this.getPositionForResolution_(res);\n        var thumb = /** @type {HTMLElement} */ (this.element.firstElementChild);\n        if (this.direction_ == Direction.HORIZONTAL) {\n            thumb.style.left = this.widthLimit_ * position + 'px';\n        }\n        else {\n            thumb.style.top = this.heightLimit_ * position + 'px';\n        }\n    };\n    /**\n     * Calculates the relative position of the thumb given x and y offsets.  The\n     * relative position scales from 0 to 1.  The x and y offsets are assumed to be\n     * in pixel units within the dragger limits.\n     *\n     * @param {number} x Pixel position relative to the left of the slider.\n     * @param {number} y Pixel position relative to the top of the slider.\n     * @return {number} The relative position of the thumb.\n     * @private\n     */\n    ZoomSlider.prototype.getRelativePosition_ = function (x, y) {\n        var amount;\n        if (this.direction_ === Direction.HORIZONTAL) {\n            amount = x / this.widthLimit_;\n        }\n        else {\n            amount = y / this.heightLimit_;\n        }\n        return clamp(amount, 0, 1);\n    };\n    /**\n     * Calculates the corresponding resolution of the thumb given its relative\n     * position (where 0 is the minimum and 1 is the maximum).\n     *\n     * @param {number} position The relative position of the thumb.\n     * @return {number} The corresponding resolution.\n     * @private\n     */\n    ZoomSlider.prototype.getResolutionForPosition_ = function (position) {\n        var fn = this.getMap().getView().getResolutionForValueFunction();\n        return fn(1 - position);\n    };\n    /**\n     * Determines the relative position of the slider for the given resolution.  A\n     * relative position of 0 corresponds to the minimum view resolution.  A\n     * relative position of 1 corresponds to the maximum view resolution.\n     *\n     * @param {number} res The resolution.\n     * @return {number} The relative position value (between 0 and 1).\n     * @private\n     */\n    ZoomSlider.prototype.getPositionForResolution_ = function (res) {\n        var fn = this.getMap().getView().getValueForResolutionFunction();\n        return clamp(1 - fn(res), 0, 1);\n    };\n    return ZoomSlider;\n}(Control));\n/**\n * Update the zoomslider element.\n * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n * @this {ZoomSlider}\n */\nexport function render(mapEvent) {\n    if (!mapEvent.frameState) {\n        return;\n    }\n    if (!this.sliderInitialized_) {\n        this.initSlider_();\n    }\n    var res = mapEvent.frameState.viewState.resolution;\n    this.currentResolution_ = res;\n    this.setThumbPosition_(res);\n}\nexport default ZoomSlider;\n//# sourceMappingURL=ZoomSlider.js.map"]},"metadata":{},"sourceType":"module"}