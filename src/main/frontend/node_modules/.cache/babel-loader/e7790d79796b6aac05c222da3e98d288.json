{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/PluggableMap\n */\n\n\nimport Collection from './Collection.js';\nimport CollectionEventType from './CollectionEventType.js';\nimport MapBrowserEvent from './MapBrowserEvent.js';\nimport MapBrowserEventHandler from './MapBrowserEventHandler.js';\nimport MapBrowserEventType from './MapBrowserEventType.js';\nimport MapEvent from './MapEvent.js';\nimport MapEventType from './MapEventType.js';\nimport MapProperty from './MapProperty.js';\nimport RenderEventType from './render/EventType.js';\nimport BaseObject, { getChangeEventType } from './Object.js';\nimport ObjectEventType from './ObjectEventType.js';\nimport TileQueue from './TileQueue.js';\nimport View from './View.js';\nimport ViewHint from './ViewHint.js';\nimport { assert } from './asserts.js';\nimport { removeNode } from './dom.js';\nimport { listen, unlistenByKey } from './events.js';\nimport EventType from './events/EventType.js';\nimport { clone, createOrUpdateEmpty, equals, getForViewAndSize, isEmpty } from './extent.js';\nimport { TRUE } from './functions.js';\nimport { DEVICE_PIXEL_RATIO, IMAGE_DECODE, PASSIVE_EVENT_LISTENERS } from './has.js';\nimport LayerGroup from './layer/Group.js';\nimport { hasArea } from './size.js';\nimport { DROP } from './structs/PriorityQueue.js';\nimport { create as createTransform, apply as applyTransform } from './transform.js';\nimport { toUserCoordinate, fromUserCoordinate } from './proj.js';\n/**\n * State of the current frame. Only `pixelRatio`, `time` and `viewState` should\n * be used in applications.\n * @typedef {Object} FrameState\n * @property {number} pixelRatio The pixel ratio of the frame.\n * @property {number} time The time when rendering of the frame was requested.\n * @property {import(\"./View.js\").State} viewState The state of the current view.\n * @property {boolean} animate\n * @property {import(\"./transform.js\").Transform} coordinateToPixelTransform\n * @property {null|import(\"./extent.js\").Extent} extent\n * @property {Array<DeclutterItems>} declutterItems\n * @property {number} index\n * @property {Array<import(\"./layer/Layer.js\").State>} layerStatesArray\n * @property {number} layerIndex\n * @property {import(\"./transform.js\").Transform} pixelToCoordinateTransform\n * @property {Array<PostRenderFunction>} postRenderFunctions\n * @property {import(\"./size.js\").Size} size\n * @property {TileQueue} tileQueue\n * @property {!Object<string, Object<string, boolean>>} usedTiles\n * @property {Array<number>} viewHints\n * @property {!Object<string, Object<string, boolean>>} wantedTiles\n */\n\n/**\n * @typedef {Object} DeclutterItems\n * @property {Array<*>} items Declutter items of an executor.\n * @property {number} opacity Layer opacity.\n */\n\n/**\n * @typedef {function(PluggableMap, ?FrameState): any} PostRenderFunction\n */\n\n/**\n * @typedef {Object} AtPixelOptions\n * @property {undefined|function(import(\"./layer/Layer.js\").default): boolean} [layerFilter] Layer filter\n * function. The filter function will receive one argument, the\n * {@link module:ol/layer/Layer layer-candidate} and it should return a boolean value.\n * Only layers which are visible and for which this function returns `true`\n * will be tested for features. By default, all visible layers will be tested.\n * @property {number} [hitTolerance=0] Hit-detection tolerance in pixels. Pixels\n * inside the radius around the given position will be checked for features.\n * @property {boolean} [checkWrapped=true] Check-Wrapped Will check for for wrapped geometries inside the range of\n *   +/- 1 world width. Works only if a projection is used that can be wrapped.\n */\n\n/**\n * @typedef {Object} MapOptionsInternal\n * @property {Collection<import(\"./control/Control.js\").default>} [controls]\n * @property {Collection<import(\"./interaction/Interaction.js\").default>} [interactions]\n * @property {HTMLElement|Document} keyboardEventTarget\n * @property {Collection<import(\"./Overlay.js\").default>} overlays\n * @property {Object<string, *>} values\n */\n\n/**\n * Object literal with config options for the map.\n * @typedef {Object} MapOptions\n * @property {Collection<import(\"./control/Control.js\").default>|Array<import(\"./control/Control.js\").default>} [controls]\n * Controls initially added to the map. If not specified,\n * {@link module:ol/control~defaults} is used.\n * @property {number} [pixelRatio=window.devicePixelRatio] The ratio between\n * physical pixels and device-independent pixels (dips) on the device.\n * @property {Collection<import(\"./interaction/Interaction.js\").default>|Array<import(\"./interaction/Interaction.js\").default>} [interactions]\n * Interactions that are initially added to the map. If not specified,\n * {@link module:ol/interaction~defaults} is used.\n * @property {HTMLElement|Document|string} [keyboardEventTarget] The element to\n * listen to keyboard events on. This determines when the `KeyboardPan` and\n * `KeyboardZoom` interactions trigger. For example, if this option is set to\n * `document` the keyboard interactions will always trigger. If this option is\n * not specified, the element the library listens to keyboard events on is the\n * map target (i.e. the user-provided div for the map). If this is not\n * `document`, the target element needs to be focused for key events to be\n * emitted, requiring that the target element has a `tabindex` attribute.\n * @property {Array<import(\"./layer/Base.js\").default>|Collection<import(\"./layer/Base.js\").default>|LayerGroup} [layers]\n * Layers. If this is not defined, a map with no layers will be rendered. Note\n * that layers are rendered in the order supplied, so if you want, for example,\n * a vector layer to appear on top of a tile layer, it must come after the tile\n * layer.\n * @property {number} [maxTilesLoading=16] Maximum number tiles to load\n * simultaneously.\n * @property {number} [moveTolerance=1] The minimum distance in pixels the\n * cursor must move to be detected as a map move event instead of a click.\n * Increasing this value can make it easier to click on the map.\n * @property {Collection<import(\"./Overlay.js\").default>|Array<import(\"./Overlay.js\").default>} [overlays]\n * Overlays initially added to the map. By default, no overlays are added.\n * @property {HTMLElement|string} [target] The container for the map, either the\n * element itself or the `id` of the element. If not specified at construction\n * time, {@link module:ol/Map~Map#setTarget} must be called for the map to be\n * rendered.\n * @property {View} [view] The map's view.  No layer sources will be\n * fetched unless this is specified at construction time or through\n * {@link module:ol/Map~Map#setView}.\n */\n\n/**\n * @fires import(\"./MapBrowserEvent.js\").MapBrowserEvent\n * @fires import(\"./MapEvent.js\").MapEvent\n * @fires import(\"./render/Event.js\").default#precompose\n * @fires import(\"./render/Event.js\").default#postcompose\n * @fires import(\"./render/Event.js\").default#rendercomplete\n * @api\n */\n\nvar PluggableMap =\n/** @class */\nfunction (_super) {\n  __extends(PluggableMap, _super);\n  /**\n   * @param {MapOptions} options Map options.\n   */\n\n\n  function PluggableMap(options) {\n    var _this = _super.call(this) || this;\n\n    var optionsInternal = createOptionsInternal(options);\n    /** @private */\n\n    _this.boundHandleBrowserEvent_ = _this.handleBrowserEvent.bind(_this);\n    /**\n     * @type {number}\n     * @private\n     */\n\n    _this.maxTilesLoading_ = options.maxTilesLoading !== undefined ? options.maxTilesLoading : 16;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.pixelRatio_ = options.pixelRatio !== undefined ? options.pixelRatio : DEVICE_PIXEL_RATIO;\n    /**\n     * @private\n     * @type {*}\n     */\n\n    _this.postRenderTimeoutHandle_;\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n\n    _this.animationDelayKey_;\n    /**\n     * @private\n     */\n\n    _this.animationDelay_ = function () {\n      this.animationDelayKey_ = undefined;\n      this.renderFrame_(Date.now());\n    }.bind(_this);\n    /**\n     * @private\n     * @type {import(\"./transform.js\").Transform}\n     */\n\n\n    _this.coordinateToPixelTransform_ = createTransform();\n    /**\n     * @private\n     * @type {import(\"./transform.js\").Transform}\n     */\n\n    _this.pixelToCoordinateTransform_ = createTransform();\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.frameIndex_ = 0;\n    /**\n     * @private\n     * @type {?FrameState}\n     */\n\n    _this.frameState_ = null;\n    /**\n     * The extent at the previous 'moveend' event.\n     * @private\n     * @type {import(\"./extent.js\").Extent}\n     */\n\n    _this.previousExtent_ = null;\n    /**\n     * @private\n     * @type {?import(\"./events.js\").EventsKey}\n     */\n\n    _this.viewPropertyListenerKey_ = null;\n    /**\n     * @private\n     * @type {?import(\"./events.js\").EventsKey}\n     */\n\n    _this.viewChangeListenerKey_ = null;\n    /**\n     * @private\n     * @type {?Array<import(\"./events.js\").EventsKey>}\n     */\n\n    _this.layerGroupPropertyListenerKeys_ = null;\n    /**\n     * @private\n     * @type {!HTMLElement}\n     */\n\n    _this.viewport_ = document.createElement('div');\n    _this.viewport_.className = 'ol-viewport' + ('ontouchstart' in window ? ' ol-touch' : '');\n    _this.viewport_.style.position = 'relative';\n    _this.viewport_.style.overflow = 'hidden';\n    _this.viewport_.style.width = '100%';\n    _this.viewport_.style.height = '100%';\n    /**\n     * @private\n     * @type {!HTMLElement}\n     */\n\n    _this.overlayContainer_ = document.createElement('div');\n    _this.overlayContainer_.style.position = 'absolute';\n    _this.overlayContainer_.style.zIndex = '0';\n    _this.overlayContainer_.style.width = '100%';\n    _this.overlayContainer_.style.height = '100%';\n    _this.overlayContainer_.className = 'ol-overlaycontainer';\n\n    _this.viewport_.appendChild(_this.overlayContainer_);\n    /**\n     * @private\n     * @type {!HTMLElement}\n     */\n\n\n    _this.overlayContainerStopEvent_ = document.createElement('div');\n    _this.overlayContainerStopEvent_.style.position = 'absolute';\n    _this.overlayContainerStopEvent_.style.zIndex = '0';\n    _this.overlayContainerStopEvent_.style.width = '100%';\n    _this.overlayContainerStopEvent_.style.height = '100%';\n    _this.overlayContainerStopEvent_.className = 'ol-overlaycontainer-stopevent';\n\n    _this.viewport_.appendChild(_this.overlayContainerStopEvent_);\n    /**\n     * @private\n     * @type {MapBrowserEventHandler}\n     */\n\n\n    _this.mapBrowserEventHandler_ = new MapBrowserEventHandler(_this, options.moveTolerance);\n\n    var handleMapBrowserEvent = _this.handleMapBrowserEvent.bind(_this);\n\n    for (var key in MapBrowserEventType) {\n      _this.mapBrowserEventHandler_.addEventListener(MapBrowserEventType[key], handleMapBrowserEvent);\n    }\n    /**\n     * @private\n     * @type {HTMLElement|Document}\n     */\n\n\n    _this.keyboardEventTarget_ = optionsInternal.keyboardEventTarget;\n    /**\n     * @private\n     * @type {?Array<import(\"./events.js\").EventsKey>}\n     */\n\n    _this.keyHandlerKeys_ = null;\n\n    var handleBrowserEvent = _this.handleBrowserEvent.bind(_this);\n\n    _this.viewport_.addEventListener(EventType.CONTEXTMENU, handleBrowserEvent, false);\n\n    _this.viewport_.addEventListener(EventType.WHEEL, handleBrowserEvent, PASSIVE_EVENT_LISTENERS ? {\n      passive: false\n    } : false);\n    /**\n     * @type {Collection<import(\"./control/Control.js\").default>}\n     * @protected\n     */\n\n\n    _this.controls = optionsInternal.controls || new Collection();\n    /**\n     * @type {Collection<import(\"./interaction/Interaction.js\").default>}\n     * @protected\n     */\n\n    _this.interactions = optionsInternal.interactions || new Collection();\n    /**\n     * @type {Collection<import(\"./Overlay.js\").default>}\n     * @private\n     */\n\n    _this.overlays_ = optionsInternal.overlays;\n    /**\n     * A lookup of overlays by id.\n     * @private\n     * @type {Object<string, import(\"./Overlay.js\").default>}\n     */\n\n    _this.overlayIdIndex_ = {};\n    /**\n     * @type {import(\"./renderer/Map.js\").default}\n     * @private\n     */\n\n    _this.renderer_ = null;\n    /**\n     * @type {undefined|function(Event): void}\n     * @private\n     */\n\n    _this.handleResize_;\n    /**\n     * @private\n     * @type {!Array<PostRenderFunction>}\n     */\n\n    _this.postRenderFunctions_ = [];\n    /**\n     * @private\n     * @type {TileQueue}\n     */\n\n    _this.tileQueue_ = new TileQueue(_this.getTilePriority.bind(_this), _this.handleTileChange_.bind(_this));\n\n    _this.addEventListener(getChangeEventType(MapProperty.LAYERGROUP), _this.handleLayerGroupChanged_);\n\n    _this.addEventListener(getChangeEventType(MapProperty.VIEW), _this.handleViewChanged_);\n\n    _this.addEventListener(getChangeEventType(MapProperty.SIZE), _this.handleSizeChanged_);\n\n    _this.addEventListener(getChangeEventType(MapProperty.TARGET), _this.handleTargetChanged_); // setProperties will trigger the rendering of the map if the map\n    // is \"defined\" already.\n\n\n    _this.setProperties(optionsInternal.values);\n\n    _this.controls.forEach(\n    /**\n     * @param {import(\"./control/Control.js\").default} control Control.\n     * @this {PluggableMap}\n     */\n    function (control) {\n      control.setMap(this);\n    }.bind(_this));\n\n    _this.controls.addEventListener(CollectionEventType.ADD,\n    /**\n     * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n     */\n    function (event) {\n      event.element.setMap(this);\n    }.bind(_this));\n\n    _this.controls.addEventListener(CollectionEventType.REMOVE,\n    /**\n     * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n     */\n    function (event) {\n      event.element.setMap(null);\n    }.bind(_this));\n\n    _this.interactions.forEach(\n    /**\n     * @param {import(\"./interaction/Interaction.js\").default} interaction Interaction.\n     * @this {PluggableMap}\n     */\n    function (interaction) {\n      interaction.setMap(this);\n    }.bind(_this));\n\n    _this.interactions.addEventListener(CollectionEventType.ADD,\n    /**\n     * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n     */\n    function (event) {\n      event.element.setMap(this);\n    }.bind(_this));\n\n    _this.interactions.addEventListener(CollectionEventType.REMOVE,\n    /**\n     * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n     */\n    function (event) {\n      event.element.setMap(null);\n    }.bind(_this));\n\n    _this.overlays_.forEach(_this.addOverlayInternal_.bind(_this));\n\n    _this.overlays_.addEventListener(CollectionEventType.ADD,\n    /**\n     * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n     */\n    function (event) {\n      this.addOverlayInternal_(\n      /** @type {import(\"./Overlay.js\").default} */\n      event.element);\n    }.bind(_this));\n\n    _this.overlays_.addEventListener(CollectionEventType.REMOVE,\n    /**\n     * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n     */\n    function (event) {\n      var overlay =\n      /** @type {import(\"./Overlay.js\").default} */\n      event.element;\n      var id = overlay.getId();\n\n      if (id !== undefined) {\n        delete this.overlayIdIndex_[id.toString()];\n      }\n\n      event.element.setMap(null);\n    }.bind(_this));\n\n    return _this;\n  }\n  /**\n   * @abstract\n   * @return {import(\"./renderer/Map.js\").default} The map renderer\n   */\n\n\n  PluggableMap.prototype.createRenderer = function () {\n    throw new Error('Use a map type that has a createRenderer method');\n  };\n  /**\n   * Add the given control to the map.\n   * @param {import(\"./control/Control.js\").default} control Control.\n   * @api\n   */\n\n\n  PluggableMap.prototype.addControl = function (control) {\n    this.getControls().push(control);\n  };\n  /**\n   * Add the given interaction to the map. If you want to add an interaction\n   * at another point of the collection use `getInteraction()` and the methods\n   * available on {@link module:ol/Collection~Collection}. This can be used to\n   * stop the event propagation from the handleEvent function. The interactions\n   * get to handle the events in the reverse order of this collection.\n   * @param {import(\"./interaction/Interaction.js\").default} interaction Interaction to add.\n   * @api\n   */\n\n\n  PluggableMap.prototype.addInteraction = function (interaction) {\n    this.getInteractions().push(interaction);\n  };\n  /**\n   * Adds the given layer to the top of this map. If you want to add a layer\n   * elsewhere in the stack, use `getLayers()` and the methods available on\n   * {@link module:ol/Collection~Collection}.\n   * @param {import(\"./layer/Base.js\").default} layer Layer.\n   * @api\n   */\n\n\n  PluggableMap.prototype.addLayer = function (layer) {\n    var layers = this.getLayerGroup().getLayers();\n    layers.push(layer);\n  };\n  /**\n   * Add the given overlay to the map.\n   * @param {import(\"./Overlay.js\").default} overlay Overlay.\n   * @api\n   */\n\n\n  PluggableMap.prototype.addOverlay = function (overlay) {\n    this.getOverlays().push(overlay);\n  };\n  /**\n   * This deals with map's overlay collection changes.\n   * @param {import(\"./Overlay.js\").default} overlay Overlay.\n   * @private\n   */\n\n\n  PluggableMap.prototype.addOverlayInternal_ = function (overlay) {\n    var id = overlay.getId();\n\n    if (id !== undefined) {\n      this.overlayIdIndex_[id.toString()] = overlay;\n    }\n\n    overlay.setMap(this);\n  };\n  /**\n   *\n   * @inheritDoc\n   */\n\n\n  PluggableMap.prototype.disposeInternal = function () {\n    this.mapBrowserEventHandler_.dispose();\n    this.viewport_.removeEventListener(EventType.CONTEXTMENU, this.boundHandleBrowserEvent_);\n    this.viewport_.removeEventListener(EventType.WHEEL, this.boundHandleBrowserEvent_);\n\n    if (this.handleResize_ !== undefined) {\n      removeEventListener(EventType.RESIZE, this.handleResize_, false);\n      this.handleResize_ = undefined;\n    }\n\n    this.setTarget(null);\n\n    _super.prototype.disposeInternal.call(this);\n  };\n  /**\n   * Detect features that intersect a pixel on the viewport, and execute a\n   * callback with each intersecting feature. Layers included in the detection can\n   * be configured through the `layerFilter` option in `opt_options`.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\n   * @param {function(this: S, import(\"./Feature.js\").FeatureLike,\n   *     import(\"./layer/Layer.js\").default): T} callback Feature callback. The callback will be\n   *     called with two arguments. The first argument is one\n   *     {@link module:ol/Feature feature} or\n   *     {@link module:ol/render/Feature render feature} at the pixel, the second is\n   *     the {@link module:ol/layer/Layer layer} of the feature and will be null for\n   *     unmanaged layers. To stop detection, callback functions can return a\n   *     truthy value.\n   * @param {AtPixelOptions=} opt_options Optional options.\n   * @return {T|undefined} Callback result, i.e. the return value of last\n   * callback execution, or the first truthy callback return value.\n   * @template S,T\n   * @api\n   */\n\n\n  PluggableMap.prototype.forEachFeatureAtPixel = function (pixel, callback, opt_options) {\n    if (!this.frameState_) {\n      return;\n    }\n\n    var coordinate = this.getCoordinateFromPixelInternal(pixel);\n    opt_options = opt_options !== undefined ? opt_options : {};\n    var hitTolerance = opt_options.hitTolerance !== undefined ? opt_options.hitTolerance * this.frameState_.pixelRatio : 0;\n    var layerFilter = opt_options.layerFilter !== undefined ? opt_options.layerFilter : TRUE;\n    var checkWrapped = opt_options.checkWrapped !== false;\n    return this.renderer_.forEachFeatureAtCoordinate(coordinate, this.frameState_, hitTolerance, checkWrapped, callback, null, layerFilter, null);\n  };\n  /**\n   * Get all features that intersect a pixel on the viewport.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\n   * @param {AtPixelOptions=} opt_options Optional options.\n   * @return {Array<import(\"./Feature.js\").FeatureLike>} The detected features or\n   * an empty array if none were found.\n   * @api\n   */\n\n\n  PluggableMap.prototype.getFeaturesAtPixel = function (pixel, opt_options) {\n    var features = [];\n    this.forEachFeatureAtPixel(pixel, function (feature) {\n      features.push(feature);\n    }, opt_options);\n    return features;\n  };\n  /**\n   * Detect layers that have a color value at a pixel on the viewport, and\n   * execute a callback with each matching layer. Layers included in the\n   * detection can be configured through `opt_layerFilter`.\n   *\n   * Note: this may give false positives unless the map layers have had different `className`\n   * properties assigned to them.\n   *\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\n   * @param {function(this: S, import(\"./layer/Layer.js\").default, (Uint8ClampedArray|Uint8Array)): T} callback\n   *     Layer callback. This callback will receive two arguments: first is the\n   *     {@link module:ol/layer/Layer layer}, second argument is an array representing\n   *     [R, G, B, A] pixel values (0 - 255) and will be `null` for layer types\n   *     that do not currently support this argument. To stop detection, callback\n   *     functions can return a truthy value.\n   * @param {AtPixelOptions=} opt_options Configuration options.\n   * @return {T|undefined} Callback result, i.e. the return value of last\n   * callback execution, or the first truthy callback return value.\n   * @template S,T\n   * @api\n   */\n\n\n  PluggableMap.prototype.forEachLayerAtPixel = function (pixel, callback, opt_options) {\n    if (!this.frameState_) {\n      return;\n    }\n\n    var options = opt_options || {};\n    var hitTolerance = options.hitTolerance !== undefined ? options.hitTolerance * this.frameState_.pixelRatio : 0;\n    var layerFilter = options.layerFilter || TRUE;\n    return this.renderer_.forEachLayerAtPixel(pixel, this.frameState_, hitTolerance, callback, layerFilter);\n  };\n  /**\n   * Detect if features intersect a pixel on the viewport. Layers included in the\n   * detection can be configured through `opt_layerFilter`.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\n   * @param {AtPixelOptions=} opt_options Optional options.\n   * @return {boolean} Is there a feature at the given pixel?\n   * @api\n   */\n\n\n  PluggableMap.prototype.hasFeatureAtPixel = function (pixel, opt_options) {\n    if (!this.frameState_) {\n      return false;\n    }\n\n    var coordinate = this.getCoordinateFromPixelInternal(pixel);\n    opt_options = opt_options !== undefined ? opt_options : {};\n    var layerFilter = opt_options.layerFilter !== undefined ? opt_options.layerFilter : TRUE;\n    var hitTolerance = opt_options.hitTolerance !== undefined ? opt_options.hitTolerance * this.frameState_.pixelRatio : 0;\n    var checkWrapped = opt_options.checkWrapped !== false;\n    return this.renderer_.hasFeatureAtCoordinate(coordinate, this.frameState_, hitTolerance, checkWrapped, layerFilter, null);\n  };\n  /**\n   * Returns the coordinate in user projection for a browser event.\n   * @param {Event} event Event.\n   * @return {import(\"./coordinate.js\").Coordinate} Coordinate.\n   * @api\n   */\n\n\n  PluggableMap.prototype.getEventCoordinate = function (event) {\n    return this.getCoordinateFromPixel(this.getEventPixel(event));\n  };\n  /**\n   * Returns the coordinate in view projection for a browser event.\n   * @param {Event} event Event.\n   * @return {import(\"./coordinate.js\").Coordinate} Coordinate.\n   */\n\n\n  PluggableMap.prototype.getEventCoordinateInternal = function (event) {\n    return this.getCoordinateFromPixelInternal(this.getEventPixel(event));\n  };\n  /**\n   * Returns the map pixel position for a browser event relative to the viewport.\n   * @param {Event|TouchEvent} event Event.\n   * @return {import(\"./pixel.js\").Pixel} Pixel.\n   * @api\n   */\n\n\n  PluggableMap.prototype.getEventPixel = function (event) {\n    var viewportPosition = this.viewport_.getBoundingClientRect();\n    var eventPosition = 'changedTouches' in event ?\n    /** @type {TouchEvent} */\n    event.changedTouches[0] :\n    /** @type {MouseEvent} */\n    event;\n    return [eventPosition.clientX - viewportPosition.left, eventPosition.clientY - viewportPosition.top];\n  };\n  /**\n   * Get the target in which this map is rendered.\n   * Note that this returns what is entered as an option or in setTarget:\n   * if that was an element, it returns an element; if a string, it returns that.\n   * @return {HTMLElement|string|undefined} The Element or id of the Element that the\n   *     map is rendered in.\n   * @observable\n   * @api\n   */\n\n\n  PluggableMap.prototype.getTarget = function () {\n    return (\n      /** @type {HTMLElement|string|undefined} */\n      this.get(MapProperty.TARGET)\n    );\n  };\n  /**\n   * Get the DOM element into which this map is rendered. In contrast to\n   * `getTarget` this method always return an `Element`, or `null` if the\n   * map has no target.\n   * @return {HTMLElement} The element that the map is rendered in.\n   * @api\n   */\n\n\n  PluggableMap.prototype.getTargetElement = function () {\n    var target = this.getTarget();\n\n    if (target !== undefined) {\n      return typeof target === 'string' ? document.getElementById(target) : target;\n    } else {\n      return null;\n    }\n  };\n  /**\n   * Get the coordinate for a given pixel.  This returns a coordinate in the\n   * user projection.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel position in the map viewport.\n   * @return {import(\"./coordinate.js\").Coordinate} The coordinate for the pixel position.\n   * @api\n   */\n\n\n  PluggableMap.prototype.getCoordinateFromPixel = function (pixel) {\n    return toUserCoordinate(this.getCoordinateFromPixelInternal(pixel), this.getView().getProjection());\n  };\n  /**\n   * Get the coordinate for a given pixel.  This returns a coordinate in the\n   * map view projection.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel position in the map viewport.\n   * @return {import(\"./coordinate.js\").Coordinate} The coordinate for the pixel position.\n   */\n\n\n  PluggableMap.prototype.getCoordinateFromPixelInternal = function (pixel) {\n    var frameState = this.frameState_;\n\n    if (!frameState) {\n      return null;\n    } else {\n      return applyTransform(frameState.pixelToCoordinateTransform, pixel.slice());\n    }\n  };\n  /**\n   * Get the map controls. Modifying this collection changes the controls\n   * associated with the map.\n   * @return {Collection<import(\"./control/Control.js\").default>} Controls.\n   * @api\n   */\n\n\n  PluggableMap.prototype.getControls = function () {\n    return this.controls;\n  };\n  /**\n   * Get the map overlays. Modifying this collection changes the overlays\n   * associated with the map.\n   * @return {Collection<import(\"./Overlay.js\").default>} Overlays.\n   * @api\n   */\n\n\n  PluggableMap.prototype.getOverlays = function () {\n    return this.overlays_;\n  };\n  /**\n   * Get an overlay by its identifier (the value returned by overlay.getId()).\n   * Note that the index treats string and numeric identifiers as the same. So\n   * `map.getOverlayById(2)` will return an overlay with id `'2'` or `2`.\n   * @param {string|number} id Overlay identifier.\n   * @return {import(\"./Overlay.js\").default} Overlay.\n   * @api\n   */\n\n\n  PluggableMap.prototype.getOverlayById = function (id) {\n    var overlay = this.overlayIdIndex_[id.toString()];\n    return overlay !== undefined ? overlay : null;\n  };\n  /**\n   * Get the map interactions. Modifying this collection changes the interactions\n   * associated with the map.\n   *\n   * Interactions are used for e.g. pan, zoom and rotate.\n   * @return {Collection<import(\"./interaction/Interaction.js\").default>} Interactions.\n   * @api\n   */\n\n\n  PluggableMap.prototype.getInteractions = function () {\n    return this.interactions;\n  };\n  /**\n   * Get the layergroup associated with this map.\n   * @return {LayerGroup} A layer group containing the layers in this map.\n   * @observable\n   * @api\n   */\n\n\n  PluggableMap.prototype.getLayerGroup = function () {\n    return (\n      /** @type {LayerGroup} */\n      this.get(MapProperty.LAYERGROUP)\n    );\n  };\n  /**\n   * Get the collection of layers associated with this map.\n   * @return {!Collection<import(\"./layer/Base.js\").default>} Layers.\n   * @api\n   */\n\n\n  PluggableMap.prototype.getLayers = function () {\n    var layers = this.getLayerGroup().getLayers();\n    return layers;\n  };\n  /**\n   * @return {boolean} Layers have sources that are still loading.\n   */\n\n\n  PluggableMap.prototype.getLoading = function () {\n    var layerStatesArray = this.getLayerGroup().getLayerStatesArray();\n\n    for (var i = 0, ii = layerStatesArray.length; i < ii; ++i) {\n      var layer = layerStatesArray[i].layer;\n      var source =\n      /** @type {import(\"./layer/Layer.js\").default} */\n      layer.getSource();\n\n      if (source && source.loading) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n  /**\n   * Get the pixel for a coordinate.  This takes a coordinate in the user\n   * projection and returns the corresponding pixel.\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate A map coordinate.\n   * @return {import(\"./pixel.js\").Pixel} A pixel position in the map viewport.\n   * @api\n   */\n\n\n  PluggableMap.prototype.getPixelFromCoordinate = function (coordinate) {\n    var viewCoordinate = fromUserCoordinate(coordinate, this.getView().getProjection());\n    return this.getPixelFromCoordinateInternal(viewCoordinate);\n  };\n  /**\n   * Get the pixel for a coordinate.  This takes a coordinate in the map view\n   * projection and returns the corresponding pixel.\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate A map coordinate.\n   * @return {import(\"./pixel.js\").Pixel} A pixel position in the map viewport.\n   */\n\n\n  PluggableMap.prototype.getPixelFromCoordinateInternal = function (coordinate) {\n    var frameState = this.frameState_;\n\n    if (!frameState) {\n      return null;\n    } else {\n      return applyTransform(frameState.coordinateToPixelTransform, coordinate.slice(0, 2));\n    }\n  };\n  /**\n   * Get the map renderer.\n   * @return {import(\"./renderer/Map.js\").default} Renderer\n   */\n\n\n  PluggableMap.prototype.getRenderer = function () {\n    return this.renderer_;\n  };\n  /**\n   * Get the size of this map.\n   * @return {import(\"./size.js\").Size|undefined} The size in pixels of the map in the DOM.\n   * @observable\n   * @api\n   */\n\n\n  PluggableMap.prototype.getSize = function () {\n    return (\n      /** @type {import(\"./size.js\").Size|undefined} */\n      this.get(MapProperty.SIZE)\n    );\n  };\n  /**\n   * Get the view associated with this map. A view manages properties such as\n   * center and resolution.\n   * @return {View} The view that controls this map.\n   * @observable\n   * @api\n   */\n\n\n  PluggableMap.prototype.getView = function () {\n    return (\n      /** @type {View} */\n      this.get(MapProperty.VIEW)\n    );\n  };\n  /**\n   * Get the element that serves as the map viewport.\n   * @return {HTMLElement} Viewport.\n   * @api\n   */\n\n\n  PluggableMap.prototype.getViewport = function () {\n    return this.viewport_;\n  };\n  /**\n   * Get the element that serves as the container for overlays.  Elements added to\n   * this container will let mousedown and touchstart events through to the map,\n   * so clicks and gestures on an overlay will trigger {@link module:ol/MapBrowserEvent~MapBrowserEvent}\n   * events.\n   * @return {!HTMLElement} The map's overlay container.\n   */\n\n\n  PluggableMap.prototype.getOverlayContainer = function () {\n    return this.overlayContainer_;\n  };\n  /**\n   * Get the element that serves as a container for overlays that don't allow\n   * event propagation. Elements added to this container won't let mousedown and\n   * touchstart events through to the map, so clicks and gestures on an overlay\n   * don't trigger any {@link module:ol/MapBrowserEvent~MapBrowserEvent}.\n   * @return {!HTMLElement} The map's overlay container that stops events.\n   */\n\n\n  PluggableMap.prototype.getOverlayContainerStopEvent = function () {\n    return this.overlayContainerStopEvent_;\n  };\n  /**\n   * @param {import(\"./Tile.js\").default} tile Tile.\n   * @param {string} tileSourceKey Tile source key.\n   * @param {import(\"./coordinate.js\").Coordinate} tileCenter Tile center.\n   * @param {number} tileResolution Tile resolution.\n   * @return {number} Tile priority.\n   */\n\n\n  PluggableMap.prototype.getTilePriority = function (tile, tileSourceKey, tileCenter, tileResolution) {\n    // Filter out tiles at higher zoom levels than the current zoom level, or that\n    // are outside the visible extent.\n    var frameState = this.frameState_;\n\n    if (!frameState || !(tileSourceKey in frameState.wantedTiles)) {\n      return DROP;\n    }\n\n    if (!frameState.wantedTiles[tileSourceKey][tile.getKey()]) {\n      return DROP;\n    } // Prioritize the highest zoom level tiles closest to the focus.\n    // Tiles at higher zoom levels are prioritized using Math.log(tileResolution).\n    // Within a zoom level, tiles are prioritized by the distance in pixels between\n    // the center of the tile and the center of the viewport.  The factor of 65536\n    // means that the prioritization should behave as desired for tiles up to\n    // 65536 * Math.log(2) = 45426 pixels from the focus.\n\n\n    var center = frameState.viewState.center;\n    var deltaX = tileCenter[0] - center[0];\n    var deltaY = tileCenter[1] - center[1];\n    return 65536 * Math.log(tileResolution) + Math.sqrt(deltaX * deltaX + deltaY * deltaY) / tileResolution;\n  };\n  /**\n   * @param {Event} browserEvent Browser event.\n   * @param {string=} opt_type Type.\n   */\n\n\n  PluggableMap.prototype.handleBrowserEvent = function (browserEvent, opt_type) {\n    var type = opt_type || browserEvent.type;\n    var mapBrowserEvent = new MapBrowserEvent(type, this, browserEvent);\n    this.handleMapBrowserEvent(mapBrowserEvent);\n  };\n  /**\n   * @param {MapBrowserEvent} mapBrowserEvent The event to handle.\n   */\n\n\n  PluggableMap.prototype.handleMapBrowserEvent = function (mapBrowserEvent) {\n    if (!this.frameState_) {\n      // With no view defined, we cannot translate pixels into geographical\n      // coordinates so interactions cannot be used.\n      return;\n    }\n\n    var target =\n    /** @type {Node} */\n    mapBrowserEvent.originalEvent.target;\n\n    if (!mapBrowserEvent.dragging) {\n      if (this.overlayContainerStopEvent_.contains(target) || !document.body.contains(target)) {\n        // Abort if the event target is a child of the container that doesn't allow\n        // event propagation or is no longer in the page. It's possible for the target to no longer\n        // be in the page if it has been removed in an event listener, this might happen in a Control\n        // that recreates it's content based on user interaction either manually or via a render\n        // in something like https://reactjs.org/\n        return;\n      }\n    }\n\n    mapBrowserEvent.frameState = this.frameState_;\n    var interactionsArray = this.getInteractions().getArray();\n\n    if (this.dispatchEvent(mapBrowserEvent) !== false) {\n      for (var i = interactionsArray.length - 1; i >= 0; i--) {\n        var interaction = interactionsArray[i];\n\n        if (!interaction.getActive()) {\n          continue;\n        }\n\n        var cont = interaction.handleEvent(mapBrowserEvent);\n\n        if (!cont) {\n          break;\n        }\n      }\n    }\n  };\n  /**\n   * @protected\n   */\n\n\n  PluggableMap.prototype.handlePostRender = function () {\n    var frameState = this.frameState_; // Manage the tile queue\n    // Image loads are expensive and a limited resource, so try to use them\n    // efficiently:\n    // * When the view is static we allow a large number of parallel tile loads\n    //   to complete the frame as quickly as possible.\n    // * When animating or interacting, image loads can cause janks, so we reduce\n    //   the maximum number of loads per frame and limit the number of parallel\n    //   tile loads to remain reactive to view changes and to reduce the chance of\n    //   loading tiles that will quickly disappear from view.\n\n    var tileQueue = this.tileQueue_;\n\n    if (!tileQueue.isEmpty()) {\n      var maxTotalLoading = this.maxTilesLoading_;\n      var maxNewLoads = maxTotalLoading;\n\n      if (frameState) {\n        var hints = frameState.viewHints;\n\n        if (hints[ViewHint.ANIMATING] || hints[ViewHint.INTERACTING]) {\n          var lowOnFrameBudget = !IMAGE_DECODE && Date.now() - frameState.time > 8;\n          maxTotalLoading = lowOnFrameBudget ? 0 : 8;\n          maxNewLoads = lowOnFrameBudget ? 0 : 2;\n        }\n      }\n\n      if (tileQueue.getTilesLoading() < maxTotalLoading) {\n        tileQueue.reprioritize(); // FIXME only call if view has changed\n\n        tileQueue.loadMoreTiles(maxTotalLoading, maxNewLoads);\n      }\n    }\n\n    if (frameState && this.hasListener(RenderEventType.RENDERCOMPLETE) && !frameState.animate && !this.tileQueue_.getTilesLoading() && !this.getLoading()) {\n      this.renderer_.dispatchRenderEvent(RenderEventType.RENDERCOMPLETE, frameState);\n    }\n\n    var postRenderFunctions = this.postRenderFunctions_;\n\n    for (var i = 0, ii = postRenderFunctions.length; i < ii; ++i) {\n      postRenderFunctions[i](this, frameState);\n    }\n\n    postRenderFunctions.length = 0;\n  };\n  /**\n   * @private\n   */\n\n\n  PluggableMap.prototype.handleSizeChanged_ = function () {\n    if (this.getView()) {\n      this.getView().resolveConstraints(0);\n    }\n\n    this.render();\n  };\n  /**\n   * @private\n   */\n\n\n  PluggableMap.prototype.handleTargetChanged_ = function () {\n    // target may be undefined, null, a string or an Element.\n    // If it's a string we convert it to an Element before proceeding.\n    // If it's not now an Element we remove the viewport from the DOM.\n    // If it's an Element we append the viewport element to it.\n    var targetElement;\n\n    if (this.getTarget()) {\n      targetElement = this.getTargetElement();\n    }\n\n    if (this.keyHandlerKeys_) {\n      for (var i = 0, ii = this.keyHandlerKeys_.length; i < ii; ++i) {\n        unlistenByKey(this.keyHandlerKeys_[i]);\n      }\n\n      this.keyHandlerKeys_ = null;\n    }\n\n    if (!targetElement) {\n      if (this.renderer_) {\n        clearTimeout(this.postRenderTimeoutHandle_);\n        this.postRenderFunctions_.length = 0;\n        this.renderer_.dispose();\n        this.renderer_ = null;\n      }\n\n      if (this.animationDelayKey_) {\n        cancelAnimationFrame(this.animationDelayKey_);\n        this.animationDelayKey_ = undefined;\n      }\n\n      removeNode(this.viewport_);\n\n      if (this.handleResize_ !== undefined) {\n        removeEventListener(EventType.RESIZE, this.handleResize_, false);\n        this.handleResize_ = undefined;\n      }\n    } else {\n      targetElement.appendChild(this.viewport_);\n\n      if (!this.renderer_) {\n        this.renderer_ = this.createRenderer();\n      }\n\n      var keyboardEventTarget = !this.keyboardEventTarget_ ? targetElement : this.keyboardEventTarget_;\n      this.keyHandlerKeys_ = [listen(keyboardEventTarget, EventType.KEYDOWN, this.handleBrowserEvent, this), listen(keyboardEventTarget, EventType.KEYPRESS, this.handleBrowserEvent, this)];\n\n      if (!this.handleResize_) {\n        this.handleResize_ = this.updateSize.bind(this);\n        window.addEventListener(EventType.RESIZE, this.handleResize_, false);\n      }\n    }\n\n    this.updateSize(); // updateSize calls setSize, so no need to call this.render\n    // ourselves here.\n  };\n  /**\n   * @private\n   */\n\n\n  PluggableMap.prototype.handleTileChange_ = function () {\n    this.render();\n  };\n  /**\n   * @private\n   */\n\n\n  PluggableMap.prototype.handleViewPropertyChanged_ = function () {\n    this.render();\n  };\n  /**\n   * @private\n   */\n\n\n  PluggableMap.prototype.handleViewChanged_ = function () {\n    if (this.viewPropertyListenerKey_) {\n      unlistenByKey(this.viewPropertyListenerKey_);\n      this.viewPropertyListenerKey_ = null;\n    }\n\n    if (this.viewChangeListenerKey_) {\n      unlistenByKey(this.viewChangeListenerKey_);\n      this.viewChangeListenerKey_ = null;\n    }\n\n    var view = this.getView();\n\n    if (view) {\n      this.updateViewportSize_();\n      this.viewPropertyListenerKey_ = listen(view, ObjectEventType.PROPERTYCHANGE, this.handleViewPropertyChanged_, this);\n      this.viewChangeListenerKey_ = listen(view, EventType.CHANGE, this.handleViewPropertyChanged_, this);\n      view.resolveConstraints(0);\n    }\n\n    this.render();\n  };\n  /**\n   * @private\n   */\n\n\n  PluggableMap.prototype.handleLayerGroupChanged_ = function () {\n    if (this.layerGroupPropertyListenerKeys_) {\n      this.layerGroupPropertyListenerKeys_.forEach(unlistenByKey);\n      this.layerGroupPropertyListenerKeys_ = null;\n    }\n\n    var layerGroup = this.getLayerGroup();\n\n    if (layerGroup) {\n      this.layerGroupPropertyListenerKeys_ = [listen(layerGroup, ObjectEventType.PROPERTYCHANGE, this.render, this), listen(layerGroup, EventType.CHANGE, this.render, this)];\n    }\n\n    this.render();\n  };\n  /**\n   * @return {boolean} Is rendered.\n   */\n\n\n  PluggableMap.prototype.isRendered = function () {\n    return !!this.frameState_;\n  };\n  /**\n   * Requests an immediate render in a synchronous manner.\n   * @api\n   */\n\n\n  PluggableMap.prototype.renderSync = function () {\n    if (this.animationDelayKey_) {\n      cancelAnimationFrame(this.animationDelayKey_);\n    }\n\n    this.animationDelay_();\n  };\n  /**\n   * Redraws all text after new fonts have loaded\n   */\n\n\n  PluggableMap.prototype.redrawText = function () {\n    var layerStates = this.getLayerGroup().getLayerStatesArray();\n\n    for (var i = 0, ii = layerStates.length; i < ii; ++i) {\n      var layer = layerStates[i].layer;\n\n      if (layer.hasRenderer()) {\n        layer.getRenderer().handleFontsChanged();\n      }\n    }\n  };\n  /**\n   * Request a map rendering (at the next animation frame).\n   * @api\n   */\n\n\n  PluggableMap.prototype.render = function () {\n    if (this.renderer_ && this.animationDelayKey_ === undefined) {\n      this.animationDelayKey_ = requestAnimationFrame(this.animationDelay_);\n    }\n  };\n  /**\n   * Remove the given control from the map.\n   * @param {import(\"./control/Control.js\").default} control Control.\n   * @return {import(\"./control/Control.js\").default|undefined} The removed control (or undefined\n   *     if the control was not found).\n   * @api\n   */\n\n\n  PluggableMap.prototype.removeControl = function (control) {\n    return this.getControls().remove(control);\n  };\n  /**\n   * Remove the given interaction from the map.\n   * @param {import(\"./interaction/Interaction.js\").default} interaction Interaction to remove.\n   * @return {import(\"./interaction/Interaction.js\").default|undefined} The removed interaction (or\n   *     undefined if the interaction was not found).\n   * @api\n   */\n\n\n  PluggableMap.prototype.removeInteraction = function (interaction) {\n    return this.getInteractions().remove(interaction);\n  };\n  /**\n   * Removes the given layer from the map.\n   * @param {import(\"./layer/Base.js\").default} layer Layer.\n   * @return {import(\"./layer/Base.js\").default|undefined} The removed layer (or undefined if the\n   *     layer was not found).\n   * @api\n   */\n\n\n  PluggableMap.prototype.removeLayer = function (layer) {\n    var layers = this.getLayerGroup().getLayers();\n    return layers.remove(layer);\n  };\n  /**\n   * Remove the given overlay from the map.\n   * @param {import(\"./Overlay.js\").default} overlay Overlay.\n   * @return {import(\"./Overlay.js\").default|undefined} The removed overlay (or undefined\n   *     if the overlay was not found).\n   * @api\n   */\n\n\n  PluggableMap.prototype.removeOverlay = function (overlay) {\n    return this.getOverlays().remove(overlay);\n  };\n  /**\n   * @param {number} time Time.\n   * @private\n   */\n\n\n  PluggableMap.prototype.renderFrame_ = function (time) {\n    var size = this.getSize();\n    var view = this.getView();\n    var previousFrameState = this.frameState_;\n    /** @type {?FrameState} */\n\n    var frameState = null;\n\n    if (size !== undefined && hasArea(size) && view && view.isDef()) {\n      var viewHints = view.getHints(this.frameState_ ? this.frameState_.viewHints : undefined);\n      var viewState = view.getState();\n      frameState = {\n        animate: false,\n        coordinateToPixelTransform: this.coordinateToPixelTransform_,\n        declutterItems: previousFrameState ? previousFrameState.declutterItems : [],\n        extent: getForViewAndSize(viewState.center, viewState.resolution, viewState.rotation, size),\n        index: this.frameIndex_++,\n        layerIndex: 0,\n        layerStatesArray: this.getLayerGroup().getLayerStatesArray(),\n        pixelRatio: this.pixelRatio_,\n        pixelToCoordinateTransform: this.pixelToCoordinateTransform_,\n        postRenderFunctions: [],\n        size: size,\n        tileQueue: this.tileQueue_,\n        time: time,\n        usedTiles: {},\n        viewState: viewState,\n        viewHints: viewHints,\n        wantedTiles: {}\n      };\n    }\n\n    this.frameState_ = frameState;\n    this.renderer_.renderFrame(frameState);\n\n    if (frameState) {\n      if (frameState.animate) {\n        this.render();\n      }\n\n      Array.prototype.push.apply(this.postRenderFunctions_, frameState.postRenderFunctions);\n\n      if (previousFrameState) {\n        var moveStart = !this.previousExtent_ || !isEmpty(this.previousExtent_) && !equals(frameState.extent, this.previousExtent_);\n\n        if (moveStart) {\n          this.dispatchEvent(new MapEvent(MapEventType.MOVESTART, this, previousFrameState));\n          this.previousExtent_ = createOrUpdateEmpty(this.previousExtent_);\n        }\n      }\n\n      var idle = this.previousExtent_ && !frameState.viewHints[ViewHint.ANIMATING] && !frameState.viewHints[ViewHint.INTERACTING] && !equals(frameState.extent, this.previousExtent_);\n\n      if (idle) {\n        this.dispatchEvent(new MapEvent(MapEventType.MOVEEND, this, frameState));\n        clone(frameState.extent, this.previousExtent_);\n      }\n    }\n\n    this.dispatchEvent(new MapEvent(MapEventType.POSTRENDER, this, frameState));\n    this.postRenderTimeoutHandle_ = setTimeout(this.handlePostRender.bind(this), 0);\n  };\n  /**\n   * Sets the layergroup of this map.\n   * @param {LayerGroup} layerGroup A layer group containing the layers in this map.\n   * @observable\n   * @api\n   */\n\n\n  PluggableMap.prototype.setLayerGroup = function (layerGroup) {\n    this.set(MapProperty.LAYERGROUP, layerGroup);\n  };\n  /**\n   * Set the size of this map.\n   * @param {import(\"./size.js\").Size|undefined} size The size in pixels of the map in the DOM.\n   * @observable\n   * @api\n   */\n\n\n  PluggableMap.prototype.setSize = function (size) {\n    this.set(MapProperty.SIZE, size);\n  };\n  /**\n   * Set the target element to render this map into.\n   * @param {HTMLElement|string|undefined} target The Element or id of the Element\n   *     that the map is rendered in.\n   * @observable\n   * @api\n   */\n\n\n  PluggableMap.prototype.setTarget = function (target) {\n    this.set(MapProperty.TARGET, target);\n  };\n  /**\n   * Set the view for this map.\n   * @param {View} view The view that controls this map.\n   * @observable\n   * @api\n   */\n\n\n  PluggableMap.prototype.setView = function (view) {\n    this.set(MapProperty.VIEW, view);\n  };\n  /**\n   * Force a recalculation of the map viewport size.  This should be called when\n   * third-party code changes the size of the map viewport.\n   * @api\n   */\n\n\n  PluggableMap.prototype.updateSize = function () {\n    var targetElement = this.getTargetElement();\n\n    if (!targetElement) {\n      this.setSize(undefined);\n    } else {\n      var computedStyle = getComputedStyle(targetElement);\n      this.setSize([targetElement.offsetWidth - parseFloat(computedStyle['borderLeftWidth']) - parseFloat(computedStyle['paddingLeft']) - parseFloat(computedStyle['paddingRight']) - parseFloat(computedStyle['borderRightWidth']), targetElement.offsetHeight - parseFloat(computedStyle['borderTopWidth']) - parseFloat(computedStyle['paddingTop']) - parseFloat(computedStyle['paddingBottom']) - parseFloat(computedStyle['borderBottomWidth'])]);\n    }\n\n    this.updateViewportSize_();\n  };\n  /**\n   * Recomputes the viewport size and save it on the view object (if any)\n   * @private\n   */\n\n\n  PluggableMap.prototype.updateViewportSize_ = function () {\n    var view = this.getView();\n\n    if (view) {\n      var size = undefined;\n      var computedStyle = getComputedStyle(this.viewport_);\n\n      if (computedStyle.width && computedStyle.height) {\n        size = [parseInt(computedStyle.width, 10), parseInt(computedStyle.height, 10)];\n      }\n\n      view.setViewportSize(size);\n    }\n  };\n\n  return PluggableMap;\n}(BaseObject);\n/**\n * @param {MapOptions} options Map options.\n * @return {MapOptionsInternal} Internal map options.\n */\n\n\nfunction createOptionsInternal(options) {\n  /**\n   * @type {HTMLElement|Document}\n   */\n  var keyboardEventTarget = null;\n\n  if (options.keyboardEventTarget !== undefined) {\n    keyboardEventTarget = typeof options.keyboardEventTarget === 'string' ? document.getElementById(options.keyboardEventTarget) : options.keyboardEventTarget;\n  }\n  /**\n   * @type {Object<string, *>}\n   */\n\n\n  var values = {};\n  var layerGroup = options.layers && typeof\n  /** @type {?} */\n  options.layers.getLayers === 'function' ?\n  /** @type {LayerGroup} */\n  options.layers : new LayerGroup({\n    layers:\n    /** @type {Collection} */\n    options.layers\n  });\n  values[MapProperty.LAYERGROUP] = layerGroup;\n  values[MapProperty.TARGET] = options.target;\n  values[MapProperty.VIEW] = options.view !== undefined ? options.view : new View();\n  var controls;\n\n  if (options.controls !== undefined) {\n    if (Array.isArray(options.controls)) {\n      controls = new Collection(options.controls.slice());\n    } else {\n      assert(typeof\n      /** @type {?} */\n      options.controls.getArray === 'function', 47); // Expected `controls` to be an array or an `import(\"./Collection.js\").Collection`\n\n      controls =\n      /** @type {Collection} */\n      options.controls;\n    }\n  }\n\n  var interactions;\n\n  if (options.interactions !== undefined) {\n    if (Array.isArray(options.interactions)) {\n      interactions = new Collection(options.interactions.slice());\n    } else {\n      assert(typeof\n      /** @type {?} */\n      options.interactions.getArray === 'function', 48); // Expected `interactions` to be an array or an `import(\"./Collection.js\").Collection`\n\n      interactions =\n      /** @type {Collection} */\n      options.interactions;\n    }\n  }\n\n  var overlays;\n\n  if (options.overlays !== undefined) {\n    if (Array.isArray(options.overlays)) {\n      overlays = new Collection(options.overlays.slice());\n    } else {\n      assert(typeof\n      /** @type {?} */\n      options.overlays.getArray === 'function', 49); // Expected `overlays` to be an array or an `import(\"./Collection.js\").Collection`\n\n      overlays = options.overlays;\n    }\n  } else {\n    overlays = new Collection();\n  }\n\n  return {\n    controls: controls,\n    interactions: interactions,\n    keyboardEventTarget: keyboardEventTarget,\n    overlays: overlays,\n    values: values\n  };\n}\n\nexport default PluggableMap;","map":{"version":3,"sources":["src/PluggableMap.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/PluggableMap\n */\nimport Collection from './Collection.js';\nimport CollectionEventType from './CollectionEventType.js';\nimport MapBrowserEvent from './MapBrowserEvent.js';\nimport MapBrowserEventHandler from './MapBrowserEventHandler.js';\nimport MapBrowserEventType from './MapBrowserEventType.js';\nimport MapEvent from './MapEvent.js';\nimport MapEventType from './MapEventType.js';\nimport MapProperty from './MapProperty.js';\nimport RenderEventType from './render/EventType.js';\nimport BaseObject, { getChangeEventType } from './Object.js';\nimport ObjectEventType from './ObjectEventType.js';\nimport TileQueue from './TileQueue.js';\nimport View from './View.js';\nimport ViewHint from './ViewHint.js';\nimport { assert } from './asserts.js';\nimport { removeNode } from './dom.js';\nimport { listen, unlistenByKey } from './events.js';\nimport EventType from './events/EventType.js';\nimport { clone, createOrUpdateEmpty, equals, getForViewAndSize, isEmpty } from './extent.js';\nimport { TRUE } from './functions.js';\nimport { DEVICE_PIXEL_RATIO, IMAGE_DECODE, PASSIVE_EVENT_LISTENERS } from './has.js';\nimport LayerGroup from './layer/Group.js';\nimport { hasArea } from './size.js';\nimport { DROP } from './structs/PriorityQueue.js';\nimport { create as createTransform, apply as applyTransform } from './transform.js';\nimport { toUserCoordinate, fromUserCoordinate } from './proj.js';\n/**\n * State of the current frame. Only `pixelRatio`, `time` and `viewState` should\n * be used in applications.\n * @typedef {Object} FrameState\n * @property {number} pixelRatio The pixel ratio of the frame.\n * @property {number} time The time when rendering of the frame was requested.\n * @property {import(\"./View.js\").State} viewState The state of the current view.\n * @property {boolean} animate\n * @property {import(\"./transform.js\").Transform} coordinateToPixelTransform\n * @property {null|import(\"./extent.js\").Extent} extent\n * @property {Array<DeclutterItems>} declutterItems\n * @property {number} index\n * @property {Array<import(\"./layer/Layer.js\").State>} layerStatesArray\n * @property {number} layerIndex\n * @property {import(\"./transform.js\").Transform} pixelToCoordinateTransform\n * @property {Array<PostRenderFunction>} postRenderFunctions\n * @property {import(\"./size.js\").Size} size\n * @property {TileQueue} tileQueue\n * @property {!Object<string, Object<string, boolean>>} usedTiles\n * @property {Array<number>} viewHints\n * @property {!Object<string, Object<string, boolean>>} wantedTiles\n */\n/**\n * @typedef {Object} DeclutterItems\n * @property {Array<*>} items Declutter items of an executor.\n * @property {number} opacity Layer opacity.\n */\n/**\n * @typedef {function(PluggableMap, ?FrameState): any} PostRenderFunction\n */\n/**\n * @typedef {Object} AtPixelOptions\n * @property {undefined|function(import(\"./layer/Layer.js\").default): boolean} [layerFilter] Layer filter\n * function. The filter function will receive one argument, the\n * {@link module:ol/layer/Layer layer-candidate} and it should return a boolean value.\n * Only layers which are visible and for which this function returns `true`\n * will be tested for features. By default, all visible layers will be tested.\n * @property {number} [hitTolerance=0] Hit-detection tolerance in pixels. Pixels\n * inside the radius around the given position will be checked for features.\n * @property {boolean} [checkWrapped=true] Check-Wrapped Will check for for wrapped geometries inside the range of\n *   +/- 1 world width. Works only if a projection is used that can be wrapped.\n */\n/**\n * @typedef {Object} MapOptionsInternal\n * @property {Collection<import(\"./control/Control.js\").default>} [controls]\n * @property {Collection<import(\"./interaction/Interaction.js\").default>} [interactions]\n * @property {HTMLElement|Document} keyboardEventTarget\n * @property {Collection<import(\"./Overlay.js\").default>} overlays\n * @property {Object<string, *>} values\n */\n/**\n * Object literal with config options for the map.\n * @typedef {Object} MapOptions\n * @property {Collection<import(\"./control/Control.js\").default>|Array<import(\"./control/Control.js\").default>} [controls]\n * Controls initially added to the map. If not specified,\n * {@link module:ol/control~defaults} is used.\n * @property {number} [pixelRatio=window.devicePixelRatio] The ratio between\n * physical pixels and device-independent pixels (dips) on the device.\n * @property {Collection<import(\"./interaction/Interaction.js\").default>|Array<import(\"./interaction/Interaction.js\").default>} [interactions]\n * Interactions that are initially added to the map. If not specified,\n * {@link module:ol/interaction~defaults} is used.\n * @property {HTMLElement|Document|string} [keyboardEventTarget] The element to\n * listen to keyboard events on. This determines when the `KeyboardPan` and\n * `KeyboardZoom` interactions trigger. For example, if this option is set to\n * `document` the keyboard interactions will always trigger. If this option is\n * not specified, the element the library listens to keyboard events on is the\n * map target (i.e. the user-provided div for the map). If this is not\n * `document`, the target element needs to be focused for key events to be\n * emitted, requiring that the target element has a `tabindex` attribute.\n * @property {Array<import(\"./layer/Base.js\").default>|Collection<import(\"./layer/Base.js\").default>|LayerGroup} [layers]\n * Layers. If this is not defined, a map with no layers will be rendered. Note\n * that layers are rendered in the order supplied, so if you want, for example,\n * a vector layer to appear on top of a tile layer, it must come after the tile\n * layer.\n * @property {number} [maxTilesLoading=16] Maximum number tiles to load\n * simultaneously.\n * @property {number} [moveTolerance=1] The minimum distance in pixels the\n * cursor must move to be detected as a map move event instead of a click.\n * Increasing this value can make it easier to click on the map.\n * @property {Collection<import(\"./Overlay.js\").default>|Array<import(\"./Overlay.js\").default>} [overlays]\n * Overlays initially added to the map. By default, no overlays are added.\n * @property {HTMLElement|string} [target] The container for the map, either the\n * element itself or the `id` of the element. If not specified at construction\n * time, {@link module:ol/Map~Map#setTarget} must be called for the map to be\n * rendered.\n * @property {View} [view] The map's view.  No layer sources will be\n * fetched unless this is specified at construction time or through\n * {@link module:ol/Map~Map#setView}.\n */\n/**\n * @fires import(\"./MapBrowserEvent.js\").MapBrowserEvent\n * @fires import(\"./MapEvent.js\").MapEvent\n * @fires import(\"./render/Event.js\").default#precompose\n * @fires import(\"./render/Event.js\").default#postcompose\n * @fires import(\"./render/Event.js\").default#rendercomplete\n * @api\n */\nvar PluggableMap = /** @class */ (function (_super) {\n    __extends(PluggableMap, _super);\n    /**\n     * @param {MapOptions} options Map options.\n     */\n    function PluggableMap(options) {\n        var _this = _super.call(this) || this;\n        var optionsInternal = createOptionsInternal(options);\n        /** @private */\n        _this.boundHandleBrowserEvent_ = _this.handleBrowserEvent.bind(_this);\n        /**\n         * @type {number}\n         * @private\n         */\n        _this.maxTilesLoading_ = options.maxTilesLoading !== undefined ? options.maxTilesLoading : 16;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.pixelRatio_ = options.pixelRatio !== undefined ?\n            options.pixelRatio : DEVICE_PIXEL_RATIO;\n        /**\n         * @private\n         * @type {*}\n         */\n        _this.postRenderTimeoutHandle_;\n        /**\n         * @private\n         * @type {number|undefined}\n         */\n        _this.animationDelayKey_;\n        /**\n         * @private\n         */\n        _this.animationDelay_ = function () {\n            this.animationDelayKey_ = undefined;\n            this.renderFrame_(Date.now());\n        }.bind(_this);\n        /**\n         * @private\n         * @type {import(\"./transform.js\").Transform}\n         */\n        _this.coordinateToPixelTransform_ = createTransform();\n        /**\n         * @private\n         * @type {import(\"./transform.js\").Transform}\n         */\n        _this.pixelToCoordinateTransform_ = createTransform();\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.frameIndex_ = 0;\n        /**\n         * @private\n         * @type {?FrameState}\n         */\n        _this.frameState_ = null;\n        /**\n         * The extent at the previous 'moveend' event.\n         * @private\n         * @type {import(\"./extent.js\").Extent}\n         */\n        _this.previousExtent_ = null;\n        /**\n         * @private\n         * @type {?import(\"./events.js\").EventsKey}\n         */\n        _this.viewPropertyListenerKey_ = null;\n        /**\n         * @private\n         * @type {?import(\"./events.js\").EventsKey}\n         */\n        _this.viewChangeListenerKey_ = null;\n        /**\n         * @private\n         * @type {?Array<import(\"./events.js\").EventsKey>}\n         */\n        _this.layerGroupPropertyListenerKeys_ = null;\n        /**\n         * @private\n         * @type {!HTMLElement}\n         */\n        _this.viewport_ = document.createElement('div');\n        _this.viewport_.className = 'ol-viewport' + ('ontouchstart' in window ? ' ol-touch' : '');\n        _this.viewport_.style.position = 'relative';\n        _this.viewport_.style.overflow = 'hidden';\n        _this.viewport_.style.width = '100%';\n        _this.viewport_.style.height = '100%';\n        /**\n         * @private\n         * @type {!HTMLElement}\n         */\n        _this.overlayContainer_ = document.createElement('div');\n        _this.overlayContainer_.style.position = 'absolute';\n        _this.overlayContainer_.style.zIndex = '0';\n        _this.overlayContainer_.style.width = '100%';\n        _this.overlayContainer_.style.height = '100%';\n        _this.overlayContainer_.className = 'ol-overlaycontainer';\n        _this.viewport_.appendChild(_this.overlayContainer_);\n        /**\n         * @private\n         * @type {!HTMLElement}\n         */\n        _this.overlayContainerStopEvent_ = document.createElement('div');\n        _this.overlayContainerStopEvent_.style.position = 'absolute';\n        _this.overlayContainerStopEvent_.style.zIndex = '0';\n        _this.overlayContainerStopEvent_.style.width = '100%';\n        _this.overlayContainerStopEvent_.style.height = '100%';\n        _this.overlayContainerStopEvent_.className = 'ol-overlaycontainer-stopevent';\n        _this.viewport_.appendChild(_this.overlayContainerStopEvent_);\n        /**\n         * @private\n         * @type {MapBrowserEventHandler}\n         */\n        _this.mapBrowserEventHandler_ = new MapBrowserEventHandler(_this, options.moveTolerance);\n        var handleMapBrowserEvent = _this.handleMapBrowserEvent.bind(_this);\n        for (var key in MapBrowserEventType) {\n            _this.mapBrowserEventHandler_.addEventListener(MapBrowserEventType[key], handleMapBrowserEvent);\n        }\n        /**\n         * @private\n         * @type {HTMLElement|Document}\n         */\n        _this.keyboardEventTarget_ = optionsInternal.keyboardEventTarget;\n        /**\n         * @private\n         * @type {?Array<import(\"./events.js\").EventsKey>}\n         */\n        _this.keyHandlerKeys_ = null;\n        var handleBrowserEvent = _this.handleBrowserEvent.bind(_this);\n        _this.viewport_.addEventListener(EventType.CONTEXTMENU, handleBrowserEvent, false);\n        _this.viewport_.addEventListener(EventType.WHEEL, handleBrowserEvent, PASSIVE_EVENT_LISTENERS ? { passive: false } : false);\n        /**\n         * @type {Collection<import(\"./control/Control.js\").default>}\n         * @protected\n         */\n        _this.controls = optionsInternal.controls || new Collection();\n        /**\n         * @type {Collection<import(\"./interaction/Interaction.js\").default>}\n         * @protected\n         */\n        _this.interactions = optionsInternal.interactions || new Collection();\n        /**\n         * @type {Collection<import(\"./Overlay.js\").default>}\n         * @private\n         */\n        _this.overlays_ = optionsInternal.overlays;\n        /**\n         * A lookup of overlays by id.\n         * @private\n         * @type {Object<string, import(\"./Overlay.js\").default>}\n         */\n        _this.overlayIdIndex_ = {};\n        /**\n         * @type {import(\"./renderer/Map.js\").default}\n         * @private\n         */\n        _this.renderer_ = null;\n        /**\n         * @type {undefined|function(Event): void}\n         * @private\n         */\n        _this.handleResize_;\n        /**\n         * @private\n         * @type {!Array<PostRenderFunction>}\n         */\n        _this.postRenderFunctions_ = [];\n        /**\n         * @private\n         * @type {TileQueue}\n         */\n        _this.tileQueue_ = new TileQueue(_this.getTilePriority.bind(_this), _this.handleTileChange_.bind(_this));\n        _this.addEventListener(getChangeEventType(MapProperty.LAYERGROUP), _this.handleLayerGroupChanged_);\n        _this.addEventListener(getChangeEventType(MapProperty.VIEW), _this.handleViewChanged_);\n        _this.addEventListener(getChangeEventType(MapProperty.SIZE), _this.handleSizeChanged_);\n        _this.addEventListener(getChangeEventType(MapProperty.TARGET), _this.handleTargetChanged_);\n        // setProperties will trigger the rendering of the map if the map\n        // is \"defined\" already.\n        _this.setProperties(optionsInternal.values);\n        _this.controls.forEach(\n        /**\n         * @param {import(\"./control/Control.js\").default} control Control.\n         * @this {PluggableMap}\n         */\n        function (control) {\n            control.setMap(this);\n        }.bind(_this));\n        _this.controls.addEventListener(CollectionEventType.ADD, \n        /**\n         * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n         */\n        function (event) {\n            event.element.setMap(this);\n        }.bind(_this));\n        _this.controls.addEventListener(CollectionEventType.REMOVE, \n        /**\n         * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n         */\n        function (event) {\n            event.element.setMap(null);\n        }.bind(_this));\n        _this.interactions.forEach(\n        /**\n         * @param {import(\"./interaction/Interaction.js\").default} interaction Interaction.\n         * @this {PluggableMap}\n         */\n        function (interaction) {\n            interaction.setMap(this);\n        }.bind(_this));\n        _this.interactions.addEventListener(CollectionEventType.ADD, \n        /**\n         * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n         */\n        function (event) {\n            event.element.setMap(this);\n        }.bind(_this));\n        _this.interactions.addEventListener(CollectionEventType.REMOVE, \n        /**\n         * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n         */\n        function (event) {\n            event.element.setMap(null);\n        }.bind(_this));\n        _this.overlays_.forEach(_this.addOverlayInternal_.bind(_this));\n        _this.overlays_.addEventListener(CollectionEventType.ADD, \n        /**\n         * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n         */\n        function (event) {\n            this.addOverlayInternal_(/** @type {import(\"./Overlay.js\").default} */ (event.element));\n        }.bind(_this));\n        _this.overlays_.addEventListener(CollectionEventType.REMOVE, \n        /**\n         * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n         */\n        function (event) {\n            var overlay = /** @type {import(\"./Overlay.js\").default} */ (event.element);\n            var id = overlay.getId();\n            if (id !== undefined) {\n                delete this.overlayIdIndex_[id.toString()];\n            }\n            event.element.setMap(null);\n        }.bind(_this));\n        return _this;\n    }\n    /**\n     * @abstract\n     * @return {import(\"./renderer/Map.js\").default} The map renderer\n     */\n    PluggableMap.prototype.createRenderer = function () {\n        throw new Error('Use a map type that has a createRenderer method');\n    };\n    /**\n     * Add the given control to the map.\n     * @param {import(\"./control/Control.js\").default} control Control.\n     * @api\n     */\n    PluggableMap.prototype.addControl = function (control) {\n        this.getControls().push(control);\n    };\n    /**\n     * Add the given interaction to the map. If you want to add an interaction\n     * at another point of the collection use `getInteraction()` and the methods\n     * available on {@link module:ol/Collection~Collection}. This can be used to\n     * stop the event propagation from the handleEvent function. The interactions\n     * get to handle the events in the reverse order of this collection.\n     * @param {import(\"./interaction/Interaction.js\").default} interaction Interaction to add.\n     * @api\n     */\n    PluggableMap.prototype.addInteraction = function (interaction) {\n        this.getInteractions().push(interaction);\n    };\n    /**\n     * Adds the given layer to the top of this map. If you want to add a layer\n     * elsewhere in the stack, use `getLayers()` and the methods available on\n     * {@link module:ol/Collection~Collection}.\n     * @param {import(\"./layer/Base.js\").default} layer Layer.\n     * @api\n     */\n    PluggableMap.prototype.addLayer = function (layer) {\n        var layers = this.getLayerGroup().getLayers();\n        layers.push(layer);\n    };\n    /**\n     * Add the given overlay to the map.\n     * @param {import(\"./Overlay.js\").default} overlay Overlay.\n     * @api\n     */\n    PluggableMap.prototype.addOverlay = function (overlay) {\n        this.getOverlays().push(overlay);\n    };\n    /**\n     * This deals with map's overlay collection changes.\n     * @param {import(\"./Overlay.js\").default} overlay Overlay.\n     * @private\n     */\n    PluggableMap.prototype.addOverlayInternal_ = function (overlay) {\n        var id = overlay.getId();\n        if (id !== undefined) {\n            this.overlayIdIndex_[id.toString()] = overlay;\n        }\n        overlay.setMap(this);\n    };\n    /**\n     *\n     * @inheritDoc\n     */\n    PluggableMap.prototype.disposeInternal = function () {\n        this.mapBrowserEventHandler_.dispose();\n        this.viewport_.removeEventListener(EventType.CONTEXTMENU, this.boundHandleBrowserEvent_);\n        this.viewport_.removeEventListener(EventType.WHEEL, this.boundHandleBrowserEvent_);\n        if (this.handleResize_ !== undefined) {\n            removeEventListener(EventType.RESIZE, this.handleResize_, false);\n            this.handleResize_ = undefined;\n        }\n        this.setTarget(null);\n        _super.prototype.disposeInternal.call(this);\n    };\n    /**\n     * Detect features that intersect a pixel on the viewport, and execute a\n     * callback with each intersecting feature. Layers included in the detection can\n     * be configured through the `layerFilter` option in `opt_options`.\n     * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\n     * @param {function(this: S, import(\"./Feature.js\").FeatureLike,\n     *     import(\"./layer/Layer.js\").default): T} callback Feature callback. The callback will be\n     *     called with two arguments. The first argument is one\n     *     {@link module:ol/Feature feature} or\n     *     {@link module:ol/render/Feature render feature} at the pixel, the second is\n     *     the {@link module:ol/layer/Layer layer} of the feature and will be null for\n     *     unmanaged layers. To stop detection, callback functions can return a\n     *     truthy value.\n     * @param {AtPixelOptions=} opt_options Optional options.\n     * @return {T|undefined} Callback result, i.e. the return value of last\n     * callback execution, or the first truthy callback return value.\n     * @template S,T\n     * @api\n     */\n    PluggableMap.prototype.forEachFeatureAtPixel = function (pixel, callback, opt_options) {\n        if (!this.frameState_) {\n            return;\n        }\n        var coordinate = this.getCoordinateFromPixelInternal(pixel);\n        opt_options = opt_options !== undefined ? opt_options : {};\n        var hitTolerance = opt_options.hitTolerance !== undefined ?\n            opt_options.hitTolerance * this.frameState_.pixelRatio : 0;\n        var layerFilter = opt_options.layerFilter !== undefined ?\n            opt_options.layerFilter : TRUE;\n        var checkWrapped = opt_options.checkWrapped !== false;\n        return this.renderer_.forEachFeatureAtCoordinate(coordinate, this.frameState_, hitTolerance, checkWrapped, callback, null, layerFilter, null);\n    };\n    /**\n     * Get all features that intersect a pixel on the viewport.\n     * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\n     * @param {AtPixelOptions=} opt_options Optional options.\n     * @return {Array<import(\"./Feature.js\").FeatureLike>} The detected features or\n     * an empty array if none were found.\n     * @api\n     */\n    PluggableMap.prototype.getFeaturesAtPixel = function (pixel, opt_options) {\n        var features = [];\n        this.forEachFeatureAtPixel(pixel, function (feature) {\n            features.push(feature);\n        }, opt_options);\n        return features;\n    };\n    /**\n     * Detect layers that have a color value at a pixel on the viewport, and\n     * execute a callback with each matching layer. Layers included in the\n     * detection can be configured through `opt_layerFilter`.\n     *\n     * Note: this may give false positives unless the map layers have had different `className`\n     * properties assigned to them.\n     *\n     * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\n     * @param {function(this: S, import(\"./layer/Layer.js\").default, (Uint8ClampedArray|Uint8Array)): T} callback\n     *     Layer callback. This callback will receive two arguments: first is the\n     *     {@link module:ol/layer/Layer layer}, second argument is an array representing\n     *     [R, G, B, A] pixel values (0 - 255) and will be `null` for layer types\n     *     that do not currently support this argument. To stop detection, callback\n     *     functions can return a truthy value.\n     * @param {AtPixelOptions=} opt_options Configuration options.\n     * @return {T|undefined} Callback result, i.e. the return value of last\n     * callback execution, or the first truthy callback return value.\n     * @template S,T\n     * @api\n     */\n    PluggableMap.prototype.forEachLayerAtPixel = function (pixel, callback, opt_options) {\n        if (!this.frameState_) {\n            return;\n        }\n        var options = opt_options || {};\n        var hitTolerance = options.hitTolerance !== undefined ?\n            options.hitTolerance * this.frameState_.pixelRatio : 0;\n        var layerFilter = options.layerFilter || TRUE;\n        return this.renderer_.forEachLayerAtPixel(pixel, this.frameState_, hitTolerance, callback, layerFilter);\n    };\n    /**\n     * Detect if features intersect a pixel on the viewport. Layers included in the\n     * detection can be configured through `opt_layerFilter`.\n     * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\n     * @param {AtPixelOptions=} opt_options Optional options.\n     * @return {boolean} Is there a feature at the given pixel?\n     * @api\n     */\n    PluggableMap.prototype.hasFeatureAtPixel = function (pixel, opt_options) {\n        if (!this.frameState_) {\n            return false;\n        }\n        var coordinate = this.getCoordinateFromPixelInternal(pixel);\n        opt_options = opt_options !== undefined ? opt_options : {};\n        var layerFilter = opt_options.layerFilter !== undefined ? opt_options.layerFilter : TRUE;\n        var hitTolerance = opt_options.hitTolerance !== undefined ?\n            opt_options.hitTolerance * this.frameState_.pixelRatio : 0;\n        var checkWrapped = opt_options.checkWrapped !== false;\n        return this.renderer_.hasFeatureAtCoordinate(coordinate, this.frameState_, hitTolerance, checkWrapped, layerFilter, null);\n    };\n    /**\n     * Returns the coordinate in user projection for a browser event.\n     * @param {Event} event Event.\n     * @return {import(\"./coordinate.js\").Coordinate} Coordinate.\n     * @api\n     */\n    PluggableMap.prototype.getEventCoordinate = function (event) {\n        return this.getCoordinateFromPixel(this.getEventPixel(event));\n    };\n    /**\n     * Returns the coordinate in view projection for a browser event.\n     * @param {Event} event Event.\n     * @return {import(\"./coordinate.js\").Coordinate} Coordinate.\n     */\n    PluggableMap.prototype.getEventCoordinateInternal = function (event) {\n        return this.getCoordinateFromPixelInternal(this.getEventPixel(event));\n    };\n    /**\n     * Returns the map pixel position for a browser event relative to the viewport.\n     * @param {Event|TouchEvent} event Event.\n     * @return {import(\"./pixel.js\").Pixel} Pixel.\n     * @api\n     */\n    PluggableMap.prototype.getEventPixel = function (event) {\n        var viewportPosition = this.viewport_.getBoundingClientRect();\n        var eventPosition = 'changedTouches' in event ?\n            /** @type {TouchEvent} */ (event).changedTouches[0] :\n            /** @type {MouseEvent} */ (event);\n        return [\n            eventPosition.clientX - viewportPosition.left,\n            eventPosition.clientY - viewportPosition.top\n        ];\n    };\n    /**\n     * Get the target in which this map is rendered.\n     * Note that this returns what is entered as an option or in setTarget:\n     * if that was an element, it returns an element; if a string, it returns that.\n     * @return {HTMLElement|string|undefined} The Element or id of the Element that the\n     *     map is rendered in.\n     * @observable\n     * @api\n     */\n    PluggableMap.prototype.getTarget = function () {\n        return /** @type {HTMLElement|string|undefined} */ (this.get(MapProperty.TARGET));\n    };\n    /**\n     * Get the DOM element into which this map is rendered. In contrast to\n     * `getTarget` this method always return an `Element`, or `null` if the\n     * map has no target.\n     * @return {HTMLElement} The element that the map is rendered in.\n     * @api\n     */\n    PluggableMap.prototype.getTargetElement = function () {\n        var target = this.getTarget();\n        if (target !== undefined) {\n            return typeof target === 'string' ? document.getElementById(target) : target;\n        }\n        else {\n            return null;\n        }\n    };\n    /**\n     * Get the coordinate for a given pixel.  This returns a coordinate in the\n     * user projection.\n     * @param {import(\"./pixel.js\").Pixel} pixel Pixel position in the map viewport.\n     * @return {import(\"./coordinate.js\").Coordinate} The coordinate for the pixel position.\n     * @api\n     */\n    PluggableMap.prototype.getCoordinateFromPixel = function (pixel) {\n        return toUserCoordinate(this.getCoordinateFromPixelInternal(pixel), this.getView().getProjection());\n    };\n    /**\n     * Get the coordinate for a given pixel.  This returns a coordinate in the\n     * map view projection.\n     * @param {import(\"./pixel.js\").Pixel} pixel Pixel position in the map viewport.\n     * @return {import(\"./coordinate.js\").Coordinate} The coordinate for the pixel position.\n     */\n    PluggableMap.prototype.getCoordinateFromPixelInternal = function (pixel) {\n        var frameState = this.frameState_;\n        if (!frameState) {\n            return null;\n        }\n        else {\n            return applyTransform(frameState.pixelToCoordinateTransform, pixel.slice());\n        }\n    };\n    /**\n     * Get the map controls. Modifying this collection changes the controls\n     * associated with the map.\n     * @return {Collection<import(\"./control/Control.js\").default>} Controls.\n     * @api\n     */\n    PluggableMap.prototype.getControls = function () {\n        return this.controls;\n    };\n    /**\n     * Get the map overlays. Modifying this collection changes the overlays\n     * associated with the map.\n     * @return {Collection<import(\"./Overlay.js\").default>} Overlays.\n     * @api\n     */\n    PluggableMap.prototype.getOverlays = function () {\n        return this.overlays_;\n    };\n    /**\n     * Get an overlay by its identifier (the value returned by overlay.getId()).\n     * Note that the index treats string and numeric identifiers as the same. So\n     * `map.getOverlayById(2)` will return an overlay with id `'2'` or `2`.\n     * @param {string|number} id Overlay identifier.\n     * @return {import(\"./Overlay.js\").default} Overlay.\n     * @api\n     */\n    PluggableMap.prototype.getOverlayById = function (id) {\n        var overlay = this.overlayIdIndex_[id.toString()];\n        return overlay !== undefined ? overlay : null;\n    };\n    /**\n     * Get the map interactions. Modifying this collection changes the interactions\n     * associated with the map.\n     *\n     * Interactions are used for e.g. pan, zoom and rotate.\n     * @return {Collection<import(\"./interaction/Interaction.js\").default>} Interactions.\n     * @api\n     */\n    PluggableMap.prototype.getInteractions = function () {\n        return this.interactions;\n    };\n    /**\n     * Get the layergroup associated with this map.\n     * @return {LayerGroup} A layer group containing the layers in this map.\n     * @observable\n     * @api\n     */\n    PluggableMap.prototype.getLayerGroup = function () {\n        return (\n        /** @type {LayerGroup} */ (this.get(MapProperty.LAYERGROUP)));\n    };\n    /**\n     * Get the collection of layers associated with this map.\n     * @return {!Collection<import(\"./layer/Base.js\").default>} Layers.\n     * @api\n     */\n    PluggableMap.prototype.getLayers = function () {\n        var layers = this.getLayerGroup().getLayers();\n        return layers;\n    };\n    /**\n     * @return {boolean} Layers have sources that are still loading.\n     */\n    PluggableMap.prototype.getLoading = function () {\n        var layerStatesArray = this.getLayerGroup().getLayerStatesArray();\n        for (var i = 0, ii = layerStatesArray.length; i < ii; ++i) {\n            var layer = layerStatesArray[i].layer;\n            var source = /** @type {import(\"./layer/Layer.js\").default} */ (layer).getSource();\n            if (source && source.loading) {\n                return true;\n            }\n        }\n        return false;\n    };\n    /**\n     * Get the pixel for a coordinate.  This takes a coordinate in the user\n     * projection and returns the corresponding pixel.\n     * @param {import(\"./coordinate.js\").Coordinate} coordinate A map coordinate.\n     * @return {import(\"./pixel.js\").Pixel} A pixel position in the map viewport.\n     * @api\n     */\n    PluggableMap.prototype.getPixelFromCoordinate = function (coordinate) {\n        var viewCoordinate = fromUserCoordinate(coordinate, this.getView().getProjection());\n        return this.getPixelFromCoordinateInternal(viewCoordinate);\n    };\n    /**\n     * Get the pixel for a coordinate.  This takes a coordinate in the map view\n     * projection and returns the corresponding pixel.\n     * @param {import(\"./coordinate.js\").Coordinate} coordinate A map coordinate.\n     * @return {import(\"./pixel.js\").Pixel} A pixel position in the map viewport.\n     */\n    PluggableMap.prototype.getPixelFromCoordinateInternal = function (coordinate) {\n        var frameState = this.frameState_;\n        if (!frameState) {\n            return null;\n        }\n        else {\n            return applyTransform(frameState.coordinateToPixelTransform, coordinate.slice(0, 2));\n        }\n    };\n    /**\n     * Get the map renderer.\n     * @return {import(\"./renderer/Map.js\").default} Renderer\n     */\n    PluggableMap.prototype.getRenderer = function () {\n        return this.renderer_;\n    };\n    /**\n     * Get the size of this map.\n     * @return {import(\"./size.js\").Size|undefined} The size in pixels of the map in the DOM.\n     * @observable\n     * @api\n     */\n    PluggableMap.prototype.getSize = function () {\n        return (\n        /** @type {import(\"./size.js\").Size|undefined} */ (this.get(MapProperty.SIZE)));\n    };\n    /**\n     * Get the view associated with this map. A view manages properties such as\n     * center and resolution.\n     * @return {View} The view that controls this map.\n     * @observable\n     * @api\n     */\n    PluggableMap.prototype.getView = function () {\n        return (\n        /** @type {View} */ (this.get(MapProperty.VIEW)));\n    };\n    /**\n     * Get the element that serves as the map viewport.\n     * @return {HTMLElement} Viewport.\n     * @api\n     */\n    PluggableMap.prototype.getViewport = function () {\n        return this.viewport_;\n    };\n    /**\n     * Get the element that serves as the container for overlays.  Elements added to\n     * this container will let mousedown and touchstart events through to the map,\n     * so clicks and gestures on an overlay will trigger {@link module:ol/MapBrowserEvent~MapBrowserEvent}\n     * events.\n     * @return {!HTMLElement} The map's overlay container.\n     */\n    PluggableMap.prototype.getOverlayContainer = function () {\n        return this.overlayContainer_;\n    };\n    /**\n     * Get the element that serves as a container for overlays that don't allow\n     * event propagation. Elements added to this container won't let mousedown and\n     * touchstart events through to the map, so clicks and gestures on an overlay\n     * don't trigger any {@link module:ol/MapBrowserEvent~MapBrowserEvent}.\n     * @return {!HTMLElement} The map's overlay container that stops events.\n     */\n    PluggableMap.prototype.getOverlayContainerStopEvent = function () {\n        return this.overlayContainerStopEvent_;\n    };\n    /**\n     * @param {import(\"./Tile.js\").default} tile Tile.\n     * @param {string} tileSourceKey Tile source key.\n     * @param {import(\"./coordinate.js\").Coordinate} tileCenter Tile center.\n     * @param {number} tileResolution Tile resolution.\n     * @return {number} Tile priority.\n     */\n    PluggableMap.prototype.getTilePriority = function (tile, tileSourceKey, tileCenter, tileResolution) {\n        // Filter out tiles at higher zoom levels than the current zoom level, or that\n        // are outside the visible extent.\n        var frameState = this.frameState_;\n        if (!frameState || !(tileSourceKey in frameState.wantedTiles)) {\n            return DROP;\n        }\n        if (!frameState.wantedTiles[tileSourceKey][tile.getKey()]) {\n            return DROP;\n        }\n        // Prioritize the highest zoom level tiles closest to the focus.\n        // Tiles at higher zoom levels are prioritized using Math.log(tileResolution).\n        // Within a zoom level, tiles are prioritized by the distance in pixels between\n        // the center of the tile and the center of the viewport.  The factor of 65536\n        // means that the prioritization should behave as desired for tiles up to\n        // 65536 * Math.log(2) = 45426 pixels from the focus.\n        var center = frameState.viewState.center;\n        var deltaX = tileCenter[0] - center[0];\n        var deltaY = tileCenter[1] - center[1];\n        return 65536 * Math.log(tileResolution) +\n            Math.sqrt(deltaX * deltaX + deltaY * deltaY) / tileResolution;\n    };\n    /**\n     * @param {Event} browserEvent Browser event.\n     * @param {string=} opt_type Type.\n     */\n    PluggableMap.prototype.handleBrowserEvent = function (browserEvent, opt_type) {\n        var type = opt_type || browserEvent.type;\n        var mapBrowserEvent = new MapBrowserEvent(type, this, browserEvent);\n        this.handleMapBrowserEvent(mapBrowserEvent);\n    };\n    /**\n     * @param {MapBrowserEvent} mapBrowserEvent The event to handle.\n     */\n    PluggableMap.prototype.handleMapBrowserEvent = function (mapBrowserEvent) {\n        if (!this.frameState_) {\n            // With no view defined, we cannot translate pixels into geographical\n            // coordinates so interactions cannot be used.\n            return;\n        }\n        var target = /** @type {Node} */ (mapBrowserEvent.originalEvent.target);\n        if (!mapBrowserEvent.dragging) {\n            if (this.overlayContainerStopEvent_.contains(target) || !document.body.contains(target)) {\n                // Abort if the event target is a child of the container that doesn't allow\n                // event propagation or is no longer in the page. It's possible for the target to no longer\n                // be in the page if it has been removed in an event listener, this might happen in a Control\n                // that recreates it's content based on user interaction either manually or via a render\n                // in something like https://reactjs.org/\n                return;\n            }\n        }\n        mapBrowserEvent.frameState = this.frameState_;\n        var interactionsArray = this.getInteractions().getArray();\n        if (this.dispatchEvent(mapBrowserEvent) !== false) {\n            for (var i = interactionsArray.length - 1; i >= 0; i--) {\n                var interaction = interactionsArray[i];\n                if (!interaction.getActive()) {\n                    continue;\n                }\n                var cont = interaction.handleEvent(mapBrowserEvent);\n                if (!cont) {\n                    break;\n                }\n            }\n        }\n    };\n    /**\n     * @protected\n     */\n    PluggableMap.prototype.handlePostRender = function () {\n        var frameState = this.frameState_;\n        // Manage the tile queue\n        // Image loads are expensive and a limited resource, so try to use them\n        // efficiently:\n        // * When the view is static we allow a large number of parallel tile loads\n        //   to complete the frame as quickly as possible.\n        // * When animating or interacting, image loads can cause janks, so we reduce\n        //   the maximum number of loads per frame and limit the number of parallel\n        //   tile loads to remain reactive to view changes and to reduce the chance of\n        //   loading tiles that will quickly disappear from view.\n        var tileQueue = this.tileQueue_;\n        if (!tileQueue.isEmpty()) {\n            var maxTotalLoading = this.maxTilesLoading_;\n            var maxNewLoads = maxTotalLoading;\n            if (frameState) {\n                var hints = frameState.viewHints;\n                if (hints[ViewHint.ANIMATING] || hints[ViewHint.INTERACTING]) {\n                    var lowOnFrameBudget = !IMAGE_DECODE && Date.now() - frameState.time > 8;\n                    maxTotalLoading = lowOnFrameBudget ? 0 : 8;\n                    maxNewLoads = lowOnFrameBudget ? 0 : 2;\n                }\n            }\n            if (tileQueue.getTilesLoading() < maxTotalLoading) {\n                tileQueue.reprioritize(); // FIXME only call if view has changed\n                tileQueue.loadMoreTiles(maxTotalLoading, maxNewLoads);\n            }\n        }\n        if (frameState && this.hasListener(RenderEventType.RENDERCOMPLETE) && !frameState.animate &&\n            !this.tileQueue_.getTilesLoading() && !this.getLoading()) {\n            this.renderer_.dispatchRenderEvent(RenderEventType.RENDERCOMPLETE, frameState);\n        }\n        var postRenderFunctions = this.postRenderFunctions_;\n        for (var i = 0, ii = postRenderFunctions.length; i < ii; ++i) {\n            postRenderFunctions[i](this, frameState);\n        }\n        postRenderFunctions.length = 0;\n    };\n    /**\n     * @private\n     */\n    PluggableMap.prototype.handleSizeChanged_ = function () {\n        if (this.getView()) {\n            this.getView().resolveConstraints(0);\n        }\n        this.render();\n    };\n    /**\n     * @private\n     */\n    PluggableMap.prototype.handleTargetChanged_ = function () {\n        // target may be undefined, null, a string or an Element.\n        // If it's a string we convert it to an Element before proceeding.\n        // If it's not now an Element we remove the viewport from the DOM.\n        // If it's an Element we append the viewport element to it.\n        var targetElement;\n        if (this.getTarget()) {\n            targetElement = this.getTargetElement();\n        }\n        if (this.keyHandlerKeys_) {\n            for (var i = 0, ii = this.keyHandlerKeys_.length; i < ii; ++i) {\n                unlistenByKey(this.keyHandlerKeys_[i]);\n            }\n            this.keyHandlerKeys_ = null;\n        }\n        if (!targetElement) {\n            if (this.renderer_) {\n                clearTimeout(this.postRenderTimeoutHandle_);\n                this.postRenderFunctions_.length = 0;\n                this.renderer_.dispose();\n                this.renderer_ = null;\n            }\n            if (this.animationDelayKey_) {\n                cancelAnimationFrame(this.animationDelayKey_);\n                this.animationDelayKey_ = undefined;\n            }\n            removeNode(this.viewport_);\n            if (this.handleResize_ !== undefined) {\n                removeEventListener(EventType.RESIZE, this.handleResize_, false);\n                this.handleResize_ = undefined;\n            }\n        }\n        else {\n            targetElement.appendChild(this.viewport_);\n            if (!this.renderer_) {\n                this.renderer_ = this.createRenderer();\n            }\n            var keyboardEventTarget = !this.keyboardEventTarget_ ?\n                targetElement : this.keyboardEventTarget_;\n            this.keyHandlerKeys_ = [\n                listen(keyboardEventTarget, EventType.KEYDOWN, this.handleBrowserEvent, this),\n                listen(keyboardEventTarget, EventType.KEYPRESS, this.handleBrowserEvent, this)\n            ];\n            if (!this.handleResize_) {\n                this.handleResize_ = this.updateSize.bind(this);\n                window.addEventListener(EventType.RESIZE, this.handleResize_, false);\n            }\n        }\n        this.updateSize();\n        // updateSize calls setSize, so no need to call this.render\n        // ourselves here.\n    };\n    /**\n     * @private\n     */\n    PluggableMap.prototype.handleTileChange_ = function () {\n        this.render();\n    };\n    /**\n     * @private\n     */\n    PluggableMap.prototype.handleViewPropertyChanged_ = function () {\n        this.render();\n    };\n    /**\n     * @private\n     */\n    PluggableMap.prototype.handleViewChanged_ = function () {\n        if (this.viewPropertyListenerKey_) {\n            unlistenByKey(this.viewPropertyListenerKey_);\n            this.viewPropertyListenerKey_ = null;\n        }\n        if (this.viewChangeListenerKey_) {\n            unlistenByKey(this.viewChangeListenerKey_);\n            this.viewChangeListenerKey_ = null;\n        }\n        var view = this.getView();\n        if (view) {\n            this.updateViewportSize_();\n            this.viewPropertyListenerKey_ = listen(view, ObjectEventType.PROPERTYCHANGE, this.handleViewPropertyChanged_, this);\n            this.viewChangeListenerKey_ = listen(view, EventType.CHANGE, this.handleViewPropertyChanged_, this);\n            view.resolveConstraints(0);\n        }\n        this.render();\n    };\n    /**\n     * @private\n     */\n    PluggableMap.prototype.handleLayerGroupChanged_ = function () {\n        if (this.layerGroupPropertyListenerKeys_) {\n            this.layerGroupPropertyListenerKeys_.forEach(unlistenByKey);\n            this.layerGroupPropertyListenerKeys_ = null;\n        }\n        var layerGroup = this.getLayerGroup();\n        if (layerGroup) {\n            this.layerGroupPropertyListenerKeys_ = [\n                listen(layerGroup, ObjectEventType.PROPERTYCHANGE, this.render, this),\n                listen(layerGroup, EventType.CHANGE, this.render, this)\n            ];\n        }\n        this.render();\n    };\n    /**\n     * @return {boolean} Is rendered.\n     */\n    PluggableMap.prototype.isRendered = function () {\n        return !!this.frameState_;\n    };\n    /**\n     * Requests an immediate render in a synchronous manner.\n     * @api\n     */\n    PluggableMap.prototype.renderSync = function () {\n        if (this.animationDelayKey_) {\n            cancelAnimationFrame(this.animationDelayKey_);\n        }\n        this.animationDelay_();\n    };\n    /**\n     * Redraws all text after new fonts have loaded\n     */\n    PluggableMap.prototype.redrawText = function () {\n        var layerStates = this.getLayerGroup().getLayerStatesArray();\n        for (var i = 0, ii = layerStates.length; i < ii; ++i) {\n            var layer = layerStates[i].layer;\n            if (layer.hasRenderer()) {\n                layer.getRenderer().handleFontsChanged();\n            }\n        }\n    };\n    /**\n     * Request a map rendering (at the next animation frame).\n     * @api\n     */\n    PluggableMap.prototype.render = function () {\n        if (this.renderer_ && this.animationDelayKey_ === undefined) {\n            this.animationDelayKey_ = requestAnimationFrame(this.animationDelay_);\n        }\n    };\n    /**\n     * Remove the given control from the map.\n     * @param {import(\"./control/Control.js\").default} control Control.\n     * @return {import(\"./control/Control.js\").default|undefined} The removed control (or undefined\n     *     if the control was not found).\n     * @api\n     */\n    PluggableMap.prototype.removeControl = function (control) {\n        return this.getControls().remove(control);\n    };\n    /**\n     * Remove the given interaction from the map.\n     * @param {import(\"./interaction/Interaction.js\").default} interaction Interaction to remove.\n     * @return {import(\"./interaction/Interaction.js\").default|undefined} The removed interaction (or\n     *     undefined if the interaction was not found).\n     * @api\n     */\n    PluggableMap.prototype.removeInteraction = function (interaction) {\n        return this.getInteractions().remove(interaction);\n    };\n    /**\n     * Removes the given layer from the map.\n     * @param {import(\"./layer/Base.js\").default} layer Layer.\n     * @return {import(\"./layer/Base.js\").default|undefined} The removed layer (or undefined if the\n     *     layer was not found).\n     * @api\n     */\n    PluggableMap.prototype.removeLayer = function (layer) {\n        var layers = this.getLayerGroup().getLayers();\n        return layers.remove(layer);\n    };\n    /**\n     * Remove the given overlay from the map.\n     * @param {import(\"./Overlay.js\").default} overlay Overlay.\n     * @return {import(\"./Overlay.js\").default|undefined} The removed overlay (or undefined\n     *     if the overlay was not found).\n     * @api\n     */\n    PluggableMap.prototype.removeOverlay = function (overlay) {\n        return this.getOverlays().remove(overlay);\n    };\n    /**\n     * @param {number} time Time.\n     * @private\n     */\n    PluggableMap.prototype.renderFrame_ = function (time) {\n        var size = this.getSize();\n        var view = this.getView();\n        var previousFrameState = this.frameState_;\n        /** @type {?FrameState} */\n        var frameState = null;\n        if (size !== undefined && hasArea(size) && view && view.isDef()) {\n            var viewHints = view.getHints(this.frameState_ ? this.frameState_.viewHints : undefined);\n            var viewState = view.getState();\n            frameState = {\n                animate: false,\n                coordinateToPixelTransform: this.coordinateToPixelTransform_,\n                declutterItems: previousFrameState ? previousFrameState.declutterItems : [],\n                extent: getForViewAndSize(viewState.center, viewState.resolution, viewState.rotation, size),\n                index: this.frameIndex_++,\n                layerIndex: 0,\n                layerStatesArray: this.getLayerGroup().getLayerStatesArray(),\n                pixelRatio: this.pixelRatio_,\n                pixelToCoordinateTransform: this.pixelToCoordinateTransform_,\n                postRenderFunctions: [],\n                size: size,\n                tileQueue: this.tileQueue_,\n                time: time,\n                usedTiles: {},\n                viewState: viewState,\n                viewHints: viewHints,\n                wantedTiles: {}\n            };\n        }\n        this.frameState_ = frameState;\n        this.renderer_.renderFrame(frameState);\n        if (frameState) {\n            if (frameState.animate) {\n                this.render();\n            }\n            Array.prototype.push.apply(this.postRenderFunctions_, frameState.postRenderFunctions);\n            if (previousFrameState) {\n                var moveStart = !this.previousExtent_ ||\n                    (!isEmpty(this.previousExtent_) &&\n                        !equals(frameState.extent, this.previousExtent_));\n                if (moveStart) {\n                    this.dispatchEvent(new MapEvent(MapEventType.MOVESTART, this, previousFrameState));\n                    this.previousExtent_ = createOrUpdateEmpty(this.previousExtent_);\n                }\n            }\n            var idle = this.previousExtent_ &&\n                !frameState.viewHints[ViewHint.ANIMATING] &&\n                !frameState.viewHints[ViewHint.INTERACTING] &&\n                !equals(frameState.extent, this.previousExtent_);\n            if (idle) {\n                this.dispatchEvent(new MapEvent(MapEventType.MOVEEND, this, frameState));\n                clone(frameState.extent, this.previousExtent_);\n            }\n        }\n        this.dispatchEvent(new MapEvent(MapEventType.POSTRENDER, this, frameState));\n        this.postRenderTimeoutHandle_ = setTimeout(this.handlePostRender.bind(this), 0);\n    };\n    /**\n     * Sets the layergroup of this map.\n     * @param {LayerGroup} layerGroup A layer group containing the layers in this map.\n     * @observable\n     * @api\n     */\n    PluggableMap.prototype.setLayerGroup = function (layerGroup) {\n        this.set(MapProperty.LAYERGROUP, layerGroup);\n    };\n    /**\n     * Set the size of this map.\n     * @param {import(\"./size.js\").Size|undefined} size The size in pixels of the map in the DOM.\n     * @observable\n     * @api\n     */\n    PluggableMap.prototype.setSize = function (size) {\n        this.set(MapProperty.SIZE, size);\n    };\n    /**\n     * Set the target element to render this map into.\n     * @param {HTMLElement|string|undefined} target The Element or id of the Element\n     *     that the map is rendered in.\n     * @observable\n     * @api\n     */\n    PluggableMap.prototype.setTarget = function (target) {\n        this.set(MapProperty.TARGET, target);\n    };\n    /**\n     * Set the view for this map.\n     * @param {View} view The view that controls this map.\n     * @observable\n     * @api\n     */\n    PluggableMap.prototype.setView = function (view) {\n        this.set(MapProperty.VIEW, view);\n    };\n    /**\n     * Force a recalculation of the map viewport size.  This should be called when\n     * third-party code changes the size of the map viewport.\n     * @api\n     */\n    PluggableMap.prototype.updateSize = function () {\n        var targetElement = this.getTargetElement();\n        if (!targetElement) {\n            this.setSize(undefined);\n        }\n        else {\n            var computedStyle = getComputedStyle(targetElement);\n            this.setSize([\n                targetElement.offsetWidth -\n                    parseFloat(computedStyle['borderLeftWidth']) -\n                    parseFloat(computedStyle['paddingLeft']) -\n                    parseFloat(computedStyle['paddingRight']) -\n                    parseFloat(computedStyle['borderRightWidth']),\n                targetElement.offsetHeight -\n                    parseFloat(computedStyle['borderTopWidth']) -\n                    parseFloat(computedStyle['paddingTop']) -\n                    parseFloat(computedStyle['paddingBottom']) -\n                    parseFloat(computedStyle['borderBottomWidth'])\n            ]);\n        }\n        this.updateViewportSize_();\n    };\n    /**\n     * Recomputes the viewport size and save it on the view object (if any)\n     * @private\n     */\n    PluggableMap.prototype.updateViewportSize_ = function () {\n        var view = this.getView();\n        if (view) {\n            var size = undefined;\n            var computedStyle = getComputedStyle(this.viewport_);\n            if (computedStyle.width && computedStyle.height) {\n                size = [\n                    parseInt(computedStyle.width, 10),\n                    parseInt(computedStyle.height, 10)\n                ];\n            }\n            view.setViewportSize(size);\n        }\n    };\n    return PluggableMap;\n}(BaseObject));\n/**\n * @param {MapOptions} options Map options.\n * @return {MapOptionsInternal} Internal map options.\n */\nfunction createOptionsInternal(options) {\n    /**\n     * @type {HTMLElement|Document}\n     */\n    var keyboardEventTarget = null;\n    if (options.keyboardEventTarget !== undefined) {\n        keyboardEventTarget = typeof options.keyboardEventTarget === 'string' ?\n            document.getElementById(options.keyboardEventTarget) :\n            options.keyboardEventTarget;\n    }\n    /**\n     * @type {Object<string, *>}\n     */\n    var values = {};\n    var layerGroup = options.layers && typeof /** @type {?} */ (options.layers).getLayers === 'function' ?\n        /** @type {LayerGroup} */ (options.layers) : new LayerGroup({ layers: /** @type {Collection} */ (options.layers) });\n    values[MapProperty.LAYERGROUP] = layerGroup;\n    values[MapProperty.TARGET] = options.target;\n    values[MapProperty.VIEW] = options.view !== undefined ?\n        options.view : new View();\n    var controls;\n    if (options.controls !== undefined) {\n        if (Array.isArray(options.controls)) {\n            controls = new Collection(options.controls.slice());\n        }\n        else {\n            assert(typeof /** @type {?} */ (options.controls).getArray === 'function', 47); // Expected `controls` to be an array or an `import(\"./Collection.js\").Collection`\n            controls = /** @type {Collection} */ (options.controls);\n        }\n    }\n    var interactions;\n    if (options.interactions !== undefined) {\n        if (Array.isArray(options.interactions)) {\n            interactions = new Collection(options.interactions.slice());\n        }\n        else {\n            assert(typeof /** @type {?} */ (options.interactions).getArray === 'function', 48); // Expected `interactions` to be an array or an `import(\"./Collection.js\").Collection`\n            interactions = /** @type {Collection} */ (options.interactions);\n        }\n    }\n    var overlays;\n    if (options.overlays !== undefined) {\n        if (Array.isArray(options.overlays)) {\n            overlays = new Collection(options.overlays.slice());\n        }\n        else {\n            assert(typeof /** @type {?} */ (options.overlays).getArray === 'function', 49); // Expected `overlays` to be an array or an `import(\"./Collection.js\").Collection`\n            overlays = options.overlays;\n        }\n    }\n    else {\n        overlays = new Collection();\n    }\n    return {\n        controls: controls,\n        interactions: interactions,\n        keyboardEventTarget: keyboardEventTarget,\n        overlays: overlays,\n        values: values\n    };\n}\nexport default PluggableMap;\n//# sourceMappingURL=PluggableMap.js.map"]},"metadata":{},"sourceType":"module"}