{"ast":null,"code":"var newImageData = require('./util').newImageData;\n/**\n * Create a function for running operations.  This function is serialized for\n * use in a worker.\n * @param {function(Array, Object):*} operation The operation.\n * @return {function(Object):ArrayBuffer} A function that takes an object with\n * buffers, meta, imageOps, width, and height properties and returns an array\n * buffer.\n */\n\n\nfunction createMinion(operation) {\n  var workerHasImageData = true;\n\n  try {\n    new ImageData(10, 10);\n  } catch (_) {\n    workerHasImageData = false;\n  }\n\n  function newWorkerImageData(data, width, height) {\n    if (workerHasImageData) {\n      return new ImageData(data, width, height);\n    } else {\n      return {\n        data: data,\n        width: width,\n        height: height\n      };\n    }\n  }\n\n  return function (data) {\n    // bracket notation for minification support\n    var buffers = data['buffers'];\n    var meta = data['meta'];\n    var imageOps = data['imageOps'];\n    var width = data['width'];\n    var height = data['height'];\n    var numBuffers = buffers.length;\n    var numBytes = buffers[0].byteLength;\n    var output, b;\n\n    if (imageOps) {\n      var images = new Array(numBuffers);\n\n      for (b = 0; b < numBuffers; ++b) {\n        images[b] = newWorkerImageData(new Uint8ClampedArray(buffers[b]), width, height);\n      }\n\n      output = operation(images, meta).data;\n    } else {\n      output = new Uint8ClampedArray(numBytes);\n      var arrays = new Array(numBuffers);\n      var pixels = new Array(numBuffers);\n\n      for (b = 0; b < numBuffers; ++b) {\n        arrays[b] = new Uint8ClampedArray(buffers[b]);\n        pixels[b] = [0, 0, 0, 0];\n      }\n\n      for (var i = 0; i < numBytes; i += 4) {\n        for (var j = 0; j < numBuffers; ++j) {\n          var array = arrays[j];\n          pixels[j][0] = array[i];\n          pixels[j][1] = array[i + 1];\n          pixels[j][2] = array[i + 2];\n          pixels[j][3] = array[i + 3];\n        }\n\n        var pixel = operation(pixels, meta);\n        output[i] = pixel[0];\n        output[i + 1] = pixel[1];\n        output[i + 2] = pixel[2];\n        output[i + 3] = pixel[3];\n      }\n    }\n\n    return output.buffer;\n  };\n}\n/**\n * Create a worker for running operations.\n * @param {Object} config Configuration.\n * @param {function(MessageEvent)} onMessage Called with a message event.\n * @return {Worker} The worker.\n */\n\n\nfunction createWorker(config, onMessage) {\n  var lib = Object.keys(config.lib || {}).map(function (name) {\n    return 'var ' + name + ' = ' + config.lib[name].toString() + ';';\n  });\n  var lines = lib.concat(['var __minion__ = (' + createMinion.toString() + ')(', config.operation.toString(), ');', 'self.addEventListener(\"message\", function(event) {', '  var buffer = __minion__(event.data);', '  self.postMessage({buffer: buffer, meta: event.data.meta}, [buffer]);', '});']);\n  var blob = new Blob(lines, {\n    type: 'text/javascript'\n  });\n  var source = URL.createObjectURL(blob);\n  var worker = new Worker(source);\n  worker.addEventListener('message', onMessage);\n  return worker;\n}\n/**\n * Create a faux worker for running operations.\n * @param {Object} config Configuration.\n * @param {function(MessageEvent)} onMessage Called with a message event.\n * @return {Object} The faux worker.\n */\n\n\nfunction createFauxWorker(config, onMessage) {\n  var minion = createMinion(config.operation);\n  return {\n    postMessage: function (data) {\n      setTimeout(function () {\n        onMessage({\n          'data': {\n            'buffer': minion(data),\n            'meta': data['meta']\n          }\n        });\n      }, 0);\n    }\n  };\n}\n/**\n * A processor runs pixel or image operations in workers.\n * @param {Object} config Configuration.\n */\n\n\nfunction Processor(config) {\n  this._imageOps = !!config.imageOps;\n  var threads;\n\n  if (config.threads === 0) {\n    threads = 0;\n  } else if (this._imageOps) {\n    threads = 1;\n  } else {\n    threads = config.threads || 1;\n  }\n\n  var workers = [];\n\n  if (threads) {\n    for (var i = 0; i < threads; ++i) {\n      workers[i] = createWorker(config, this._onWorkerMessage.bind(this, i));\n    }\n  } else {\n    workers[0] = createFauxWorker(config, this._onWorkerMessage.bind(this, 0));\n  }\n\n  this._workers = workers;\n  this._queue = [];\n  this._maxQueueLength = config.queue || Infinity;\n  this._running = 0;\n  this._dataLookup = {};\n  this._job = null;\n}\n/**\n * Run operation on input data.\n * @param {Array.<Array|ImageData>} inputs Array of pixels or image data\n *     (depending on the operation type).\n * @param {Object} meta A user data object.  This is passed to all operations\n *     and must be serializable.\n * @param {function(Error, ImageData, Object)} callback Called when work\n *     completes.  The first argument is any error.  The second is the ImageData\n *     generated by operations.  The third is the user data object.\n */\n\n\nProcessor.prototype.process = function (inputs, meta, callback) {\n  this._enqueue({\n    inputs: inputs,\n    meta: meta,\n    callback: callback\n  });\n\n  this._dispatch();\n};\n/**\n * Stop responding to any completed work and destroy the processor.\n */\n\n\nProcessor.prototype.destroy = function () {\n  for (var key in this) {\n    this[key] = null;\n  }\n\n  this._destroyed = true;\n};\n/**\n * Add a job to the queue.\n * @param {Object} job The job.\n */\n\n\nProcessor.prototype._enqueue = function (job) {\n  this._queue.push(job);\n\n  while (this._queue.length > this._maxQueueLength) {\n    this._queue.shift().callback(null, null);\n  }\n};\n/**\n * Dispatch a job.\n */\n\n\nProcessor.prototype._dispatch = function () {\n  if (this._running === 0 && this._queue.length > 0) {\n    var job = this._job = this._queue.shift();\n\n    var width = job.inputs[0].width;\n    var height = job.inputs[0].height;\n    var buffers = job.inputs.map(function (input) {\n      return input.data.buffer;\n    });\n    var threads = this._workers.length;\n    this._running = threads;\n\n    if (threads === 1) {\n      this._workers[0].postMessage({\n        'buffers': buffers,\n        'meta': job.meta,\n        'imageOps': this._imageOps,\n        'width': width,\n        'height': height\n      }, buffers);\n    } else {\n      var length = job.inputs[0].data.length;\n      var segmentLength = 4 * Math.ceil(length / 4 / threads);\n\n      for (var i = 0; i < threads; ++i) {\n        var offset = i * segmentLength;\n        var slices = [];\n\n        for (var j = 0, jj = buffers.length; j < jj; ++j) {\n          slices.push(buffers[i].slice(offset, offset + segmentLength));\n        }\n\n        this._workers[i].postMessage({\n          'buffers': slices,\n          'meta': job.meta,\n          'imageOps': this._imageOps,\n          'width': width,\n          'height': height\n        }, slices);\n      }\n    }\n  }\n};\n/**\n * Handle messages from the worker.\n * @param {number} index The worker index.\n * @param {MessageEvent} event The message event.\n */\n\n\nProcessor.prototype._onWorkerMessage = function (index, event) {\n  if (this._destroyed) {\n    return;\n  }\n\n  this._dataLookup[index] = event.data;\n  --this._running;\n\n  if (this._running === 0) {\n    this._resolveJob();\n  }\n};\n/**\n * Resolve a job.  If there are no more worker threads, the processor callback\n * will be called.\n */\n\n\nProcessor.prototype._resolveJob = function () {\n  var job = this._job;\n  var threads = this._workers.length;\n  var data, meta;\n\n  if (threads === 1) {\n    data = new Uint8ClampedArray(this._dataLookup[0]['buffer']);\n    meta = this._dataLookup[0]['meta'];\n  } else {\n    var length = job.inputs[0].data.length;\n    data = new Uint8ClampedArray(length);\n    meta = new Array(length);\n    var segmentLength = 4 * Math.ceil(length / 4 / threads);\n\n    for (var i = 0; i < threads; ++i) {\n      var buffer = this._dataLookup[i]['buffer'];\n      var offset = i * segmentLength;\n      data.set(new Uint8ClampedArray(buffer), offset);\n      meta[i] = this._dataLookup[i]['meta'];\n    }\n  }\n\n  this._job = null;\n  this._dataLookup = {};\n  job.callback(null, newImageData(data, job.inputs[0].width, job.inputs[0].height), meta);\n\n  this._dispatch();\n};\n\nmodule.exports = Processor;","map":{"version":3,"sources":["C:/Users/Tim/IdeaProjects/Adopt_A_Storm_Drain/src/main/java/com/adoptastormdrain/Map/frontend/node_modules/pixelworks/lib/processor.js"],"names":["newImageData","require","createMinion","operation","workerHasImageData","ImageData","_","newWorkerImageData","data","width","height","buffers","meta","imageOps","numBuffers","length","numBytes","byteLength","output","b","images","Array","Uint8ClampedArray","arrays","pixels","i","j","array","pixel","buffer","createWorker","config","onMessage","lib","Object","keys","map","name","toString","lines","concat","blob","Blob","type","source","URL","createObjectURL","worker","Worker","addEventListener","createFauxWorker","minion","postMessage","setTimeout","Processor","_imageOps","threads","workers","_onWorkerMessage","bind","_workers","_queue","_maxQueueLength","queue","Infinity","_running","_dataLookup","_job","prototype","process","inputs","callback","_enqueue","_dispatch","destroy","key","_destroyed","job","push","shift","input","segmentLength","Math","ceil","offset","slices","jj","slice","index","event","_resolveJob","set","module","exports"],"mappings":"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","sourcesContent":["var newImageData = require('./util').newImageData;\n\n/**\n * Create a function for running operations.  This function is serialized for\n * use in a worker.\n * @param {function(Array, Object):*} operation The operation.\n * @return {function(Object):ArrayBuffer} A function that takes an object with\n * buffers, meta, imageOps, width, and height properties and returns an array\n * buffer.\n */\nfunction createMinion(operation) {\n  var workerHasImageData = true;\n  try {\n    new ImageData(10, 10);\n  } catch (_) {\n    workerHasImageData = false;\n  }\n\n  function newWorkerImageData(data, width, height) {\n    if (workerHasImageData) {\n      return new ImageData(data, width, height);\n    } else {\n      return {data: data, width: width, height: height};\n    }\n  }\n\n  return function(data) {\n    // bracket notation for minification support\n    var buffers = data['buffers'];\n    var meta = data['meta'];\n    var imageOps = data['imageOps'];\n    var width = data['width'];\n    var height = data['height'];\n\n    var numBuffers = buffers.length;\n    var numBytes = buffers[0].byteLength;\n    var output, b;\n\n    if (imageOps) {\n      var images = new Array(numBuffers);\n      for (b = 0; b < numBuffers; ++b) {\n        images[b] = newWorkerImageData(\n            new Uint8ClampedArray(buffers[b]), width, height);\n      }\n      output = operation(images, meta).data;\n    } else {\n      output = new Uint8ClampedArray(numBytes);\n      var arrays = new Array(numBuffers);\n      var pixels = new Array(numBuffers);\n      for (b = 0; b < numBuffers; ++b) {\n        arrays[b] = new Uint8ClampedArray(buffers[b]);\n        pixels[b] = [0, 0, 0, 0];\n      }\n      for (var i = 0; i < numBytes; i += 4) {\n        for (var j = 0; j < numBuffers; ++j) {\n          var array = arrays[j];\n          pixels[j][0] = array[i];\n          pixels[j][1] = array[i + 1];\n          pixels[j][2] = array[i + 2];\n          pixels[j][3] = array[i + 3];\n        }\n        var pixel = operation(pixels, meta);\n        output[i] = pixel[0];\n        output[i + 1] = pixel[1];\n        output[i + 2] = pixel[2];\n        output[i + 3] = pixel[3];\n      }\n    }\n    return output.buffer;\n  };\n}\n\n/**\n * Create a worker for running operations.\n * @param {Object} config Configuration.\n * @param {function(MessageEvent)} onMessage Called with a message event.\n * @return {Worker} The worker.\n */\nfunction createWorker(config, onMessage) {\n  var lib = Object.keys(config.lib || {}).map(function(name) {\n    return 'var ' + name + ' = ' + config.lib[name].toString() + ';';\n  });\n\n  var lines = lib.concat([\n    'var __minion__ = (' + createMinion.toString() + ')(', config.operation.toString(), ');',\n    'self.addEventListener(\"message\", function(event) {',\n    '  var buffer = __minion__(event.data);',\n    '  self.postMessage({buffer: buffer, meta: event.data.meta}, [buffer]);',\n    '});'\n  ]);\n\n  var blob = new Blob(lines, {type: 'text/javascript'});\n  var source = URL.createObjectURL(blob);\n  var worker = new Worker(source);\n  worker.addEventListener('message', onMessage);\n  return worker;\n}\n\n/**\n * Create a faux worker for running operations.\n * @param {Object} config Configuration.\n * @param {function(MessageEvent)} onMessage Called with a message event.\n * @return {Object} The faux worker.\n */\nfunction createFauxWorker(config, onMessage) {\n  var minion = createMinion(config.operation);\n  return {\n    postMessage: function(data) {\n      setTimeout(function() {\n        onMessage({'data': {'buffer': minion(data), 'meta': data['meta']}});\n      }, 0);\n    }\n  };\n}\n\n/**\n * A processor runs pixel or image operations in workers.\n * @param {Object} config Configuration.\n */\nfunction Processor(config) {\n  this._imageOps = !!config.imageOps;\n  var threads;\n  if (config.threads === 0) {\n    threads = 0;\n  } else if (this._imageOps) {\n    threads = 1;\n  } else {\n    threads = config.threads || 1;\n  }\n  var workers = [];\n  if (threads) {\n    for (var i = 0; i < threads; ++i) {\n      workers[i] = createWorker(config, this._onWorkerMessage.bind(this, i));\n    }\n  } else {\n    workers[0] = createFauxWorker(config, this._onWorkerMessage.bind(this, 0));\n  }\n  this._workers = workers;\n  this._queue = [];\n  this._maxQueueLength = config.queue || Infinity;\n  this._running = 0;\n  this._dataLookup = {};\n  this._job = null;\n}\n\n/**\n * Run operation on input data.\n * @param {Array.<Array|ImageData>} inputs Array of pixels or image data\n *     (depending on the operation type).\n * @param {Object} meta A user data object.  This is passed to all operations\n *     and must be serializable.\n * @param {function(Error, ImageData, Object)} callback Called when work\n *     completes.  The first argument is any error.  The second is the ImageData\n *     generated by operations.  The third is the user data object.\n */\nProcessor.prototype.process = function(inputs, meta, callback) {\n  this._enqueue({\n    inputs: inputs,\n    meta: meta,\n    callback: callback\n  });\n  this._dispatch();\n};\n\n/**\n * Stop responding to any completed work and destroy the processor.\n */\nProcessor.prototype.destroy = function() {\n  for (var key in this) {\n    this[key] = null;\n  }\n  this._destroyed = true;\n};\n\n/**\n * Add a job to the queue.\n * @param {Object} job The job.\n */\nProcessor.prototype._enqueue = function(job) {\n  this._queue.push(job);\n  while (this._queue.length > this._maxQueueLength) {\n    this._queue.shift().callback(null, null);\n  }\n};\n\n/**\n * Dispatch a job.\n */\nProcessor.prototype._dispatch = function() {\n  if (this._running === 0 && this._queue.length > 0) {\n    var job = this._job = this._queue.shift();\n    var width = job.inputs[0].width;\n    var height = job.inputs[0].height;\n    var buffers = job.inputs.map(function(input) {\n      return input.data.buffer;\n    });\n    var threads = this._workers.length;\n    this._running = threads;\n    if (threads === 1) {\n      this._workers[0].postMessage({\n        'buffers': buffers,\n        'meta': job.meta,\n        'imageOps': this._imageOps,\n        'width': width,\n        'height': height\n      }, buffers);\n    } else {\n      var length = job.inputs[0].data.length;\n      var segmentLength = 4 * Math.ceil(length / 4 / threads);\n      for (var i = 0; i < threads; ++i) {\n        var offset = i * segmentLength;\n        var slices = [];\n        for (var j = 0, jj = buffers.length; j < jj; ++j) {\n          slices.push(buffers[i].slice(offset, offset + segmentLength));\n        }\n        this._workers[i].postMessage({\n          'buffers': slices,\n          'meta': job.meta,\n          'imageOps': this._imageOps,\n          'width': width,\n          'height': height\n        }, slices);\n      }\n    }\n  }\n};\n\n/**\n * Handle messages from the worker.\n * @param {number} index The worker index.\n * @param {MessageEvent} event The message event.\n */\nProcessor.prototype._onWorkerMessage = function(index, event) {\n  if (this._destroyed) {\n    return;\n  }\n  this._dataLookup[index] = event.data;\n  --this._running;\n  if (this._running === 0) {\n    this._resolveJob();\n  }\n};\n\n/**\n * Resolve a job.  If there are no more worker threads, the processor callback\n * will be called.\n */\nProcessor.prototype._resolveJob = function() {\n  var job = this._job;\n  var threads = this._workers.length;\n  var data, meta;\n  if (threads === 1) {\n    data = new Uint8ClampedArray(this._dataLookup[0]['buffer']);\n    meta = this._dataLookup[0]['meta'];\n  } else {\n    var length = job.inputs[0].data.length;\n    data = new Uint8ClampedArray(length);\n    meta = new Array(length);\n    var segmentLength = 4 * Math.ceil(length / 4 / threads);\n    for (var i = 0; i < threads; ++i) {\n      var buffer = this._dataLookup[i]['buffer'];\n      var offset = i * segmentLength;\n      data.set(new Uint8ClampedArray(buffer), offset);\n      meta[i] = this._dataLookup[i]['meta'];\n    }\n  }\n  this._job = null;\n  this._dataLookup = {};\n  job.callback(null,\n      newImageData(data, job.inputs[0].width, job.inputs[0].height), meta);\n  this._dispatch();\n};\n\nmodule.exports = Processor;\n"]},"metadata":{},"sourceType":"script"}