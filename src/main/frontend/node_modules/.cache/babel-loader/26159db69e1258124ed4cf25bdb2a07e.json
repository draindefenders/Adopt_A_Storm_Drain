{"ast":null,"code":"/**\n * @module ol/source/BingMaps\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { createFromTileUrlFunctions } from '../tileurlfunction.js';\nimport { applyTransform, intersects } from '../extent.js';\nimport { jsonp as requestJSONP } from '../net.js';\nimport { get as getProjection, getTransformFromProjections } from '../proj.js';\nimport SourceState from './State.js';\nimport TileImage from './TileImage.js';\nimport { createOrUpdate } from '../tilecoord.js';\nimport { createXYZ, extentFromProjection } from '../tilegrid.js';\n/**\n * @param {import('../tilecoord.js').TileCoord} tileCoord Tile coord.\n * @return {string} Quad key.\n */\n\nexport function quadKey(tileCoord) {\n  var z = tileCoord[0];\n  var digits = new Array(z);\n  var mask = 1 << z - 1;\n  var i, charCode;\n\n  for (i = 0; i < z; ++i) {\n    // 48 is charCode for 0 - '0'.charCodeAt(0)\n    charCode = 48;\n\n    if (tileCoord[1] & mask) {\n      charCode += 1;\n    }\n\n    if (tileCoord[2] & mask) {\n      charCode += 2;\n    }\n\n    digits[i] = String.fromCharCode(charCode);\n    mask >>= 1;\n  }\n\n  return digits.join('');\n}\n/**\n * The attribution containing a link to the Microsoft® Bing™ Maps Platform APIs’\n * Terms Of Use.\n * @const\n * @type {string}\n */\n\nvar TOS_ATTRIBUTION = '<a class=\"ol-attribution-bing-tos\" ' + 'href=\"https://www.microsoft.com/maps/product/terms.html\" target=\"_blank\">' + 'Terms of Use</a>';\n/**\n * @typedef {Object} Options\n * @property {number} [cacheSize] Tile cache size. The default depends on the screen size. Will increase if too small.\n * @property {boolean} [hidpi=false] If `true` hidpi tiles will be requested.\n * @property {string} [culture='en-us'] Culture code.\n * @property {string} key Bing Maps API key. Get yours at http://www.bingmapsportal.com/.\n * @property {string} imagerySet Type of imagery.\n * @property {number} [maxZoom=21] Max zoom. Default is what's advertized by the BingMaps service.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n */\n\n/**\n * @typedef {Object} BingMapsImageryMetadataResponse\n * @property {number} statusCode The response status code\n * @property {string} statusDescription The response status description\n * @property {string} authenticationResultCode The authentication result code\n * @property {Array<ResourceSet>} resourceSets The array of resource sets\n */\n\n/**\n * @typedef {Object} ResourceSet\n * @property {Array<Resource>} resources\n */\n\n/**\n * @typedef {Object} Resource\n * @property {number} imageHeight The image height\n * @property {number} imageWidth The image width\n * @property {number} zoomMin The minimum zoom level\n * @property {number} zoomMax The maximum zoom level\n * @property {string} imageUrl The image URL\n * @property {Array<string>} imageUrlSubdomains The image URL subdomains for rotation\n * @property {Array<ImageryProvider>} [imageryProviders] The array of ImageryProviders\n */\n\n/**\n * @typedef {Object} ImageryProvider\n * @property {Array<CoverageArea>} coverageAreas The coverage areas\n * @property {string} [attribution] The attribution\n */\n\n/**\n * @typedef {Object} CoverageArea\n * @property {number} zoomMin The minimum zoom\n * @property {number} zoomMax The maximum zoom\n * @property {Array<number>} bbox The coverage bounding box\n */\n\n/**\n * @classdesc\n * Layer source for Bing Maps tile data.\n * @api\n */\n\nvar BingMaps =\n/** @class */\nfunction (_super) {\n  __extends(BingMaps, _super);\n  /**\n   * @param {Options} options Bing Maps options.\n   */\n\n\n  function BingMaps(options) {\n    var _this = this;\n\n    var hidpi = options.hidpi !== undefined ? options.hidpi : false;\n    _this = _super.call(this, {\n      cacheSize: options.cacheSize,\n      crossOrigin: 'anonymous',\n      opaque: true,\n      projection: getProjection('EPSG:3857'),\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      state: SourceState.LOADING,\n      tileLoadFunction: options.tileLoadFunction,\n      tilePixelRatio: hidpi ? 2 : 1,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      transition: options.transition\n    }) || this;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    _this.hidpi_ = hidpi;\n    /**\n     * @private\n     * @type {string}\n     */\n\n    _this.culture_ = options.culture !== undefined ? options.culture : 'en-us';\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.maxZoom_ = options.maxZoom !== undefined ? options.maxZoom : -1;\n    /**\n     * @private\n     * @type {string}\n     */\n\n    _this.apiKey_ = options.key;\n    /**\n     * @private\n     * @type {string}\n     */\n\n    _this.imagerySet_ = options.imagerySet;\n    var url = 'https://dev.virtualearth.net/REST/v1/Imagery/Metadata/' + _this.imagerySet_ + '?uriScheme=https&include=ImageryProviders&key=' + _this.apiKey_ + '&c=' + _this.culture_;\n    requestJSONP(url, _this.handleImageryMetadataResponse.bind(_this), undefined, 'jsonp');\n    return _this;\n  }\n  /**\n   * Get the api key used for this source.\n   *\n   * @return {string} The api key.\n   * @api\n   */\n\n\n  BingMaps.prototype.getApiKey = function () {\n    return this.apiKey_;\n  };\n  /**\n   * Get the imagery set associated with this source.\n   *\n   * @return {string} The imagery set.\n   * @api\n   */\n\n\n  BingMaps.prototype.getImagerySet = function () {\n    return this.imagerySet_;\n  };\n  /**\n   * @param {BingMapsImageryMetadataResponse} response Response.\n   */\n\n\n  BingMaps.prototype.handleImageryMetadataResponse = function (response) {\n    if (response.statusCode != 200 || response.statusDescription != 'OK' || response.authenticationResultCode != 'ValidCredentials' || response.resourceSets.length != 1 || response.resourceSets[0].resources.length != 1) {\n      this.setState(SourceState.ERROR);\n      return;\n    }\n\n    var resource = response.resourceSets[0].resources[0];\n    var maxZoom = this.maxZoom_ == -1 ? resource.zoomMax : this.maxZoom_;\n    var sourceProjection = this.getProjection();\n    var extent = extentFromProjection(sourceProjection);\n    var scale = this.hidpi_ ? 2 : 1;\n    var tileSize = resource.imageWidth == resource.imageHeight ? resource.imageWidth / scale : [resource.imageWidth / scale, resource.imageHeight / scale];\n    var tileGrid = createXYZ({\n      extent: extent,\n      minZoom: resource.zoomMin,\n      maxZoom: maxZoom,\n      tileSize: tileSize\n    });\n    this.tileGrid = tileGrid;\n    var culture = this.culture_;\n    var hidpi = this.hidpi_;\n    this.tileUrlFunction = createFromTileUrlFunctions(resource.imageUrlSubdomains.map(function (subdomain) {\n      /** @type {import('../tilecoord.js').TileCoord} */\n      var quadKeyTileCoord = [0, 0, 0];\n      var imageUrl = resource.imageUrl.replace('{subdomain}', subdomain).replace('{culture}', culture);\n      return (\n        /**\n         * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n         * @param {number} pixelRatio Pixel ratio.\n         * @param {import(\"../proj/Projection.js\").default} projection Projection.\n         * @return {string|undefined} Tile URL.\n         */\n        function (tileCoord, pixelRatio, projection) {\n          if (!tileCoord) {\n            return undefined;\n          } else {\n            createOrUpdate(tileCoord[0], tileCoord[1], tileCoord[2], quadKeyTileCoord);\n            var url = imageUrl;\n\n            if (hidpi) {\n              url += '&dpi=d1&device=mobile';\n            }\n\n            return url.replace('{quadkey}', quadKey(quadKeyTileCoord));\n          }\n        }\n      );\n    }));\n\n    if (resource.imageryProviders) {\n      var transform_1 = getTransformFromProjections(getProjection('EPSG:4326'), this.getProjection());\n      this.setAttributions(function (frameState) {\n        var attributions = [];\n        var viewState = frameState.viewState;\n        var tileGrid = this.getTileGrid();\n        var z = tileGrid.getZForResolution(viewState.resolution, this.zDirection);\n        var tileCoord = tileGrid.getTileCoordForCoordAndZ(viewState.center, z);\n        var zoom = tileCoord[0];\n        resource.imageryProviders.map(function (imageryProvider) {\n          var intersecting = false;\n          var coverageAreas = imageryProvider.coverageAreas;\n\n          for (var i = 0, ii = coverageAreas.length; i < ii; ++i) {\n            var coverageArea = coverageAreas[i];\n\n            if (zoom >= coverageArea.zoomMin && zoom <= coverageArea.zoomMax) {\n              var bbox = coverageArea.bbox;\n              var epsg4326Extent = [bbox[1], bbox[0], bbox[3], bbox[2]];\n              var extent_1 = applyTransform(epsg4326Extent, transform_1);\n\n              if (intersects(extent_1, frameState.extent)) {\n                intersecting = true;\n                break;\n              }\n            }\n          }\n\n          if (intersecting) {\n            attributions.push(imageryProvider.attribution);\n          }\n        });\n        attributions.push(TOS_ATTRIBUTION);\n        return attributions;\n      }.bind(this));\n    }\n\n    this.setState(SourceState.READY);\n  };\n\n  return BingMaps;\n}(TileImage);\n\nexport default BingMaps;","map":{"version":3,"sources":["../src/source/BingMaps.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @module ol/source/BingMaps\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { createFromTileUrlFunctions } from '../tileurlfunction.js';\nimport { applyTransform, intersects } from '../extent.js';\nimport { jsonp as requestJSONP } from '../net.js';\nimport { get as getProjection, getTransformFromProjections } from '../proj.js';\nimport SourceState from './State.js';\nimport TileImage from './TileImage.js';\nimport { createOrUpdate } from '../tilecoord.js';\nimport { createXYZ, extentFromProjection } from '../tilegrid.js';\n/**\n * @param {import('../tilecoord.js').TileCoord} tileCoord Tile coord.\n * @return {string} Quad key.\n */\nexport function quadKey(tileCoord) {\n    var z = tileCoord[0];\n    var digits = new Array(z);\n    var mask = 1 << (z - 1);\n    var i, charCode;\n    for (i = 0; i < z; ++i) {\n        // 48 is charCode for 0 - '0'.charCodeAt(0)\n        charCode = 48;\n        if (tileCoord[1] & mask) {\n            charCode += 1;\n        }\n        if (tileCoord[2] & mask) {\n            charCode += 2;\n        }\n        digits[i] = String.fromCharCode(charCode);\n        mask >>= 1;\n    }\n    return digits.join('');\n}\n/**\n * The attribution containing a link to the Microsoft® Bing™ Maps Platform APIs’\n * Terms Of Use.\n * @const\n * @type {string}\n */\nvar TOS_ATTRIBUTION = '<a class=\"ol-attribution-bing-tos\" ' +\n    'href=\"https://www.microsoft.com/maps/product/terms.html\" target=\"_blank\">' +\n    'Terms of Use</a>';\n/**\n * @typedef {Object} Options\n * @property {number} [cacheSize] Tile cache size. The default depends on the screen size. Will increase if too small.\n * @property {boolean} [hidpi=false] If `true` hidpi tiles will be requested.\n * @property {string} [culture='en-us'] Culture code.\n * @property {string} key Bing Maps API key. Get yours at http://www.bingmapsportal.com/.\n * @property {string} imagerySet Type of imagery.\n * @property {number} [maxZoom=21] Max zoom. Default is what's advertized by the BingMaps service.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n */\n/**\n * @typedef {Object} BingMapsImageryMetadataResponse\n * @property {number} statusCode The response status code\n * @property {string} statusDescription The response status description\n * @property {string} authenticationResultCode The authentication result code\n * @property {Array<ResourceSet>} resourceSets The array of resource sets\n */\n/**\n * @typedef {Object} ResourceSet\n * @property {Array<Resource>} resources\n */\n/**\n * @typedef {Object} Resource\n * @property {number} imageHeight The image height\n * @property {number} imageWidth The image width\n * @property {number} zoomMin The minimum zoom level\n * @property {number} zoomMax The maximum zoom level\n * @property {string} imageUrl The image URL\n * @property {Array<string>} imageUrlSubdomains The image URL subdomains for rotation\n * @property {Array<ImageryProvider>} [imageryProviders] The array of ImageryProviders\n */\n/**\n * @typedef {Object} ImageryProvider\n * @property {Array<CoverageArea>} coverageAreas The coverage areas\n * @property {string} [attribution] The attribution\n */\n/**\n * @typedef {Object} CoverageArea\n * @property {number} zoomMin The minimum zoom\n * @property {number} zoomMax The maximum zoom\n * @property {Array<number>} bbox The coverage bounding box\n */\n/**\n * @classdesc\n * Layer source for Bing Maps tile data.\n * @api\n */\nvar BingMaps = /** @class */ (function (_super) {\n    __extends(BingMaps, _super);\n    /**\n     * @param {Options} options Bing Maps options.\n     */\n    function BingMaps(options) {\n        var _this = this;\n        var hidpi = options.hidpi !== undefined ? options.hidpi : false;\n        _this = _super.call(this, {\n            cacheSize: options.cacheSize,\n            crossOrigin: 'anonymous',\n            opaque: true,\n            projection: getProjection('EPSG:3857'),\n            reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n            state: SourceState.LOADING,\n            tileLoadFunction: options.tileLoadFunction,\n            tilePixelRatio: hidpi ? 2 : 1,\n            wrapX: options.wrapX !== undefined ? options.wrapX : true,\n            transition: options.transition\n        }) || this;\n        /**\n         * @private\n         * @type {boolean}\n         */\n        _this.hidpi_ = hidpi;\n        /**\n         * @private\n         * @type {string}\n         */\n        _this.culture_ = options.culture !== undefined ? options.culture : 'en-us';\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.maxZoom_ = options.maxZoom !== undefined ? options.maxZoom : -1;\n        /**\n         * @private\n         * @type {string}\n         */\n        _this.apiKey_ = options.key;\n        /**\n         * @private\n         * @type {string}\n         */\n        _this.imagerySet_ = options.imagerySet;\n        var url = 'https://dev.virtualearth.net/REST/v1/Imagery/Metadata/' +\n            _this.imagerySet_ +\n            '?uriScheme=https&include=ImageryProviders&key=' + _this.apiKey_ +\n            '&c=' + _this.culture_;\n        requestJSONP(url, _this.handleImageryMetadataResponse.bind(_this), undefined, 'jsonp');\n        return _this;\n    }\n    /**\n     * Get the api key used for this source.\n     *\n     * @return {string} The api key.\n     * @api\n     */\n    BingMaps.prototype.getApiKey = function () {\n        return this.apiKey_;\n    };\n    /**\n     * Get the imagery set associated with this source.\n     *\n     * @return {string} The imagery set.\n     * @api\n     */\n    BingMaps.prototype.getImagerySet = function () {\n        return this.imagerySet_;\n    };\n    /**\n     * @param {BingMapsImageryMetadataResponse} response Response.\n     */\n    BingMaps.prototype.handleImageryMetadataResponse = function (response) {\n        if (response.statusCode != 200 ||\n            response.statusDescription != 'OK' ||\n            response.authenticationResultCode != 'ValidCredentials' ||\n            response.resourceSets.length != 1 ||\n            response.resourceSets[0].resources.length != 1) {\n            this.setState(SourceState.ERROR);\n            return;\n        }\n        var resource = response.resourceSets[0].resources[0];\n        var maxZoom = this.maxZoom_ == -1 ? resource.zoomMax : this.maxZoom_;\n        var sourceProjection = this.getProjection();\n        var extent = extentFromProjection(sourceProjection);\n        var scale = this.hidpi_ ? 2 : 1;\n        var tileSize = resource.imageWidth == resource.imageHeight ?\n            resource.imageWidth / scale :\n            [resource.imageWidth / scale, resource.imageHeight / scale];\n        var tileGrid = createXYZ({\n            extent: extent,\n            minZoom: resource.zoomMin,\n            maxZoom: maxZoom,\n            tileSize: tileSize\n        });\n        this.tileGrid = tileGrid;\n        var culture = this.culture_;\n        var hidpi = this.hidpi_;\n        this.tileUrlFunction = createFromTileUrlFunctions(resource.imageUrlSubdomains.map(function (subdomain) {\n            /** @type {import('../tilecoord.js').TileCoord} */\n            var quadKeyTileCoord = [0, 0, 0];\n            var imageUrl = resource.imageUrl\n                .replace('{subdomain}', subdomain)\n                .replace('{culture}', culture);\n            return (\n            /**\n             * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n             * @param {number} pixelRatio Pixel ratio.\n             * @param {import(\"../proj/Projection.js\").default} projection Projection.\n             * @return {string|undefined} Tile URL.\n             */\n            function (tileCoord, pixelRatio, projection) {\n                if (!tileCoord) {\n                    return undefined;\n                }\n                else {\n                    createOrUpdate(tileCoord[0], tileCoord[1], tileCoord[2], quadKeyTileCoord);\n                    var url = imageUrl;\n                    if (hidpi) {\n                        url += '&dpi=d1&device=mobile';\n                    }\n                    return url.replace('{quadkey}', quadKey(quadKeyTileCoord));\n                }\n            });\n        }));\n        if (resource.imageryProviders) {\n            var transform_1 = getTransformFromProjections(getProjection('EPSG:4326'), this.getProjection());\n            this.setAttributions(function (frameState) {\n                var attributions = [];\n                var viewState = frameState.viewState;\n                var tileGrid = this.getTileGrid();\n                var z = tileGrid.getZForResolution(viewState.resolution, this.zDirection);\n                var tileCoord = tileGrid.getTileCoordForCoordAndZ(viewState.center, z);\n                var zoom = tileCoord[0];\n                resource.imageryProviders.map(function (imageryProvider) {\n                    var intersecting = false;\n                    var coverageAreas = imageryProvider.coverageAreas;\n                    for (var i = 0, ii = coverageAreas.length; i < ii; ++i) {\n                        var coverageArea = coverageAreas[i];\n                        if (zoom >= coverageArea.zoomMin && zoom <= coverageArea.zoomMax) {\n                            var bbox = coverageArea.bbox;\n                            var epsg4326Extent = [bbox[1], bbox[0], bbox[3], bbox[2]];\n                            var extent_1 = applyTransform(epsg4326Extent, transform_1);\n                            if (intersects(extent_1, frameState.extent)) {\n                                intersecting = true;\n                                break;\n                            }\n                        }\n                    }\n                    if (intersecting) {\n                        attributions.push(imageryProvider.attribution);\n                    }\n                });\n                attributions.push(TOS_ATTRIBUTION);\n                return attributions;\n            }.bind(this));\n        }\n        this.setState(SourceState.READY);\n    };\n    return BingMaps;\n}(TileImage));\nexport default BingMaps;\n//# sourceMappingURL=BingMaps.js.map"]},"metadata":{},"sourceType":"module"}