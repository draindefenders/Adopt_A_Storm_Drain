{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/interaction/Draw\n */\n\n\nimport EventType from '../events/EventType.js';\nimport Feature from '../Feature.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport MapBrowserPointerEvent from '../MapBrowserPointerEvent.js';\nimport { getChangeEventType } from '../Object.js';\nimport { squaredDistance as squaredCoordinateDistance } from '../coordinate.js';\nimport Event from '../events/Event.js';\nimport { noModifierKeys, always, shiftKeyOnly } from '../events/condition.js';\nimport { boundingExtent, getBottomLeft, getBottomRight, getTopLeft, getTopRight } from '../extent.js';\nimport { TRUE, FALSE } from '../functions.js';\nimport Circle from '../geom/Circle.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport LineString from '../geom/LineString.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Point from '../geom/Point.js';\nimport Polygon, { fromCircle, makeRegular } from '../geom/Polygon.js';\nimport PointerInteraction from './Pointer.js';\nimport InteractionProperty from './Property.js';\nimport VectorLayer from '../layer/Vector.js';\nimport VectorSource from '../source/Vector.js';\nimport { createEditingStyle } from '../style/Style.js';\nimport { fromUserCoordinate, getUserProjection } from '../proj.js';\n/**\n * @typedef {Object} Options\n * @property {GeometryType} type Geometry type of\n * the geometries being drawn with this instance.\n * @property {number} [clickTolerance=6] The maximum distance in pixels between\n * \"down\" and \"up\" for a \"up\" event to be considered a \"click\" event and\n * actually add a point/vertex to the geometry being drawn.  The default of `6`\n * was chosen for the draw interaction to behave correctly on mouse as well as\n * on touch devices.\n * @property {import(\"../Collection.js\").default<Feature>} [features]\n * Destination collection for the drawn features.\n * @property {VectorSource} [source] Destination source for\n * the drawn features.\n * @property {number} [dragVertexDelay=500] Delay in milliseconds after pointerdown\n * before the current vertex can be dragged to its exact position.\n * @property {number} [snapTolerance=12] Pixel distance for snapping to the\n * drawing finish.\n * @property {boolean} [stopClick=false] Stop click, singleclick, and\n * doubleclick events from firing during drawing.\n * @property {number} [maxPoints] The number of points that can be drawn before\n * a polygon ring or line string is finished. By default there is no\n * restriction.\n * @property {number} [minPoints] The number of points that must be drawn\n * before a polygon ring or line string can be finished. Default is `3` for\n * polygon rings and `2` for line strings.\n * @property {import(\"../events/condition.js\").Condition} [finishCondition] A function\n * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether the drawing can be finished.\n * @property {import(\"../style/Style.js\").StyleLike} [style]\n * Style for sketch features.\n * @property {GeometryFunction} [geometryFunction]\n * Function that is called when a geometry's coordinates are updated.\n * @property {string} [geometryName] Geometry name to use for features created\n * by the draw interaction.\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled.\n * By default {@link module:ol/events/condition~noModifierKeys}, i.e. a click,\n * adds a vertex or deactivates freehand drawing.\n * @property {boolean} [freehand=false] Operate in freehand mode for lines,\n * polygons, and circles.  This makes the interaction always operate in freehand\n * mode and takes precedence over any `freehandCondition` option.\n * @property {import(\"../events/condition.js\").Condition} [freehandCondition]\n * Condition that activates freehand drawing for lines and polygons. This\n * function takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and\n * returns a boolean to indicate whether that event should be handled. The\n * default is {@link module:ol/events/condition~shiftKeyOnly}, meaning that the\n * Shift key activates freehand drawing.\n * @property {boolean} [wrapX=false] Wrap the world horizontally on the sketch\n * overlay.\n */\n\n/**\n * Coordinate type when drawing points.\n * @typedef {import(\"../coordinate.js\").Coordinate} PointCoordType\n */\n\n/**\n * Coordinate type when drawing lines.\n * @typedef {Array<import(\"../coordinate.js\").Coordinate>} LineCoordType\n */\n\n/**\n * Coordinate type when drawing polygons.\n * @typedef {Array<Array<import(\"../coordinate.js\").Coordinate>>} PolyCoordType\n */\n\n/**\n * Types used for drawing coordinates.\n * @typedef {PointCoordType|LineCoordType|PolyCoordType} SketchCoordType\n */\n\n/**\n * Function that takes an array of coordinates and an optional existing geometry\n * and a projection as arguments, and returns a geometry. The optional existing\n * geometry is the geometry that is returned when the function is called without\n * a second argument.\n * @typedef {function(!SketchCoordType, import(\"../geom/SimpleGeometry.js\").default=,\n *     import(\"../proj/Projection.js\").default):\n *     import(\"../geom/SimpleGeometry.js\").default} GeometryFunction\n */\n\n/**\n * Draw mode.  This collapses multi-part geometry types with their single-part\n * cousins.\n * @enum {string}\n */\n\nvar Mode = {\n  POINT: 'Point',\n  LINE_STRING: 'LineString',\n  POLYGON: 'Polygon',\n  CIRCLE: 'Circle'\n};\n/**\n * @enum {string}\n */\n\nvar DrawEventType = {\n  /**\n   * Triggered upon feature draw start\n   * @event DrawEvent#drawstart\n   * @api\n   */\n  DRAWSTART: 'drawstart',\n\n  /**\n   * Triggered upon feature draw end\n   * @event DrawEvent#drawend\n   * @api\n   */\n  DRAWEND: 'drawend'\n};\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/Draw~Draw} instances are\n * instances of this type.\n */\n\nvar DrawEvent =\n/** @class */\nfunction (_super) {\n  __extends(DrawEvent, _super);\n  /**\n   * @param {DrawEventType} type Type.\n   * @param {Feature} feature The feature drawn.\n   */\n\n\n  function DrawEvent(type, feature) {\n    var _this = _super.call(this, type) || this;\n    /**\n     * The feature being drawn.\n     * @type {Feature}\n     * @api\n     */\n\n\n    _this.feature = feature;\n    return _this;\n  }\n\n  return DrawEvent;\n}(Event);\n/**\n * @classdesc\n * Interaction for drawing feature geometries.\n *\n * @fires DrawEvent\n * @api\n */\n\n\nvar Draw =\n/** @class */\nfunction (_super) {\n  __extends(Draw, _super);\n  /**\n   * @param {Options} options Options.\n   */\n\n\n  function Draw(options) {\n    var _this = this;\n\n    var pointerOptions =\n    /** @type {import(\"./Pointer.js\").Options} */\n    options;\n\n    if (!pointerOptions.stopDown) {\n      pointerOptions.stopDown = FALSE;\n    }\n\n    _this = _super.call(this, pointerOptions) || this;\n    /**\n     * @type {boolean}\n     * @private\n     */\n\n    _this.shouldHandle_ = false;\n    /**\n     * @type {import(\"../pixel.js\").Pixel}\n     * @private\n     */\n\n    _this.downPx_ = null;\n    /**\n     * @type {?}\n     * @private\n     */\n\n    _this.downTimeout_;\n    /**\n     * @type {number|undefined}\n     * @private\n     */\n\n    _this.lastDragTime_;\n    /**\n     * @type {boolean}\n     * @private\n     */\n\n    _this.freehand_ = false;\n    /**\n     * Target source for drawn features.\n     * @type {VectorSource}\n     * @private\n     */\n\n    _this.source_ = options.source ? options.source : null;\n    /**\n     * Target collection for drawn features.\n     * @type {import(\"../Collection.js\").default<Feature>}\n     * @private\n     */\n\n    _this.features_ = options.features ? options.features : null;\n    /**\n     * Pixel distance for snapping.\n     * @type {number}\n     * @private\n     */\n\n    _this.snapTolerance_ = options.snapTolerance ? options.snapTolerance : 12;\n    /**\n     * Geometry type.\n     * @type {GeometryType}\n     * @private\n     */\n\n    _this.type_ =\n    /** @type {GeometryType} */\n    options.type;\n    /**\n     * Drawing mode (derived from geometry type.\n     * @type {Mode}\n     * @private\n     */\n\n    _this.mode_ = getMode(_this.type_);\n    /**\n     * Stop click, singleclick, and doubleclick events from firing during drawing.\n     * Default is `false`.\n     * @type {boolean}\n     * @private\n     */\n\n    _this.stopClick_ = !!options.stopClick;\n    /**\n     * The number of points that must be drawn before a polygon ring or line\n     * string can be finished.  The default is 3 for polygon rings and 2 for\n     * line strings.\n     * @type {number}\n     * @private\n     */\n\n    _this.minPoints_ = options.minPoints ? options.minPoints : _this.mode_ === Mode.POLYGON ? 3 : 2;\n    /**\n     * The number of points that can be drawn before a polygon ring or line string\n     * is finished. The default is no restriction.\n     * @type {number}\n     * @private\n     */\n\n    _this.maxPoints_ = options.maxPoints ? options.maxPoints : Infinity;\n    /**\n     * A function to decide if a potential finish coordinate is permissible\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n\n    _this.finishCondition_ = options.finishCondition ? options.finishCondition : TRUE;\n    var geometryFunction = options.geometryFunction;\n\n    if (!geometryFunction) {\n      if (_this.type_ === GeometryType.CIRCLE) {\n        /**\n         * @param {!LineCoordType} coordinates The coordinates.\n         * @param {import(\"../geom/SimpleGeometry.js\").default=} opt_geometry Optional geometry.\n         * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n         * @return {import(\"../geom/SimpleGeometry.js\").default} A geometry.\n         */\n        geometryFunction = function (coordinates, opt_geometry, projection) {\n          var circle = opt_geometry ?\n          /** @type {Circle} */\n          opt_geometry : new Circle([NaN, NaN]);\n          var center = fromUserCoordinate(coordinates[0], projection);\n          var squaredLength = squaredCoordinateDistance(center, fromUserCoordinate(coordinates[1], projection));\n          circle.setCenterAndRadius(center, Math.sqrt(squaredLength));\n          var userProjection = getUserProjection();\n\n          if (userProjection) {\n            circle.transform(projection, userProjection);\n          }\n\n          return circle;\n        };\n      } else {\n        var Constructor_1;\n        var mode_1 = _this.mode_;\n\n        if (mode_1 === Mode.POINT) {\n          Constructor_1 = Point;\n        } else if (mode_1 === Mode.LINE_STRING) {\n          Constructor_1 = LineString;\n        } else if (mode_1 === Mode.POLYGON) {\n          Constructor_1 = Polygon;\n        }\n        /**\n         * @param {!LineCoordType} coordinates The coordinates.\n         * @param {import(\"../geom/SimpleGeometry.js\").default=} opt_geometry Optional geometry.\n         * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n         * @return {import(\"../geom/SimpleGeometry.js\").default} A geometry.\n         */\n\n\n        geometryFunction = function (coordinates, opt_geometry, projection) {\n          var geometry = opt_geometry;\n\n          if (geometry) {\n            if (mode_1 === Mode.POLYGON) {\n              if (coordinates[0].length) {\n                // Add a closing coordinate to match the first\n                geometry.setCoordinates([coordinates[0].concat([coordinates[0][0]])]);\n              } else {\n                geometry.setCoordinates([]);\n              }\n            } else {\n              geometry.setCoordinates(coordinates);\n            }\n          } else {\n            geometry = new Constructor_1(coordinates);\n          }\n\n          return geometry;\n        };\n      }\n    }\n    /**\n     * @type {GeometryFunction}\n     * @private\n     */\n\n\n    _this.geometryFunction_ = geometryFunction;\n    /**\n     * @type {number}\n     * @private\n     */\n\n    _this.dragVertexDelay_ = options.dragVertexDelay !== undefined ? options.dragVertexDelay : 500;\n    /**\n     * Finish coordinate for the feature (first point for polygons, last point for\n     * linestrings).\n     * @type {import(\"../coordinate.js\").Coordinate}\n     * @private\n     */\n\n    _this.finishCoordinate_ = null;\n    /**\n     * Sketch feature.\n     * @type {Feature}\n     * @private\n     */\n\n    _this.sketchFeature_ = null;\n    /**\n     * Sketch point.\n     * @type {Feature<Point>}\n     * @private\n     */\n\n    _this.sketchPoint_ = null;\n    /**\n     * Sketch coordinates. Used when drawing a line or polygon.\n     * @type {SketchCoordType}\n     * @private\n     */\n\n    _this.sketchCoords_ = null;\n    /**\n     * Sketch line. Used when drawing polygon.\n     * @type {Feature<LineString>}\n     * @private\n     */\n\n    _this.sketchLine_ = null;\n    /**\n     * Sketch line coordinates. Used when drawing a polygon or circle.\n     * @type {LineCoordType}\n     * @private\n     */\n\n    _this.sketchLineCoords_ = null;\n    /**\n     * Squared tolerance for handling up events.  If the squared distance\n     * between a down and up event is greater than this tolerance, up events\n     * will not be handled.\n     * @type {number}\n     * @private\n     */\n\n    _this.squaredClickTolerance_ = options.clickTolerance ? options.clickTolerance * options.clickTolerance : 36;\n    /**\n     * Draw overlay where our sketch features are drawn.\n     * @type {VectorLayer}\n     * @private\n     */\n\n    _this.overlay_ = new VectorLayer({\n      source: new VectorSource({\n        useSpatialIndex: false,\n        wrapX: options.wrapX ? options.wrapX : false\n      }),\n      style: options.style ? options.style : getDefaultStyleFunction(),\n      updateWhileInteracting: true\n    });\n    /**\n     * Name of the geometry attribute for newly created features.\n     * @type {string|undefined}\n     * @private\n     */\n\n    _this.geometryName_ = options.geometryName;\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n\n    _this.condition_ = options.condition ? options.condition : noModifierKeys;\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n\n    _this.freehandCondition_;\n\n    if (options.freehand) {\n      _this.freehandCondition_ = always;\n    } else {\n      _this.freehandCondition_ = options.freehandCondition ? options.freehandCondition : shiftKeyOnly;\n    }\n\n    _this.addEventListener(getChangeEventType(InteractionProperty.ACTIVE), _this.updateState_);\n\n    return _this;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  Draw.prototype.setMap = function (map) {\n    _super.prototype.setMap.call(this, map);\n\n    this.updateState_();\n  };\n  /**\n   * Get the overlay layer that this interaction renders sketch features to.\n   * @return {VectorLayer} Overlay layer.\n   * @api\n   */\n\n\n  Draw.prototype.getOverlay = function () {\n    return this.overlay_;\n  };\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent map browser event} and may actually draw or finish the drawing.\n   * @override\n   * @api\n   */\n\n\n  Draw.prototype.handleEvent = function (event) {\n    if (event.originalEvent.type === EventType.CONTEXTMENU) {\n      // Avoid context menu for long taps when drawing on mobile\n      event.preventDefault();\n    }\n\n    this.freehand_ = this.mode_ !== Mode.POINT && this.freehandCondition_(event);\n    var move = event.type === MapBrowserEventType.POINTERMOVE;\n    var pass = true;\n\n    if (!this.freehand_ && this.lastDragTime_ && event.type === MapBrowserEventType.POINTERDRAG) {\n      var now = Date.now();\n\n      if (now - this.lastDragTime_ >= this.dragVertexDelay_) {\n        this.downPx_ = event.pixel;\n        this.shouldHandle_ = !this.freehand_;\n        move = true;\n      } else {\n        this.lastDragTime_ = undefined;\n      }\n\n      if (this.shouldHandle_ && this.downTimeout_ !== undefined) {\n        clearTimeout(this.downTimeout_);\n        this.downTimeout_ = undefined;\n      }\n    }\n\n    if (this.freehand_ && event.type === MapBrowserEventType.POINTERDRAG && this.sketchFeature_ !== null) {\n      this.addToDrawing_(event.coordinate);\n      pass = false;\n    } else if (this.freehand_ && event.type === MapBrowserEventType.POINTERDOWN) {\n      pass = false;\n    } else if (move) {\n      pass = event.type === MapBrowserEventType.POINTERMOVE;\n\n      if (pass && this.freehand_) {\n        pass = this.handlePointerMove_(event);\n      } else if (\n      /** @type {MapBrowserPointerEvent} */\n      event.pointerEvent.pointerType == 'mouse' || event.type === MapBrowserEventType.POINTERDRAG && this.downTimeout_ === undefined) {\n        this.handlePointerMove_(event);\n      }\n    } else if (event.type === MapBrowserEventType.DBLCLICK) {\n      pass = false;\n    }\n\n    return _super.prototype.handleEvent.call(this, event) && pass;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Draw.prototype.handleDownEvent = function (event) {\n    this.shouldHandle_ = !this.freehand_;\n\n    if (this.freehand_) {\n      this.downPx_ = event.pixel;\n\n      if (!this.finishCoordinate_) {\n        this.startDrawing_(event);\n      }\n\n      return true;\n    } else if (this.condition_(event)) {\n      this.lastDragTime_ = Date.now();\n      this.downTimeout_ = setTimeout(function () {\n        this.handlePointerMove_(new MapBrowserPointerEvent(MapBrowserEventType.POINTERMOVE, event.map, event.pointerEvent, false, event.frameState));\n      }.bind(this), this.dragVertexDelay_);\n      this.downPx_ = event.pixel;\n      return true;\n    } else {\n      this.lastDragTime_ = undefined;\n      return false;\n    }\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Draw.prototype.handleUpEvent = function (event) {\n    var pass = true;\n\n    if (this.downTimeout_) {\n      clearTimeout(this.downTimeout_);\n      this.downTimeout_ = undefined;\n    }\n\n    this.handlePointerMove_(event);\n    var circleMode = this.mode_ === Mode.CIRCLE;\n\n    if (this.shouldHandle_) {\n      if (!this.finishCoordinate_) {\n        this.startDrawing_(event);\n\n        if (this.mode_ === Mode.POINT) {\n          this.finishDrawing();\n        }\n      } else if (this.freehand_ || circleMode) {\n        this.finishDrawing();\n      } else if (this.atFinish_(event)) {\n        if (this.finishCondition_(event)) {\n          this.finishDrawing();\n        }\n      } else {\n        this.addToDrawing_(event.coordinate);\n      }\n\n      pass = false;\n    } else if (this.freehand_) {\n      this.finishCoordinate_ = null;\n      this.abortDrawing_();\n    }\n\n    if (!pass && this.stopClick_) {\n      event.stopPropagation();\n    }\n\n    return pass;\n  };\n  /**\n   * Handle move events.\n   * @param {import(\"../MapBrowserEvent.js\").default} event A move event.\n   * @return {boolean} Pass the event to other interactions.\n   * @private\n   */\n\n\n  Draw.prototype.handlePointerMove_ = function (event) {\n    if (this.downPx_ && (!this.freehand_ && this.shouldHandle_ || this.freehand_ && !this.shouldHandle_)) {\n      var downPx = this.downPx_;\n      var clickPx = event.pixel;\n      var dx = downPx[0] - clickPx[0];\n      var dy = downPx[1] - clickPx[1];\n      var squaredDistance = dx * dx + dy * dy;\n      this.shouldHandle_ = this.freehand_ ? squaredDistance > this.squaredClickTolerance_ : squaredDistance <= this.squaredClickTolerance_;\n\n      if (!this.shouldHandle_) {\n        return true;\n      }\n    }\n\n    if (this.finishCoordinate_) {\n      this.modifyDrawing_(event);\n    } else {\n      this.createOrUpdateSketchPoint_(event);\n    }\n\n    return true;\n  };\n  /**\n   * Determine if an event is within the snapping tolerance of the start coord.\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   * @return {boolean} The event is within the snapping tolerance of the start.\n   * @private\n   */\n\n\n  Draw.prototype.atFinish_ = function (event) {\n    var at = false;\n\n    if (this.sketchFeature_) {\n      var potentiallyDone = false;\n      var potentiallyFinishCoordinates = [this.finishCoordinate_];\n\n      if (this.mode_ === Mode.LINE_STRING) {\n        potentiallyDone = this.sketchCoords_.length > this.minPoints_;\n      } else if (this.mode_ === Mode.POLYGON) {\n        var sketchCoords =\n        /** @type {PolyCoordType} */\n        this.sketchCoords_;\n        potentiallyDone = sketchCoords[0].length > this.minPoints_;\n        potentiallyFinishCoordinates = [sketchCoords[0][0], sketchCoords[0][sketchCoords[0].length - 2]];\n      }\n\n      if (potentiallyDone) {\n        var map = event.map;\n\n        for (var i = 0, ii = potentiallyFinishCoordinates.length; i < ii; i++) {\n          var finishCoordinate = potentiallyFinishCoordinates[i];\n          var finishPixel = map.getPixelFromCoordinate(finishCoordinate);\n          var pixel = event.pixel;\n          var dx = pixel[0] - finishPixel[0];\n          var dy = pixel[1] - finishPixel[1];\n          var snapTolerance = this.freehand_ ? 1 : this.snapTolerance_;\n          at = Math.sqrt(dx * dx + dy * dy) <= snapTolerance;\n\n          if (at) {\n            this.finishCoordinate_ = finishCoordinate;\n            break;\n          }\n        }\n      }\n    }\n\n    return at;\n  };\n  /**\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   * @private\n   */\n\n\n  Draw.prototype.createOrUpdateSketchPoint_ = function (event) {\n    var coordinates = event.coordinate.slice();\n\n    if (!this.sketchPoint_) {\n      this.sketchPoint_ = new Feature(new Point(coordinates));\n      this.updateSketchFeatures_();\n    } else {\n      var sketchPointGeom = this.sketchPoint_.getGeometry();\n      sketchPointGeom.setCoordinates(coordinates);\n    }\n  };\n  /**\n   * Start the drawing.\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   * @private\n   */\n\n\n  Draw.prototype.startDrawing_ = function (event) {\n    var start = event.coordinate;\n    var projection = event.map.getView().getProjection();\n    this.finishCoordinate_ = start;\n\n    if (this.mode_ === Mode.POINT) {\n      this.sketchCoords_ = start.slice();\n    } else if (this.mode_ === Mode.POLYGON) {\n      this.sketchCoords_ = [[start.slice(), start.slice()]];\n      this.sketchLineCoords_ = this.sketchCoords_[0];\n    } else {\n      this.sketchCoords_ = [start.slice(), start.slice()];\n    }\n\n    if (this.sketchLineCoords_) {\n      this.sketchLine_ = new Feature(new LineString(this.sketchLineCoords_));\n    }\n\n    var geometry = this.geometryFunction_(this.sketchCoords_, undefined, projection);\n    this.sketchFeature_ = new Feature();\n\n    if (this.geometryName_) {\n      this.sketchFeature_.setGeometryName(this.geometryName_);\n    }\n\n    this.sketchFeature_.setGeometry(geometry);\n    this.updateSketchFeatures_();\n    this.dispatchEvent(new DrawEvent(DrawEventType.DRAWSTART, this.sketchFeature_));\n  };\n  /**\n   * Modify the drawing.\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   * @private\n   */\n\n\n  Draw.prototype.modifyDrawing_ = function (event) {\n    var coordinate = event.coordinate;\n    var geometry = this.sketchFeature_.getGeometry();\n    var projection = event.map.getView().getProjection();\n    var coordinates, last;\n\n    if (this.mode_ === Mode.POINT) {\n      last = this.sketchCoords_;\n    } else if (this.mode_ === Mode.POLYGON) {\n      coordinates =\n      /** @type {PolyCoordType} */\n      this.sketchCoords_[0];\n      last = coordinates[coordinates.length - 1];\n\n      if (this.atFinish_(event)) {\n        // snap to finish\n        coordinate = this.finishCoordinate_.slice();\n      }\n    } else {\n      coordinates = this.sketchCoords_;\n      last = coordinates[coordinates.length - 1];\n    }\n\n    last[0] = coordinate[0];\n    last[1] = coordinate[1];\n    this.geometryFunction_(\n    /** @type {!LineCoordType} */\n    this.sketchCoords_, geometry, projection);\n\n    if (this.sketchPoint_) {\n      var sketchPointGeom = this.sketchPoint_.getGeometry();\n      sketchPointGeom.setCoordinates(coordinate);\n    }\n    /** @type {LineString} */\n\n\n    var sketchLineGeom;\n\n    if (geometry.getType() == GeometryType.POLYGON && this.mode_ !== Mode.POLYGON) {\n      if (!this.sketchLine_) {\n        this.sketchLine_ = new Feature();\n      }\n\n      var ring = geometry.getLinearRing(0);\n      sketchLineGeom = this.sketchLine_.getGeometry();\n\n      if (!sketchLineGeom) {\n        sketchLineGeom = new LineString(ring.getFlatCoordinates(), ring.getLayout());\n        this.sketchLine_.setGeometry(sketchLineGeom);\n      } else {\n        sketchLineGeom.setFlatCoordinates(ring.getLayout(), ring.getFlatCoordinates());\n        sketchLineGeom.changed();\n      }\n    } else if (this.sketchLineCoords_) {\n      sketchLineGeom = this.sketchLine_.getGeometry();\n      sketchLineGeom.setCoordinates(this.sketchLineCoords_);\n    }\n\n    this.updateSketchFeatures_();\n  };\n  /**\n   * Add a new coordinate to the drawing.\n   * @param {!PointCoordType} coordinate Coordinate\n   * @private\n   */\n\n\n  Draw.prototype.addToDrawing_ = function (coordinate) {\n    var geometry = this.sketchFeature_.getGeometry();\n    var projection = this.getMap().getView().getProjection();\n    var done;\n    var coordinates;\n\n    if (this.mode_ === Mode.LINE_STRING) {\n      this.finishCoordinate_ = coordinate.slice();\n      coordinates =\n      /** @type {LineCoordType} */\n      this.sketchCoords_;\n\n      if (coordinates.length >= this.maxPoints_) {\n        if (this.freehand_) {\n          coordinates.pop();\n        } else {\n          done = true;\n        }\n      }\n\n      coordinates.push(coordinate.slice());\n      this.geometryFunction_(coordinates, geometry, projection);\n    } else if (this.mode_ === Mode.POLYGON) {\n      coordinates =\n      /** @type {PolyCoordType} */\n      this.sketchCoords_[0];\n\n      if (coordinates.length >= this.maxPoints_) {\n        if (this.freehand_) {\n          coordinates.pop();\n        } else {\n          done = true;\n        }\n      }\n\n      coordinates.push(coordinate.slice());\n\n      if (done) {\n        this.finishCoordinate_ = coordinates[0];\n      }\n\n      this.geometryFunction_(this.sketchCoords_, geometry, projection);\n    }\n\n    this.updateSketchFeatures_();\n\n    if (done) {\n      this.finishDrawing();\n    }\n  };\n  /**\n   * Remove last point of the feature currently being drawn.\n   * @api\n   */\n\n\n  Draw.prototype.removeLastPoint = function () {\n    if (!this.sketchFeature_) {\n      return;\n    }\n\n    var geometry = this.sketchFeature_.getGeometry();\n    var projection = this.getMap().getView().getProjection();\n    var coordinates;\n    /** @type {LineString} */\n\n    var sketchLineGeom;\n\n    if (this.mode_ === Mode.LINE_STRING) {\n      coordinates =\n      /** @type {LineCoordType} */\n      this.sketchCoords_;\n      coordinates.splice(-2, 1);\n      this.geometryFunction_(coordinates, geometry, projection);\n\n      if (coordinates.length >= 2) {\n        this.finishCoordinate_ = coordinates[coordinates.length - 2].slice();\n      }\n    } else if (this.mode_ === Mode.POLYGON) {\n      coordinates =\n      /** @type {PolyCoordType} */\n      this.sketchCoords_[0];\n      coordinates.splice(-2, 1);\n      sketchLineGeom = this.sketchLine_.getGeometry();\n      sketchLineGeom.setCoordinates(coordinates);\n      this.geometryFunction_(this.sketchCoords_, geometry, projection);\n    }\n\n    if (coordinates.length === 0) {\n      this.finishCoordinate_ = null;\n    }\n\n    this.updateSketchFeatures_();\n  };\n  /**\n   * Stop drawing and add the sketch feature to the target layer.\n   * The {@link module:ol/interaction/Draw~DrawEventType.DRAWEND} event is\n   * dispatched before inserting the feature.\n   * @api\n   */\n\n\n  Draw.prototype.finishDrawing = function () {\n    var sketchFeature = this.abortDrawing_();\n\n    if (!sketchFeature) {\n      return;\n    }\n\n    var coordinates = this.sketchCoords_;\n    var geometry = sketchFeature.getGeometry();\n    var projection = this.getMap().getView().getProjection();\n\n    if (this.mode_ === Mode.LINE_STRING) {\n      // remove the redundant last point\n      coordinates.pop();\n      this.geometryFunction_(coordinates, geometry, projection);\n    } else if (this.mode_ === Mode.POLYGON) {\n      // remove the redundant last point in ring\n\n      /** @type {PolyCoordType} */\n      coordinates[0].pop();\n      this.geometryFunction_(coordinates, geometry, projection);\n      coordinates = geometry.getCoordinates();\n    } // cast multi-part geometries\n\n\n    if (this.type_ === GeometryType.MULTI_POINT) {\n      sketchFeature.setGeometry(new MultiPoint([\n      /** @type {PointCoordType} */\n      coordinates]));\n    } else if (this.type_ === GeometryType.MULTI_LINE_STRING) {\n      sketchFeature.setGeometry(new MultiLineString([\n      /** @type {LineCoordType} */\n      coordinates]));\n    } else if (this.type_ === GeometryType.MULTI_POLYGON) {\n      sketchFeature.setGeometry(new MultiPolygon([\n      /** @type {PolyCoordType} */\n      coordinates]));\n    } // First dispatch event to allow full set up of feature\n\n\n    this.dispatchEvent(new DrawEvent(DrawEventType.DRAWEND, sketchFeature)); // Then insert feature\n\n    if (this.features_) {\n      this.features_.push(sketchFeature);\n    }\n\n    if (this.source_) {\n      this.source_.addFeature(sketchFeature);\n    }\n  };\n  /**\n   * Stop drawing without adding the sketch feature to the target layer.\n   * @return {Feature} The sketch feature (or null if none).\n   * @private\n   */\n\n\n  Draw.prototype.abortDrawing_ = function () {\n    this.finishCoordinate_ = null;\n    var sketchFeature = this.sketchFeature_;\n    this.sketchFeature_ = null;\n    this.sketchPoint_ = null;\n    this.sketchLine_ = null;\n    this.overlay_.getSource().clear(true);\n    return sketchFeature;\n  };\n  /**\n   * Append coordinates to the end of the geometry that is currently being drawn.\n   * This can be used when drawing LineStrings or Polygons. Coordinates will\n   * either be appended to the current LineString or the outer ring of the current\n   * Polygon.\n   * @param {!LineCoordType} coordinates Linear coordinates to be appended into\n   * the coordinate array.\n   * @api\n   */\n\n\n  Draw.prototype.appendCoordinates = function (coordinates) {\n    var mode = this.mode_;\n    var sketchCoords = [];\n\n    if (mode === Mode.LINE_STRING) {\n      sketchCoords =\n      /** @type {LineCoordType} */\n      this.sketchCoords_;\n    } else if (mode === Mode.POLYGON) {\n      sketchCoords = this.sketchCoords_ && this.sketchCoords_.length ?\n      /** @type {PolyCoordType} */\n      this.sketchCoords_[0] : [];\n    } // Remove last coordinate from sketch drawing (this coordinate follows cursor position)\n\n\n    var ending = sketchCoords.pop(); // Append coordinate list\n\n    for (var i = 0; i < coordinates.length; i++) {\n      this.addToDrawing_(coordinates[i]);\n    } // Duplicate last coordinate for sketch drawing\n\n\n    this.addToDrawing_(ending);\n  };\n  /**\n   * Initiate draw mode by starting from an existing geometry which will\n   * receive new additional points. This only works on features with\n   * `LineString` geometries, where the interaction will extend lines by adding\n   * points to the end of the coordinates array.\n   * This will change the original feature, instead of drawing a copy.\n   *\n   * The function will dispatch a `drawstart` event.\n   *\n   * @param {!Feature<LineString>} feature Feature to be extended.\n   * @api\n   */\n\n\n  Draw.prototype.extend = function (feature) {\n    var geometry = feature.getGeometry();\n    var lineString = geometry;\n    this.sketchFeature_ = feature;\n    this.sketchCoords_ = lineString.getCoordinates();\n    var last = this.sketchCoords_[this.sketchCoords_.length - 1];\n    this.finishCoordinate_ = last.slice();\n    this.sketchCoords_.push(last.slice());\n    this.updateSketchFeatures_();\n    this.dispatchEvent(new DrawEvent(DrawEventType.DRAWSTART, this.sketchFeature_));\n  };\n  /**\n   * Redraw the sketch features.\n   * @private\n   */\n\n\n  Draw.prototype.updateSketchFeatures_ = function () {\n    var sketchFeatures = [];\n\n    if (this.sketchFeature_) {\n      sketchFeatures.push(this.sketchFeature_);\n    }\n\n    if (this.sketchLine_) {\n      sketchFeatures.push(this.sketchLine_);\n    }\n\n    if (this.sketchPoint_) {\n      sketchFeatures.push(this.sketchPoint_);\n    }\n\n    var overlaySource = this.overlay_.getSource();\n    overlaySource.clear(true);\n    overlaySource.addFeatures(sketchFeatures);\n  };\n  /**\n   * @private\n   */\n\n\n  Draw.prototype.updateState_ = function () {\n    var map = this.getMap();\n    var active = this.getActive();\n\n    if (!map || !active) {\n      this.abortDrawing_();\n    }\n\n    this.overlay_.setMap(active ? map : null);\n  };\n\n  return Draw;\n}(PointerInteraction);\n/**\n * @return {import(\"../style/Style.js\").StyleFunction} Styles.\n */\n\n\nfunction getDefaultStyleFunction() {\n  var styles = createEditingStyle();\n  return function (feature, resolution) {\n    return styles[feature.getGeometry().getType()];\n  };\n}\n/**\n * Create a `geometryFunction` for `type: 'Circle'` that will create a regular\n * polygon with a user specified number of sides and start angle instead of an\n * `import(\"../geom/Circle.js\").Circle` geometry.\n * @param {number=} opt_sides Number of sides of the regular polygon. Default is\n *     32.\n * @param {number=} opt_angle Angle of the first point in radians. 0 means East.\n *     Default is the angle defined by the heading from the center of the\n *     regular polygon to the current pointer position.\n * @return {GeometryFunction} Function that draws a\n *     polygon.\n * @api\n */\n\n\nexport function createRegularPolygon(opt_sides, opt_angle) {\n  return function (coordinates, opt_geometry, projection) {\n    var center = fromUserCoordinate(\n    /** @type {LineCoordType} */\n    coordinates[0], projection);\n    var end = fromUserCoordinate(\n    /** @type {LineCoordType} */\n    coordinates[1], projection);\n    var radius = Math.sqrt(squaredCoordinateDistance(center, end));\n    var geometry = opt_geometry ?\n    /** @type {Polygon} */\n    opt_geometry : fromCircle(new Circle(center), opt_sides);\n    var angle = opt_angle;\n\n    if (!opt_angle) {\n      var x = end[0] - center[0];\n      var y = end[1] - center[1];\n      angle = Math.atan(y / x) - (x < 0 ? Math.PI : 0);\n    }\n\n    makeRegular(geometry, center, radius, angle);\n    var userProjection = getUserProjection();\n\n    if (userProjection) {\n      geometry.transform(projection, userProjection);\n    }\n\n    return geometry;\n  };\n}\n/**\n * Create a `geometryFunction` that will create a box-shaped polygon (aligned\n * with the coordinate system axes).  Use this with the draw interaction and\n * `type: 'Circle'` to return a box instead of a circle geometry.\n * @return {GeometryFunction} Function that draws a box-shaped polygon.\n * @api\n */\n\nexport function createBox() {\n  return function (coordinates, opt_geometry, projection) {\n    var extent = boundingExtent(\n    /** @type {LineCoordType} */\n    coordinates.map(function (coordinate) {\n      return fromUserCoordinate(coordinate, projection);\n    }));\n    var boxCoordinates = [[getBottomLeft(extent), getBottomRight(extent), getTopRight(extent), getTopLeft(extent), getBottomLeft(extent)]];\n    var geometry = opt_geometry;\n\n    if (geometry) {\n      geometry.setCoordinates(boxCoordinates);\n    } else {\n      geometry = new Polygon(boxCoordinates);\n    }\n\n    var userProjection = getUserProjection();\n\n    if (userProjection) {\n      geometry.transform(projection, userProjection);\n    }\n\n    return geometry;\n  };\n}\n/**\n * Get the drawing mode.  The mode for mult-part geometries is the same as for\n * their single-part cousins.\n * @param {GeometryType} type Geometry type.\n * @return {Mode} Drawing mode.\n */\n\nfunction getMode(type) {\n  var mode;\n\n  if (type === GeometryType.POINT || type === GeometryType.MULTI_POINT) {\n    mode = Mode.POINT;\n  } else if (type === GeometryType.LINE_STRING || type === GeometryType.MULTI_LINE_STRING) {\n    mode = Mode.LINE_STRING;\n  } else if (type === GeometryType.POLYGON || type === GeometryType.MULTI_POLYGON) {\n    mode = Mode.POLYGON;\n  } else if (type === GeometryType.CIRCLE) {\n    mode = Mode.CIRCLE;\n  }\n\n  return (\n    /** @type {!Mode} */\n    mode\n  );\n}\n\nexport default Draw;","map":{"version":3,"sources":["../src/interaction/Draw.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/interaction/Draw\n */\nimport EventType from '../events/EventType.js';\nimport Feature from '../Feature.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport MapBrowserPointerEvent from '../MapBrowserPointerEvent.js';\nimport { getChangeEventType } from '../Object.js';\nimport { squaredDistance as squaredCoordinateDistance } from '../coordinate.js';\nimport Event from '../events/Event.js';\nimport { noModifierKeys, always, shiftKeyOnly } from '../events/condition.js';\nimport { boundingExtent, getBottomLeft, getBottomRight, getTopLeft, getTopRight } from '../extent.js';\nimport { TRUE, FALSE } from '../functions.js';\nimport Circle from '../geom/Circle.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport LineString from '../geom/LineString.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Point from '../geom/Point.js';\nimport Polygon, { fromCircle, makeRegular } from '../geom/Polygon.js';\nimport PointerInteraction from './Pointer.js';\nimport InteractionProperty from './Property.js';\nimport VectorLayer from '../layer/Vector.js';\nimport VectorSource from '../source/Vector.js';\nimport { createEditingStyle } from '../style/Style.js';\nimport { fromUserCoordinate, getUserProjection } from '../proj.js';\n/**\n * @typedef {Object} Options\n * @property {GeometryType} type Geometry type of\n * the geometries being drawn with this instance.\n * @property {number} [clickTolerance=6] The maximum distance in pixels between\n * \"down\" and \"up\" for a \"up\" event to be considered a \"click\" event and\n * actually add a point/vertex to the geometry being drawn.  The default of `6`\n * was chosen for the draw interaction to behave correctly on mouse as well as\n * on touch devices.\n * @property {import(\"../Collection.js\").default<Feature>} [features]\n * Destination collection for the drawn features.\n * @property {VectorSource} [source] Destination source for\n * the drawn features.\n * @property {number} [dragVertexDelay=500] Delay in milliseconds after pointerdown\n * before the current vertex can be dragged to its exact position.\n * @property {number} [snapTolerance=12] Pixel distance for snapping to the\n * drawing finish.\n * @property {boolean} [stopClick=false] Stop click, singleclick, and\n * doubleclick events from firing during drawing.\n * @property {number} [maxPoints] The number of points that can be drawn before\n * a polygon ring or line string is finished. By default there is no\n * restriction.\n * @property {number} [minPoints] The number of points that must be drawn\n * before a polygon ring or line string can be finished. Default is `3` for\n * polygon rings and `2` for line strings.\n * @property {import(\"../events/condition.js\").Condition} [finishCondition] A function\n * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether the drawing can be finished.\n * @property {import(\"../style/Style.js\").StyleLike} [style]\n * Style for sketch features.\n * @property {GeometryFunction} [geometryFunction]\n * Function that is called when a geometry's coordinates are updated.\n * @property {string} [geometryName] Geometry name to use for features created\n * by the draw interaction.\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled.\n * By default {@link module:ol/events/condition~noModifierKeys}, i.e. a click,\n * adds a vertex or deactivates freehand drawing.\n * @property {boolean} [freehand=false] Operate in freehand mode for lines,\n * polygons, and circles.  This makes the interaction always operate in freehand\n * mode and takes precedence over any `freehandCondition` option.\n * @property {import(\"../events/condition.js\").Condition} [freehandCondition]\n * Condition that activates freehand drawing for lines and polygons. This\n * function takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and\n * returns a boolean to indicate whether that event should be handled. The\n * default is {@link module:ol/events/condition~shiftKeyOnly}, meaning that the\n * Shift key activates freehand drawing.\n * @property {boolean} [wrapX=false] Wrap the world horizontally on the sketch\n * overlay.\n */\n/**\n * Coordinate type when drawing points.\n * @typedef {import(\"../coordinate.js\").Coordinate} PointCoordType\n */\n/**\n * Coordinate type when drawing lines.\n * @typedef {Array<import(\"../coordinate.js\").Coordinate>} LineCoordType\n */\n/**\n * Coordinate type when drawing polygons.\n * @typedef {Array<Array<import(\"../coordinate.js\").Coordinate>>} PolyCoordType\n */\n/**\n * Types used for drawing coordinates.\n * @typedef {PointCoordType|LineCoordType|PolyCoordType} SketchCoordType\n */\n/**\n * Function that takes an array of coordinates and an optional existing geometry\n * and a projection as arguments, and returns a geometry. The optional existing\n * geometry is the geometry that is returned when the function is called without\n * a second argument.\n * @typedef {function(!SketchCoordType, import(\"../geom/SimpleGeometry.js\").default=,\n *     import(\"../proj/Projection.js\").default):\n *     import(\"../geom/SimpleGeometry.js\").default} GeometryFunction\n */\n/**\n * Draw mode.  This collapses multi-part geometry types with their single-part\n * cousins.\n * @enum {string}\n */\nvar Mode = {\n    POINT: 'Point',\n    LINE_STRING: 'LineString',\n    POLYGON: 'Polygon',\n    CIRCLE: 'Circle'\n};\n/**\n * @enum {string}\n */\nvar DrawEventType = {\n    /**\n     * Triggered upon feature draw start\n     * @event DrawEvent#drawstart\n     * @api\n     */\n    DRAWSTART: 'drawstart',\n    /**\n     * Triggered upon feature draw end\n     * @event DrawEvent#drawend\n     * @api\n     */\n    DRAWEND: 'drawend'\n};\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/Draw~Draw} instances are\n * instances of this type.\n */\nvar DrawEvent = /** @class */ (function (_super) {\n    __extends(DrawEvent, _super);\n    /**\n     * @param {DrawEventType} type Type.\n     * @param {Feature} feature The feature drawn.\n     */\n    function DrawEvent(type, feature) {\n        var _this = _super.call(this, type) || this;\n        /**\n         * The feature being drawn.\n         * @type {Feature}\n         * @api\n         */\n        _this.feature = feature;\n        return _this;\n    }\n    return DrawEvent;\n}(Event));\n/**\n * @classdesc\n * Interaction for drawing feature geometries.\n *\n * @fires DrawEvent\n * @api\n */\nvar Draw = /** @class */ (function (_super) {\n    __extends(Draw, _super);\n    /**\n     * @param {Options} options Options.\n     */\n    function Draw(options) {\n        var _this = this;\n        var pointerOptions = /** @type {import(\"./Pointer.js\").Options} */ (options);\n        if (!pointerOptions.stopDown) {\n            pointerOptions.stopDown = FALSE;\n        }\n        _this = _super.call(this, pointerOptions) || this;\n        /**\n         * @type {boolean}\n         * @private\n         */\n        _this.shouldHandle_ = false;\n        /**\n         * @type {import(\"../pixel.js\").Pixel}\n         * @private\n         */\n        _this.downPx_ = null;\n        /**\n         * @type {?}\n         * @private\n         */\n        _this.downTimeout_;\n        /**\n         * @type {number|undefined}\n         * @private\n         */\n        _this.lastDragTime_;\n        /**\n         * @type {boolean}\n         * @private\n         */\n        _this.freehand_ = false;\n        /**\n         * Target source for drawn features.\n         * @type {VectorSource}\n         * @private\n         */\n        _this.source_ = options.source ? options.source : null;\n        /**\n         * Target collection for drawn features.\n         * @type {import(\"../Collection.js\").default<Feature>}\n         * @private\n         */\n        _this.features_ = options.features ? options.features : null;\n        /**\n         * Pixel distance for snapping.\n         * @type {number}\n         * @private\n         */\n        _this.snapTolerance_ = options.snapTolerance ? options.snapTolerance : 12;\n        /**\n         * Geometry type.\n         * @type {GeometryType}\n         * @private\n         */\n        _this.type_ = /** @type {GeometryType} */ (options.type);\n        /**\n         * Drawing mode (derived from geometry type.\n         * @type {Mode}\n         * @private\n         */\n        _this.mode_ = getMode(_this.type_);\n        /**\n         * Stop click, singleclick, and doubleclick events from firing during drawing.\n         * Default is `false`.\n         * @type {boolean}\n         * @private\n         */\n        _this.stopClick_ = !!options.stopClick;\n        /**\n         * The number of points that must be drawn before a polygon ring or line\n         * string can be finished.  The default is 3 for polygon rings and 2 for\n         * line strings.\n         * @type {number}\n         * @private\n         */\n        _this.minPoints_ = options.minPoints ?\n            options.minPoints :\n            (_this.mode_ === Mode.POLYGON ? 3 : 2);\n        /**\n         * The number of points that can be drawn before a polygon ring or line string\n         * is finished. The default is no restriction.\n         * @type {number}\n         * @private\n         */\n        _this.maxPoints_ = options.maxPoints ? options.maxPoints : Infinity;\n        /**\n         * A function to decide if a potential finish coordinate is permissible\n         * @private\n         * @type {import(\"../events/condition.js\").Condition}\n         */\n        _this.finishCondition_ = options.finishCondition ? options.finishCondition : TRUE;\n        var geometryFunction = options.geometryFunction;\n        if (!geometryFunction) {\n            if (_this.type_ === GeometryType.CIRCLE) {\n                /**\n                 * @param {!LineCoordType} coordinates The coordinates.\n                 * @param {import(\"../geom/SimpleGeometry.js\").default=} opt_geometry Optional geometry.\n                 * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n                 * @return {import(\"../geom/SimpleGeometry.js\").default} A geometry.\n                 */\n                geometryFunction = function (coordinates, opt_geometry, projection) {\n                    var circle = opt_geometry ? /** @type {Circle} */ (opt_geometry) :\n                        new Circle([NaN, NaN]);\n                    var center = fromUserCoordinate(coordinates[0], projection);\n                    var squaredLength = squaredCoordinateDistance(center, fromUserCoordinate(coordinates[1], projection));\n                    circle.setCenterAndRadius(center, Math.sqrt(squaredLength));\n                    var userProjection = getUserProjection();\n                    if (userProjection) {\n                        circle.transform(projection, userProjection);\n                    }\n                    return circle;\n                };\n            }\n            else {\n                var Constructor_1;\n                var mode_1 = _this.mode_;\n                if (mode_1 === Mode.POINT) {\n                    Constructor_1 = Point;\n                }\n                else if (mode_1 === Mode.LINE_STRING) {\n                    Constructor_1 = LineString;\n                }\n                else if (mode_1 === Mode.POLYGON) {\n                    Constructor_1 = Polygon;\n                }\n                /**\n                 * @param {!LineCoordType} coordinates The coordinates.\n                 * @param {import(\"../geom/SimpleGeometry.js\").default=} opt_geometry Optional geometry.\n                 * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n                 * @return {import(\"../geom/SimpleGeometry.js\").default} A geometry.\n                 */\n                geometryFunction = function (coordinates, opt_geometry, projection) {\n                    var geometry = opt_geometry;\n                    if (geometry) {\n                        if (mode_1 === Mode.POLYGON) {\n                            if (coordinates[0].length) {\n                                // Add a closing coordinate to match the first\n                                geometry.setCoordinates([coordinates[0].concat([coordinates[0][0]])]);\n                            }\n                            else {\n                                geometry.setCoordinates([]);\n                            }\n                        }\n                        else {\n                            geometry.setCoordinates(coordinates);\n                        }\n                    }\n                    else {\n                        geometry = new Constructor_1(coordinates);\n                    }\n                    return geometry;\n                };\n            }\n        }\n        /**\n         * @type {GeometryFunction}\n         * @private\n         */\n        _this.geometryFunction_ = geometryFunction;\n        /**\n         * @type {number}\n         * @private\n         */\n        _this.dragVertexDelay_ = options.dragVertexDelay !== undefined ? options.dragVertexDelay : 500;\n        /**\n         * Finish coordinate for the feature (first point for polygons, last point for\n         * linestrings).\n         * @type {import(\"../coordinate.js\").Coordinate}\n         * @private\n         */\n        _this.finishCoordinate_ = null;\n        /**\n         * Sketch feature.\n         * @type {Feature}\n         * @private\n         */\n        _this.sketchFeature_ = null;\n        /**\n         * Sketch point.\n         * @type {Feature<Point>}\n         * @private\n         */\n        _this.sketchPoint_ = null;\n        /**\n         * Sketch coordinates. Used when drawing a line or polygon.\n         * @type {SketchCoordType}\n         * @private\n         */\n        _this.sketchCoords_ = null;\n        /**\n         * Sketch line. Used when drawing polygon.\n         * @type {Feature<LineString>}\n         * @private\n         */\n        _this.sketchLine_ = null;\n        /**\n         * Sketch line coordinates. Used when drawing a polygon or circle.\n         * @type {LineCoordType}\n         * @private\n         */\n        _this.sketchLineCoords_ = null;\n        /**\n         * Squared tolerance for handling up events.  If the squared distance\n         * between a down and up event is greater than this tolerance, up events\n         * will not be handled.\n         * @type {number}\n         * @private\n         */\n        _this.squaredClickTolerance_ = options.clickTolerance ?\n            options.clickTolerance * options.clickTolerance : 36;\n        /**\n         * Draw overlay where our sketch features are drawn.\n         * @type {VectorLayer}\n         * @private\n         */\n        _this.overlay_ = new VectorLayer({\n            source: new VectorSource({\n                useSpatialIndex: false,\n                wrapX: options.wrapX ? options.wrapX : false\n            }),\n            style: options.style ? options.style : getDefaultStyleFunction(),\n            updateWhileInteracting: true\n        });\n        /**\n         * Name of the geometry attribute for newly created features.\n         * @type {string|undefined}\n         * @private\n         */\n        _this.geometryName_ = options.geometryName;\n        /**\n         * @private\n         * @type {import(\"../events/condition.js\").Condition}\n         */\n        _this.condition_ = options.condition ? options.condition : noModifierKeys;\n        /**\n         * @private\n         * @type {import(\"../events/condition.js\").Condition}\n         */\n        _this.freehandCondition_;\n        if (options.freehand) {\n            _this.freehandCondition_ = always;\n        }\n        else {\n            _this.freehandCondition_ = options.freehandCondition ? options.freehandCondition : shiftKeyOnly;\n        }\n        _this.addEventListener(getChangeEventType(InteractionProperty.ACTIVE), _this.updateState_);\n        return _this;\n    }\n    /**\n     * @inheritDoc\n     */\n    Draw.prototype.setMap = function (map) {\n        _super.prototype.setMap.call(this, map);\n        this.updateState_();\n    };\n    /**\n     * Get the overlay layer that this interaction renders sketch features to.\n     * @return {VectorLayer} Overlay layer.\n     * @api\n     */\n    Draw.prototype.getOverlay = function () {\n        return this.overlay_;\n    };\n    /**\n     * Handles the {@link module:ol/MapBrowserEvent map browser event} and may actually draw or finish the drawing.\n     * @override\n     * @api\n     */\n    Draw.prototype.handleEvent = function (event) {\n        if (event.originalEvent.type === EventType.CONTEXTMENU) {\n            // Avoid context menu for long taps when drawing on mobile\n            event.preventDefault();\n        }\n        this.freehand_ = this.mode_ !== Mode.POINT && this.freehandCondition_(event);\n        var move = event.type === MapBrowserEventType.POINTERMOVE;\n        var pass = true;\n        if (!this.freehand_ && this.lastDragTime_ && event.type === MapBrowserEventType.POINTERDRAG) {\n            var now = Date.now();\n            if (now - this.lastDragTime_ >= this.dragVertexDelay_) {\n                this.downPx_ = event.pixel;\n                this.shouldHandle_ = !this.freehand_;\n                move = true;\n            }\n            else {\n                this.lastDragTime_ = undefined;\n            }\n            if (this.shouldHandle_ && this.downTimeout_ !== undefined) {\n                clearTimeout(this.downTimeout_);\n                this.downTimeout_ = undefined;\n            }\n        }\n        if (this.freehand_ &&\n            event.type === MapBrowserEventType.POINTERDRAG &&\n            this.sketchFeature_ !== null) {\n            this.addToDrawing_(event.coordinate);\n            pass = false;\n        }\n        else if (this.freehand_ &&\n            event.type === MapBrowserEventType.POINTERDOWN) {\n            pass = false;\n        }\n        else if (move) {\n            pass = event.type === MapBrowserEventType.POINTERMOVE;\n            if (pass && this.freehand_) {\n                pass = this.handlePointerMove_(event);\n            }\n            else if ( /** @type {MapBrowserPointerEvent} */(event).pointerEvent.pointerType == 'mouse' ||\n                (event.type === MapBrowserEventType.POINTERDRAG && this.downTimeout_ === undefined)) {\n                this.handlePointerMove_(event);\n            }\n        }\n        else if (event.type === MapBrowserEventType.DBLCLICK) {\n            pass = false;\n        }\n        return _super.prototype.handleEvent.call(this, event) && pass;\n    };\n    /**\n     * @inheritDoc\n     */\n    Draw.prototype.handleDownEvent = function (event) {\n        this.shouldHandle_ = !this.freehand_;\n        if (this.freehand_) {\n            this.downPx_ = event.pixel;\n            if (!this.finishCoordinate_) {\n                this.startDrawing_(event);\n            }\n            return true;\n        }\n        else if (this.condition_(event)) {\n            this.lastDragTime_ = Date.now();\n            this.downTimeout_ = setTimeout(function () {\n                this.handlePointerMove_(new MapBrowserPointerEvent(MapBrowserEventType.POINTERMOVE, event.map, event.pointerEvent, false, event.frameState));\n            }.bind(this), this.dragVertexDelay_);\n            this.downPx_ = event.pixel;\n            return true;\n        }\n        else {\n            this.lastDragTime_ = undefined;\n            return false;\n        }\n    };\n    /**\n     * @inheritDoc\n     */\n    Draw.prototype.handleUpEvent = function (event) {\n        var pass = true;\n        if (this.downTimeout_) {\n            clearTimeout(this.downTimeout_);\n            this.downTimeout_ = undefined;\n        }\n        this.handlePointerMove_(event);\n        var circleMode = this.mode_ === Mode.CIRCLE;\n        if (this.shouldHandle_) {\n            if (!this.finishCoordinate_) {\n                this.startDrawing_(event);\n                if (this.mode_ === Mode.POINT) {\n                    this.finishDrawing();\n                }\n            }\n            else if (this.freehand_ || circleMode) {\n                this.finishDrawing();\n            }\n            else if (this.atFinish_(event)) {\n                if (this.finishCondition_(event)) {\n                    this.finishDrawing();\n                }\n            }\n            else {\n                this.addToDrawing_(event.coordinate);\n            }\n            pass = false;\n        }\n        else if (this.freehand_) {\n            this.finishCoordinate_ = null;\n            this.abortDrawing_();\n        }\n        if (!pass && this.stopClick_) {\n            event.stopPropagation();\n        }\n        return pass;\n    };\n    /**\n     * Handle move events.\n     * @param {import(\"../MapBrowserEvent.js\").default} event A move event.\n     * @return {boolean} Pass the event to other interactions.\n     * @private\n     */\n    Draw.prototype.handlePointerMove_ = function (event) {\n        if (this.downPx_ &&\n            ((!this.freehand_ && this.shouldHandle_) ||\n                (this.freehand_ && !this.shouldHandle_))) {\n            var downPx = this.downPx_;\n            var clickPx = event.pixel;\n            var dx = downPx[0] - clickPx[0];\n            var dy = downPx[1] - clickPx[1];\n            var squaredDistance = dx * dx + dy * dy;\n            this.shouldHandle_ = this.freehand_ ?\n                squaredDistance > this.squaredClickTolerance_ :\n                squaredDistance <= this.squaredClickTolerance_;\n            if (!this.shouldHandle_) {\n                return true;\n            }\n        }\n        if (this.finishCoordinate_) {\n            this.modifyDrawing_(event);\n        }\n        else {\n            this.createOrUpdateSketchPoint_(event);\n        }\n        return true;\n    };\n    /**\n     * Determine if an event is within the snapping tolerance of the start coord.\n     * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n     * @return {boolean} The event is within the snapping tolerance of the start.\n     * @private\n     */\n    Draw.prototype.atFinish_ = function (event) {\n        var at = false;\n        if (this.sketchFeature_) {\n            var potentiallyDone = false;\n            var potentiallyFinishCoordinates = [this.finishCoordinate_];\n            if (this.mode_ === Mode.LINE_STRING) {\n                potentiallyDone = this.sketchCoords_.length > this.minPoints_;\n            }\n            else if (this.mode_ === Mode.POLYGON) {\n                var sketchCoords = /** @type {PolyCoordType} */ (this.sketchCoords_);\n                potentiallyDone = sketchCoords[0].length > this.minPoints_;\n                potentiallyFinishCoordinates = [sketchCoords[0][0], sketchCoords[0][sketchCoords[0].length - 2]];\n            }\n            if (potentiallyDone) {\n                var map = event.map;\n                for (var i = 0, ii = potentiallyFinishCoordinates.length; i < ii; i++) {\n                    var finishCoordinate = potentiallyFinishCoordinates[i];\n                    var finishPixel = map.getPixelFromCoordinate(finishCoordinate);\n                    var pixel = event.pixel;\n                    var dx = pixel[0] - finishPixel[0];\n                    var dy = pixel[1] - finishPixel[1];\n                    var snapTolerance = this.freehand_ ? 1 : this.snapTolerance_;\n                    at = Math.sqrt(dx * dx + dy * dy) <= snapTolerance;\n                    if (at) {\n                        this.finishCoordinate_ = finishCoordinate;\n                        break;\n                    }\n                }\n            }\n        }\n        return at;\n    };\n    /**\n     * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n     * @private\n     */\n    Draw.prototype.createOrUpdateSketchPoint_ = function (event) {\n        var coordinates = event.coordinate.slice();\n        if (!this.sketchPoint_) {\n            this.sketchPoint_ = new Feature(new Point(coordinates));\n            this.updateSketchFeatures_();\n        }\n        else {\n            var sketchPointGeom = this.sketchPoint_.getGeometry();\n            sketchPointGeom.setCoordinates(coordinates);\n        }\n    };\n    /**\n     * Start the drawing.\n     * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n     * @private\n     */\n    Draw.prototype.startDrawing_ = function (event) {\n        var start = event.coordinate;\n        var projection = event.map.getView().getProjection();\n        this.finishCoordinate_ = start;\n        if (this.mode_ === Mode.POINT) {\n            this.sketchCoords_ = start.slice();\n        }\n        else if (this.mode_ === Mode.POLYGON) {\n            this.sketchCoords_ = [[start.slice(), start.slice()]];\n            this.sketchLineCoords_ = this.sketchCoords_[0];\n        }\n        else {\n            this.sketchCoords_ = [start.slice(), start.slice()];\n        }\n        if (this.sketchLineCoords_) {\n            this.sketchLine_ = new Feature(new LineString(this.sketchLineCoords_));\n        }\n        var geometry = this.geometryFunction_(this.sketchCoords_, undefined, projection);\n        this.sketchFeature_ = new Feature();\n        if (this.geometryName_) {\n            this.sketchFeature_.setGeometryName(this.geometryName_);\n        }\n        this.sketchFeature_.setGeometry(geometry);\n        this.updateSketchFeatures_();\n        this.dispatchEvent(new DrawEvent(DrawEventType.DRAWSTART, this.sketchFeature_));\n    };\n    /**\n     * Modify the drawing.\n     * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n     * @private\n     */\n    Draw.prototype.modifyDrawing_ = function (event) {\n        var coordinate = event.coordinate;\n        var geometry = this.sketchFeature_.getGeometry();\n        var projection = event.map.getView().getProjection();\n        var coordinates, last;\n        if (this.mode_ === Mode.POINT) {\n            last = this.sketchCoords_;\n        }\n        else if (this.mode_ === Mode.POLYGON) {\n            coordinates = /** @type {PolyCoordType} */ (this.sketchCoords_)[0];\n            last = coordinates[coordinates.length - 1];\n            if (this.atFinish_(event)) {\n                // snap to finish\n                coordinate = this.finishCoordinate_.slice();\n            }\n        }\n        else {\n            coordinates = this.sketchCoords_;\n            last = coordinates[coordinates.length - 1];\n        }\n        last[0] = coordinate[0];\n        last[1] = coordinate[1];\n        this.geometryFunction_(/** @type {!LineCoordType} */ (this.sketchCoords_), geometry, projection);\n        if (this.sketchPoint_) {\n            var sketchPointGeom = this.sketchPoint_.getGeometry();\n            sketchPointGeom.setCoordinates(coordinate);\n        }\n        /** @type {LineString} */\n        var sketchLineGeom;\n        if (geometry.getType() == GeometryType.POLYGON &&\n            this.mode_ !== Mode.POLYGON) {\n            if (!this.sketchLine_) {\n                this.sketchLine_ = new Feature();\n            }\n            var ring = geometry.getLinearRing(0);\n            sketchLineGeom = this.sketchLine_.getGeometry();\n            if (!sketchLineGeom) {\n                sketchLineGeom = new LineString(ring.getFlatCoordinates(), ring.getLayout());\n                this.sketchLine_.setGeometry(sketchLineGeom);\n            }\n            else {\n                sketchLineGeom.setFlatCoordinates(ring.getLayout(), ring.getFlatCoordinates());\n                sketchLineGeom.changed();\n            }\n        }\n        else if (this.sketchLineCoords_) {\n            sketchLineGeom = this.sketchLine_.getGeometry();\n            sketchLineGeom.setCoordinates(this.sketchLineCoords_);\n        }\n        this.updateSketchFeatures_();\n    };\n    /**\n     * Add a new coordinate to the drawing.\n     * @param {!PointCoordType} coordinate Coordinate\n     * @private\n     */\n    Draw.prototype.addToDrawing_ = function (coordinate) {\n        var geometry = this.sketchFeature_.getGeometry();\n        var projection = this.getMap().getView().getProjection();\n        var done;\n        var coordinates;\n        if (this.mode_ === Mode.LINE_STRING) {\n            this.finishCoordinate_ = coordinate.slice();\n            coordinates = /** @type {LineCoordType} */ (this.sketchCoords_);\n            if (coordinates.length >= this.maxPoints_) {\n                if (this.freehand_) {\n                    coordinates.pop();\n                }\n                else {\n                    done = true;\n                }\n            }\n            coordinates.push(coordinate.slice());\n            this.geometryFunction_(coordinates, geometry, projection);\n        }\n        else if (this.mode_ === Mode.POLYGON) {\n            coordinates = /** @type {PolyCoordType} */ (this.sketchCoords_)[0];\n            if (coordinates.length >= this.maxPoints_) {\n                if (this.freehand_) {\n                    coordinates.pop();\n                }\n                else {\n                    done = true;\n                }\n            }\n            coordinates.push(coordinate.slice());\n            if (done) {\n                this.finishCoordinate_ = coordinates[0];\n            }\n            this.geometryFunction_(this.sketchCoords_, geometry, projection);\n        }\n        this.updateSketchFeatures_();\n        if (done) {\n            this.finishDrawing();\n        }\n    };\n    /**\n     * Remove last point of the feature currently being drawn.\n     * @api\n     */\n    Draw.prototype.removeLastPoint = function () {\n        if (!this.sketchFeature_) {\n            return;\n        }\n        var geometry = this.sketchFeature_.getGeometry();\n        var projection = this.getMap().getView().getProjection();\n        var coordinates;\n        /** @type {LineString} */\n        var sketchLineGeom;\n        if (this.mode_ === Mode.LINE_STRING) {\n            coordinates = /** @type {LineCoordType} */ (this.sketchCoords_);\n            coordinates.splice(-2, 1);\n            this.geometryFunction_(coordinates, geometry, projection);\n            if (coordinates.length >= 2) {\n                this.finishCoordinate_ = coordinates[coordinates.length - 2].slice();\n            }\n        }\n        else if (this.mode_ === Mode.POLYGON) {\n            coordinates = /** @type {PolyCoordType} */ (this.sketchCoords_)[0];\n            coordinates.splice(-2, 1);\n            sketchLineGeom = this.sketchLine_.getGeometry();\n            sketchLineGeom.setCoordinates(coordinates);\n            this.geometryFunction_(this.sketchCoords_, geometry, projection);\n        }\n        if (coordinates.length === 0) {\n            this.finishCoordinate_ = null;\n        }\n        this.updateSketchFeatures_();\n    };\n    /**\n     * Stop drawing and add the sketch feature to the target layer.\n     * The {@link module:ol/interaction/Draw~DrawEventType.DRAWEND} event is\n     * dispatched before inserting the feature.\n     * @api\n     */\n    Draw.prototype.finishDrawing = function () {\n        var sketchFeature = this.abortDrawing_();\n        if (!sketchFeature) {\n            return;\n        }\n        var coordinates = this.sketchCoords_;\n        var geometry = sketchFeature.getGeometry();\n        var projection = this.getMap().getView().getProjection();\n        if (this.mode_ === Mode.LINE_STRING) {\n            // remove the redundant last point\n            coordinates.pop();\n            this.geometryFunction_(coordinates, geometry, projection);\n        }\n        else if (this.mode_ === Mode.POLYGON) {\n            // remove the redundant last point in ring\n            /** @type {PolyCoordType} */ (coordinates)[0].pop();\n            this.geometryFunction_(coordinates, geometry, projection);\n            coordinates = geometry.getCoordinates();\n        }\n        // cast multi-part geometries\n        if (this.type_ === GeometryType.MULTI_POINT) {\n            sketchFeature.setGeometry(new MultiPoint([/** @type {PointCoordType} */ (coordinates)]));\n        }\n        else if (this.type_ === GeometryType.MULTI_LINE_STRING) {\n            sketchFeature.setGeometry(new MultiLineString([/** @type {LineCoordType} */ (coordinates)]));\n        }\n        else if (this.type_ === GeometryType.MULTI_POLYGON) {\n            sketchFeature.setGeometry(new MultiPolygon([/** @type {PolyCoordType} */ (coordinates)]));\n        }\n        // First dispatch event to allow full set up of feature\n        this.dispatchEvent(new DrawEvent(DrawEventType.DRAWEND, sketchFeature));\n        // Then insert feature\n        if (this.features_) {\n            this.features_.push(sketchFeature);\n        }\n        if (this.source_) {\n            this.source_.addFeature(sketchFeature);\n        }\n    };\n    /**\n     * Stop drawing without adding the sketch feature to the target layer.\n     * @return {Feature} The sketch feature (or null if none).\n     * @private\n     */\n    Draw.prototype.abortDrawing_ = function () {\n        this.finishCoordinate_ = null;\n        var sketchFeature = this.sketchFeature_;\n        this.sketchFeature_ = null;\n        this.sketchPoint_ = null;\n        this.sketchLine_ = null;\n        this.overlay_.getSource().clear(true);\n        return sketchFeature;\n    };\n    /**\n     * Append coordinates to the end of the geometry that is currently being drawn.\n     * This can be used when drawing LineStrings or Polygons. Coordinates will\n     * either be appended to the current LineString or the outer ring of the current\n     * Polygon.\n     * @param {!LineCoordType} coordinates Linear coordinates to be appended into\n     * the coordinate array.\n     * @api\n     */\n    Draw.prototype.appendCoordinates = function (coordinates) {\n        var mode = this.mode_;\n        var sketchCoords = [];\n        if (mode === Mode.LINE_STRING) {\n            sketchCoords = /** @type {LineCoordType} */ this.sketchCoords_;\n        }\n        else if (mode === Mode.POLYGON) {\n            sketchCoords = this.sketchCoords_ && this.sketchCoords_.length ? /** @type {PolyCoordType} */ (this.sketchCoords_)[0] : [];\n        }\n        // Remove last coordinate from sketch drawing (this coordinate follows cursor position)\n        var ending = sketchCoords.pop();\n        // Append coordinate list\n        for (var i = 0; i < coordinates.length; i++) {\n            this.addToDrawing_(coordinates[i]);\n        }\n        // Duplicate last coordinate for sketch drawing\n        this.addToDrawing_(ending);\n    };\n    /**\n     * Initiate draw mode by starting from an existing geometry which will\n     * receive new additional points. This only works on features with\n     * `LineString` geometries, where the interaction will extend lines by adding\n     * points to the end of the coordinates array.\n     * This will change the original feature, instead of drawing a copy.\n     *\n     * The function will dispatch a `drawstart` event.\n     *\n     * @param {!Feature<LineString>} feature Feature to be extended.\n     * @api\n     */\n    Draw.prototype.extend = function (feature) {\n        var geometry = feature.getGeometry();\n        var lineString = geometry;\n        this.sketchFeature_ = feature;\n        this.sketchCoords_ = lineString.getCoordinates();\n        var last = this.sketchCoords_[this.sketchCoords_.length - 1];\n        this.finishCoordinate_ = last.slice();\n        this.sketchCoords_.push(last.slice());\n        this.updateSketchFeatures_();\n        this.dispatchEvent(new DrawEvent(DrawEventType.DRAWSTART, this.sketchFeature_));\n    };\n    /**\n     * Redraw the sketch features.\n     * @private\n     */\n    Draw.prototype.updateSketchFeatures_ = function () {\n        var sketchFeatures = [];\n        if (this.sketchFeature_) {\n            sketchFeatures.push(this.sketchFeature_);\n        }\n        if (this.sketchLine_) {\n            sketchFeatures.push(this.sketchLine_);\n        }\n        if (this.sketchPoint_) {\n            sketchFeatures.push(this.sketchPoint_);\n        }\n        var overlaySource = this.overlay_.getSource();\n        overlaySource.clear(true);\n        overlaySource.addFeatures(sketchFeatures);\n    };\n    /**\n     * @private\n     */\n    Draw.prototype.updateState_ = function () {\n        var map = this.getMap();\n        var active = this.getActive();\n        if (!map || !active) {\n            this.abortDrawing_();\n        }\n        this.overlay_.setMap(active ? map : null);\n    };\n    return Draw;\n}(PointerInteraction));\n/**\n * @return {import(\"../style/Style.js\").StyleFunction} Styles.\n */\nfunction getDefaultStyleFunction() {\n    var styles = createEditingStyle();\n    return function (feature, resolution) {\n        return styles[feature.getGeometry().getType()];\n    };\n}\n/**\n * Create a `geometryFunction` for `type: 'Circle'` that will create a regular\n * polygon with a user specified number of sides and start angle instead of an\n * `import(\"../geom/Circle.js\").Circle` geometry.\n * @param {number=} opt_sides Number of sides of the regular polygon. Default is\n *     32.\n * @param {number=} opt_angle Angle of the first point in radians. 0 means East.\n *     Default is the angle defined by the heading from the center of the\n *     regular polygon to the current pointer position.\n * @return {GeometryFunction} Function that draws a\n *     polygon.\n * @api\n */\nexport function createRegularPolygon(opt_sides, opt_angle) {\n    return function (coordinates, opt_geometry, projection) {\n        var center = fromUserCoordinate(/** @type {LineCoordType} */ (coordinates)[0], projection);\n        var end = fromUserCoordinate(/** @type {LineCoordType} */ (coordinates)[1], projection);\n        var radius = Math.sqrt(squaredCoordinateDistance(center, end));\n        var geometry = opt_geometry ? /** @type {Polygon} */ (opt_geometry) :\n            fromCircle(new Circle(center), opt_sides);\n        var angle = opt_angle;\n        if (!opt_angle) {\n            var x = end[0] - center[0];\n            var y = end[1] - center[1];\n            angle = Math.atan(y / x) - (x < 0 ? Math.PI : 0);\n        }\n        makeRegular(geometry, center, radius, angle);\n        var userProjection = getUserProjection();\n        if (userProjection) {\n            geometry.transform(projection, userProjection);\n        }\n        return geometry;\n    };\n}\n/**\n * Create a `geometryFunction` that will create a box-shaped polygon (aligned\n * with the coordinate system axes).  Use this with the draw interaction and\n * `type: 'Circle'` to return a box instead of a circle geometry.\n * @return {GeometryFunction} Function that draws a box-shaped polygon.\n * @api\n */\nexport function createBox() {\n    return (function (coordinates, opt_geometry, projection) {\n        var extent = boundingExtent(/** @type {LineCoordType} */ (coordinates).map(function (coordinate) {\n            return fromUserCoordinate(coordinate, projection);\n        }));\n        var boxCoordinates = [[\n                getBottomLeft(extent),\n                getBottomRight(extent),\n                getTopRight(extent),\n                getTopLeft(extent),\n                getBottomLeft(extent)\n            ]];\n        var geometry = opt_geometry;\n        if (geometry) {\n            geometry.setCoordinates(boxCoordinates);\n        }\n        else {\n            geometry = new Polygon(boxCoordinates);\n        }\n        var userProjection = getUserProjection();\n        if (userProjection) {\n            geometry.transform(projection, userProjection);\n        }\n        return geometry;\n    });\n}\n/**\n * Get the drawing mode.  The mode for mult-part geometries is the same as for\n * their single-part cousins.\n * @param {GeometryType} type Geometry type.\n * @return {Mode} Drawing mode.\n */\nfunction getMode(type) {\n    var mode;\n    if (type === GeometryType.POINT ||\n        type === GeometryType.MULTI_POINT) {\n        mode = Mode.POINT;\n    }\n    else if (type === GeometryType.LINE_STRING ||\n        type === GeometryType.MULTI_LINE_STRING) {\n        mode = Mode.LINE_STRING;\n    }\n    else if (type === GeometryType.POLYGON ||\n        type === GeometryType.MULTI_POLYGON) {\n        mode = Mode.POLYGON;\n    }\n    else if (type === GeometryType.CIRCLE) {\n        mode = Mode.CIRCLE;\n    }\n    return (\n    /** @type {!Mode} */ (mode));\n}\nexport default Draw;\n//# sourceMappingURL=Draw.js.map"]},"metadata":{},"sourceType":"module"}