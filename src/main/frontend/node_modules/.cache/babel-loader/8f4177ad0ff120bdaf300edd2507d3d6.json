{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/geom/Polygon\n */\n\n\nimport { extend } from '../array.js';\nimport { closestSquaredDistanceXY, getCenter } from '../extent.js';\nimport GeometryLayout from './GeometryLayout.js';\nimport GeometryType from './GeometryType.js';\nimport LinearRing from './LinearRing.js';\nimport Point from './Point.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport { offset as sphereOffset } from '../sphere.js';\nimport { linearRings as linearRingsArea } from './flat/area.js';\nimport { assignClosestArrayPoint, arrayMaxSquaredDelta } from './flat/closest.js';\nimport { linearRingsContainsXY } from './flat/contains.js';\nimport { deflateCoordinatesArray } from './flat/deflate.js';\nimport { inflateCoordinatesArray } from './flat/inflate.js';\nimport { getInteriorPointOfArray } from './flat/interiorpoint.js';\nimport { intersectsLinearRingArray } from './flat/intersectsextent.js';\nimport { linearRingsAreOriented, orientLinearRings } from './flat/orient.js';\nimport { quantizeArray } from './flat/simplify.js';\nimport { modulo } from '../math.js';\n/**\n * @classdesc\n * Polygon geometry.\n *\n * @api\n */\n\nvar Polygon =\n/** @class */\nfunction (_super) {\n  __extends(Polygon, _super);\n  /**\n   * @param {!Array<Array<import(\"../coordinate.js\").Coordinate>>|!Array<number>} coordinates\n   *     Array of linear rings that define the polygon. The first linear ring of the\n   *     array defines the outer-boundary or surface of the polygon. Each subsequent\n   *     linear ring defines a hole in the surface of the polygon. A linear ring is\n   *     an array of vertices' coordinates where the first coordinate and the last are\n   *     equivalent. (For internal use, flat coordinates in combination with\n   *     `opt_layout` and `opt_ends` are also accepted.)\n   * @param {GeometryLayout=} opt_layout Layout.\n   * @param {Array<number>=} opt_ends Ends (for internal use with flat coordinates).\n   */\n\n\n  function Polygon(coordinates, opt_layout, opt_ends) {\n    var _this = _super.call(this) || this;\n    /**\n     * @type {Array<number>}\n     * @private\n     */\n\n\n    _this.ends_ = [];\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.flatInteriorPointRevision_ = -1;\n    /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate}\n     */\n\n    _this.flatInteriorPoint_ = null;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.maxDelta_ = -1;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.maxDeltaRevision_ = -1;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.orientedRevision_ = -1;\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n\n    _this.orientedFlatCoordinates_ = null;\n\n    if (opt_layout !== undefined && opt_ends) {\n      _this.setFlatCoordinates(opt_layout,\n      /** @type {Array<number>} */\n      coordinates);\n\n      _this.ends_ = opt_ends;\n    } else {\n      _this.setCoordinates(\n      /** @type {Array<Array<import(\"../coordinate.js\").Coordinate>>} */\n      coordinates, opt_layout);\n    }\n\n    return _this;\n  }\n  /**\n   * Append the passed linear ring to this polygon.\n   * @param {LinearRing} linearRing Linear ring.\n   * @api\n   */\n\n\n  Polygon.prototype.appendLinearRing = function (linearRing) {\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = linearRing.getFlatCoordinates().slice();\n    } else {\n      extend(this.flatCoordinates, linearRing.getFlatCoordinates());\n    }\n\n    this.ends_.push(this.flatCoordinates.length);\n    this.changed();\n  };\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!Polygon} Clone.\n   * @override\n   * @api\n   */\n\n\n  Polygon.prototype.clone = function () {\n    return new Polygon(this.flatCoordinates.slice(), this.layout, this.ends_.slice());\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Polygon.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n\n    if (this.maxDeltaRevision_ != this.getRevision()) {\n      this.maxDelta_ = Math.sqrt(arrayMaxSquaredDelta(this.flatCoordinates, 0, this.ends_, this.stride, 0));\n      this.maxDeltaRevision_ = this.getRevision();\n    }\n\n    return assignClosestArrayPoint(this.flatCoordinates, 0, this.ends_, this.stride, this.maxDelta_, true, x, y, closestPoint, minSquaredDistance);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Polygon.prototype.containsXY = function (x, y) {\n    return linearRingsContainsXY(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, x, y);\n  };\n  /**\n   * Return the area of the polygon on projected plane.\n   * @return {number} Area (on projected plane).\n   * @api\n   */\n\n\n  Polygon.prototype.getArea = function () {\n    return linearRingsArea(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride);\n  };\n  /**\n   * Get the coordinate array for this geometry.  This array has the structure\n   * of a GeoJSON coordinate array for polygons.\n   *\n   * @param {boolean=} opt_right Orient coordinates according to the right-hand\n   *     rule (counter-clockwise for exterior and clockwise for interior rings).\n   *     If `false`, coordinates will be oriented according to the left-hand rule\n   *     (clockwise for exterior and counter-clockwise for interior rings).\n   *     By default, coordinate orientation will depend on how the geometry was\n   *     constructed.\n   * @return {Array<Array<import(\"../coordinate.js\").Coordinate>>} Coordinates.\n   * @override\n   * @api\n   */\n\n\n  Polygon.prototype.getCoordinates = function (opt_right) {\n    var flatCoordinates;\n\n    if (opt_right !== undefined) {\n      flatCoordinates = this.getOrientedFlatCoordinates().slice();\n      orientLinearRings(flatCoordinates, 0, this.ends_, this.stride, opt_right);\n    } else {\n      flatCoordinates = this.flatCoordinates;\n    }\n\n    return inflateCoordinatesArray(flatCoordinates, 0, this.ends_, this.stride);\n  };\n  /**\n   * @return {Array<number>} Ends.\n   */\n\n\n  Polygon.prototype.getEnds = function () {\n    return this.ends_;\n  };\n  /**\n   * @return {Array<number>} Interior point.\n   */\n\n\n  Polygon.prototype.getFlatInteriorPoint = function () {\n    if (this.flatInteriorPointRevision_ != this.getRevision()) {\n      var flatCenter = getCenter(this.getExtent());\n      this.flatInteriorPoint_ = getInteriorPointOfArray(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, flatCenter, 0);\n      this.flatInteriorPointRevision_ = this.getRevision();\n    }\n\n    return this.flatInteriorPoint_;\n  };\n  /**\n   * Return an interior point of the polygon.\n   * @return {Point} Interior point as XYM coordinate, where M is the\n   * length of the horizontal intersection that the point belongs to.\n   * @api\n   */\n\n\n  Polygon.prototype.getInteriorPoint = function () {\n    return new Point(this.getFlatInteriorPoint(), GeometryLayout.XYM);\n  };\n  /**\n   * Return the number of rings of the polygon,  this includes the exterior\n   * ring and any interior rings.\n   *\n   * @return {number} Number of rings.\n   * @api\n   */\n\n\n  Polygon.prototype.getLinearRingCount = function () {\n    return this.ends_.length;\n  };\n  /**\n   * Return the Nth linear ring of the polygon geometry. Return `null` if the\n   * given index is out of range.\n   * The exterior linear ring is available at index `0` and the interior rings\n   * at index `1` and beyond.\n   *\n   * @param {number} index Index.\n   * @return {LinearRing} Linear ring.\n   * @api\n   */\n\n\n  Polygon.prototype.getLinearRing = function (index) {\n    if (index < 0 || this.ends_.length <= index) {\n      return null;\n    }\n\n    return new LinearRing(this.flatCoordinates.slice(index === 0 ? 0 : this.ends_[index - 1], this.ends_[index]), this.layout);\n  };\n  /**\n   * Return the linear rings of the polygon.\n   * @return {Array<LinearRing>} Linear rings.\n   * @api\n   */\n\n\n  Polygon.prototype.getLinearRings = function () {\n    var layout = this.layout;\n    var flatCoordinates = this.flatCoordinates;\n    var ends = this.ends_;\n    var linearRings = [];\n    var offset = 0;\n\n    for (var i = 0, ii = ends.length; i < ii; ++i) {\n      var end = ends[i];\n      var linearRing = new LinearRing(flatCoordinates.slice(offset, end), layout);\n      linearRings.push(linearRing);\n      offset = end;\n    }\n\n    return linearRings;\n  };\n  /**\n   * @return {Array<number>} Oriented flat coordinates.\n   */\n\n\n  Polygon.prototype.getOrientedFlatCoordinates = function () {\n    if (this.orientedRevision_ != this.getRevision()) {\n      var flatCoordinates = this.flatCoordinates;\n\n      if (linearRingsAreOriented(flatCoordinates, 0, this.ends_, this.stride)) {\n        this.orientedFlatCoordinates_ = flatCoordinates;\n      } else {\n        this.orientedFlatCoordinates_ = flatCoordinates.slice();\n        this.orientedFlatCoordinates_.length = orientLinearRings(this.orientedFlatCoordinates_, 0, this.ends_, this.stride);\n      }\n\n      this.orientedRevision_ = this.getRevision();\n    }\n\n    return this.orientedFlatCoordinates_;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Polygon.prototype.getSimplifiedGeometryInternal = function (squaredTolerance) {\n    var simplifiedFlatCoordinates = [];\n    var simplifiedEnds = [];\n    simplifiedFlatCoordinates.length = quantizeArray(this.flatCoordinates, 0, this.ends_, this.stride, Math.sqrt(squaredTolerance), simplifiedFlatCoordinates, 0, simplifiedEnds);\n    return new Polygon(simplifiedFlatCoordinates, GeometryLayout.XY, simplifiedEnds);\n  };\n  /**\n   * @inheritDoc\n   * @api\n   */\n\n\n  Polygon.prototype.getType = function () {\n    return GeometryType.POLYGON;\n  };\n  /**\n   * @inheritDoc\n   * @api\n   */\n\n\n  Polygon.prototype.intersectsExtent = function (extent) {\n    return intersectsLinearRingArray(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, extent);\n  };\n  /**\n   * Set the coordinates of the polygon.\n   * @param {!Array<Array<import(\"../coordinate.js\").Coordinate>>} coordinates Coordinates.\n   * @param {GeometryLayout=} opt_layout Layout.\n   * @override\n   * @api\n   */\n\n\n  Polygon.prototype.setCoordinates = function (coordinates, opt_layout) {\n    this.setLayout(opt_layout, coordinates, 2);\n\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n\n    var ends = deflateCoordinatesArray(this.flatCoordinates, 0, coordinates, this.stride, this.ends_);\n    this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];\n    this.changed();\n  };\n\n  return Polygon;\n}(SimpleGeometry);\n\nexport default Polygon;\n/**\n * Create an approximation of a circle on the surface of a sphere.\n * @param {import(\"../coordinate.js\").Coordinate} center Center (`[lon, lat]` in degrees).\n * @param {number} radius The great-circle distance from the center to\n *     the polygon vertices.\n * @param {number=} opt_n Optional number of vertices for the resulting\n *     polygon. Default is `32`.\n * @param {number=} opt_sphereRadius Optional radius for the sphere (defaults to\n *     the Earth's mean radius using the WGS84 ellipsoid).\n * @return {Polygon} The \"circular\" polygon.\n * @api\n */\n\nexport function circular(center, radius, opt_n, opt_sphereRadius) {\n  var n = opt_n ? opt_n : 32;\n  /** @type {Array<number>} */\n\n  var flatCoordinates = [];\n\n  for (var i = 0; i < n; ++i) {\n    extend(flatCoordinates, sphereOffset(center, radius, 2 * Math.PI * i / n, opt_sphereRadius));\n  }\n\n  flatCoordinates.push(flatCoordinates[0], flatCoordinates[1]);\n  return new Polygon(flatCoordinates, GeometryLayout.XY, [flatCoordinates.length]);\n}\n/**\n * Create a polygon from an extent. The layout used is `XY`.\n * @param {import(\"../extent.js\").Extent} extent The extent.\n * @return {Polygon} The polygon.\n * @api\n */\n\nexport function fromExtent(extent) {\n  var minX = extent[0];\n  var minY = extent[1];\n  var maxX = extent[2];\n  var maxY = extent[3];\n  var flatCoordinates = [minX, minY, minX, maxY, maxX, maxY, maxX, minY, minX, minY];\n  return new Polygon(flatCoordinates, GeometryLayout.XY, [flatCoordinates.length]);\n}\n/**\n * Create a regular polygon from a circle.\n * @param {import(\"./Circle.js\").default} circle Circle geometry.\n * @param {number=} opt_sides Number of sides of the polygon. Default is 32.\n * @param {number=} opt_angle Start angle for the first vertex of the polygon in\n *     radians. Default is 0.\n * @return {Polygon} Polygon geometry.\n * @api\n */\n\nexport function fromCircle(circle, opt_sides, opt_angle) {\n  var sides = opt_sides ? opt_sides : 32;\n  var stride = circle.getStride();\n  var layout = circle.getLayout();\n  var center = circle.getCenter();\n  var arrayLength = stride * (sides + 1);\n  var flatCoordinates = new Array(arrayLength);\n\n  for (var i = 0; i < arrayLength; i += stride) {\n    flatCoordinates[i] = 0;\n    flatCoordinates[i + 1] = 0;\n\n    for (var j = 2; j < stride; j++) {\n      flatCoordinates[i + j] = center[j];\n    }\n  }\n\n  var ends = [flatCoordinates.length];\n  var polygon = new Polygon(flatCoordinates, layout, ends);\n  makeRegular(polygon, center, circle.getRadius(), opt_angle);\n  return polygon;\n}\n/**\n * Modify the coordinates of a polygon to make it a regular polygon.\n * @param {Polygon} polygon Polygon geometry.\n * @param {import(\"../coordinate.js\").Coordinate} center Center of the regular polygon.\n * @param {number} radius Radius of the regular polygon.\n * @param {number=} opt_angle Start angle for the first vertex of the polygon in\n *     radians. Default is 0.\n */\n\nexport function makeRegular(polygon, center, radius, opt_angle) {\n  var flatCoordinates = polygon.getFlatCoordinates();\n  var stride = polygon.getStride();\n  var sides = flatCoordinates.length / stride - 1;\n  var startAngle = opt_angle ? opt_angle : 0;\n\n  for (var i = 0; i <= sides; ++i) {\n    var offset = i * stride;\n    var angle = startAngle + modulo(i, sides) * 2 * Math.PI / sides;\n    flatCoordinates[offset] = center[0] + radius * Math.cos(angle);\n    flatCoordinates[offset + 1] = center[1] + radius * Math.sin(angle);\n  }\n\n  polygon.changed();\n}","map":{"version":3,"sources":["../src/geom/Polygon.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/geom/Polygon\n */\nimport { extend } from '../array.js';\nimport { closestSquaredDistanceXY, getCenter } from '../extent.js';\nimport GeometryLayout from './GeometryLayout.js';\nimport GeometryType from './GeometryType.js';\nimport LinearRing from './LinearRing.js';\nimport Point from './Point.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport { offset as sphereOffset } from '../sphere.js';\nimport { linearRings as linearRingsArea } from './flat/area.js';\nimport { assignClosestArrayPoint, arrayMaxSquaredDelta } from './flat/closest.js';\nimport { linearRingsContainsXY } from './flat/contains.js';\nimport { deflateCoordinatesArray } from './flat/deflate.js';\nimport { inflateCoordinatesArray } from './flat/inflate.js';\nimport { getInteriorPointOfArray } from './flat/interiorpoint.js';\nimport { intersectsLinearRingArray } from './flat/intersectsextent.js';\nimport { linearRingsAreOriented, orientLinearRings } from './flat/orient.js';\nimport { quantizeArray } from './flat/simplify.js';\nimport { modulo } from '../math.js';\n/**\n * @classdesc\n * Polygon geometry.\n *\n * @api\n */\nvar Polygon = /** @class */ (function (_super) {\n    __extends(Polygon, _super);\n    /**\n     * @param {!Array<Array<import(\"../coordinate.js\").Coordinate>>|!Array<number>} coordinates\n     *     Array of linear rings that define the polygon. The first linear ring of the\n     *     array defines the outer-boundary or surface of the polygon. Each subsequent\n     *     linear ring defines a hole in the surface of the polygon. A linear ring is\n     *     an array of vertices' coordinates where the first coordinate and the last are\n     *     equivalent. (For internal use, flat coordinates in combination with\n     *     `opt_layout` and `opt_ends` are also accepted.)\n     * @param {GeometryLayout=} opt_layout Layout.\n     * @param {Array<number>=} opt_ends Ends (for internal use with flat coordinates).\n     */\n    function Polygon(coordinates, opt_layout, opt_ends) {\n        var _this = _super.call(this) || this;\n        /**\n         * @type {Array<number>}\n         * @private\n         */\n        _this.ends_ = [];\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.flatInteriorPointRevision_ = -1;\n        /**\n         * @private\n         * @type {import(\"../coordinate.js\").Coordinate}\n         */\n        _this.flatInteriorPoint_ = null;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.maxDelta_ = -1;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.maxDeltaRevision_ = -1;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.orientedRevision_ = -1;\n        /**\n         * @private\n         * @type {Array<number>}\n         */\n        _this.orientedFlatCoordinates_ = null;\n        if (opt_layout !== undefined && opt_ends) {\n            _this.setFlatCoordinates(opt_layout, /** @type {Array<number>} */ (coordinates));\n            _this.ends_ = opt_ends;\n        }\n        else {\n            _this.setCoordinates(/** @type {Array<Array<import(\"../coordinate.js\").Coordinate>>} */ (coordinates), opt_layout);\n        }\n        return _this;\n    }\n    /**\n     * Append the passed linear ring to this polygon.\n     * @param {LinearRing} linearRing Linear ring.\n     * @api\n     */\n    Polygon.prototype.appendLinearRing = function (linearRing) {\n        if (!this.flatCoordinates) {\n            this.flatCoordinates = linearRing.getFlatCoordinates().slice();\n        }\n        else {\n            extend(this.flatCoordinates, linearRing.getFlatCoordinates());\n        }\n        this.ends_.push(this.flatCoordinates.length);\n        this.changed();\n    };\n    /**\n     * Make a complete copy of the geometry.\n     * @return {!Polygon} Clone.\n     * @override\n     * @api\n     */\n    Polygon.prototype.clone = function () {\n        return new Polygon(this.flatCoordinates.slice(), this.layout, this.ends_.slice());\n    };\n    /**\n     * @inheritDoc\n     */\n    Polygon.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {\n        if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n            return minSquaredDistance;\n        }\n        if (this.maxDeltaRevision_ != this.getRevision()) {\n            this.maxDelta_ = Math.sqrt(arrayMaxSquaredDelta(this.flatCoordinates, 0, this.ends_, this.stride, 0));\n            this.maxDeltaRevision_ = this.getRevision();\n        }\n        return assignClosestArrayPoint(this.flatCoordinates, 0, this.ends_, this.stride, this.maxDelta_, true, x, y, closestPoint, minSquaredDistance);\n    };\n    /**\n     * @inheritDoc\n     */\n    Polygon.prototype.containsXY = function (x, y) {\n        return linearRingsContainsXY(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, x, y);\n    };\n    /**\n     * Return the area of the polygon on projected plane.\n     * @return {number} Area (on projected plane).\n     * @api\n     */\n    Polygon.prototype.getArea = function () {\n        return linearRingsArea(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride);\n    };\n    /**\n     * Get the coordinate array for this geometry.  This array has the structure\n     * of a GeoJSON coordinate array for polygons.\n     *\n     * @param {boolean=} opt_right Orient coordinates according to the right-hand\n     *     rule (counter-clockwise for exterior and clockwise for interior rings).\n     *     If `false`, coordinates will be oriented according to the left-hand rule\n     *     (clockwise for exterior and counter-clockwise for interior rings).\n     *     By default, coordinate orientation will depend on how the geometry was\n     *     constructed.\n     * @return {Array<Array<import(\"../coordinate.js\").Coordinate>>} Coordinates.\n     * @override\n     * @api\n     */\n    Polygon.prototype.getCoordinates = function (opt_right) {\n        var flatCoordinates;\n        if (opt_right !== undefined) {\n            flatCoordinates = this.getOrientedFlatCoordinates().slice();\n            orientLinearRings(flatCoordinates, 0, this.ends_, this.stride, opt_right);\n        }\n        else {\n            flatCoordinates = this.flatCoordinates;\n        }\n        return inflateCoordinatesArray(flatCoordinates, 0, this.ends_, this.stride);\n    };\n    /**\n     * @return {Array<number>} Ends.\n     */\n    Polygon.prototype.getEnds = function () {\n        return this.ends_;\n    };\n    /**\n     * @return {Array<number>} Interior point.\n     */\n    Polygon.prototype.getFlatInteriorPoint = function () {\n        if (this.flatInteriorPointRevision_ != this.getRevision()) {\n            var flatCenter = getCenter(this.getExtent());\n            this.flatInteriorPoint_ = getInteriorPointOfArray(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, flatCenter, 0);\n            this.flatInteriorPointRevision_ = this.getRevision();\n        }\n        return this.flatInteriorPoint_;\n    };\n    /**\n     * Return an interior point of the polygon.\n     * @return {Point} Interior point as XYM coordinate, where M is the\n     * length of the horizontal intersection that the point belongs to.\n     * @api\n     */\n    Polygon.prototype.getInteriorPoint = function () {\n        return new Point(this.getFlatInteriorPoint(), GeometryLayout.XYM);\n    };\n    /**\n     * Return the number of rings of the polygon,  this includes the exterior\n     * ring and any interior rings.\n     *\n     * @return {number} Number of rings.\n     * @api\n     */\n    Polygon.prototype.getLinearRingCount = function () {\n        return this.ends_.length;\n    };\n    /**\n     * Return the Nth linear ring of the polygon geometry. Return `null` if the\n     * given index is out of range.\n     * The exterior linear ring is available at index `0` and the interior rings\n     * at index `1` and beyond.\n     *\n     * @param {number} index Index.\n     * @return {LinearRing} Linear ring.\n     * @api\n     */\n    Polygon.prototype.getLinearRing = function (index) {\n        if (index < 0 || this.ends_.length <= index) {\n            return null;\n        }\n        return new LinearRing(this.flatCoordinates.slice(index === 0 ? 0 : this.ends_[index - 1], this.ends_[index]), this.layout);\n    };\n    /**\n     * Return the linear rings of the polygon.\n     * @return {Array<LinearRing>} Linear rings.\n     * @api\n     */\n    Polygon.prototype.getLinearRings = function () {\n        var layout = this.layout;\n        var flatCoordinates = this.flatCoordinates;\n        var ends = this.ends_;\n        var linearRings = [];\n        var offset = 0;\n        for (var i = 0, ii = ends.length; i < ii; ++i) {\n            var end = ends[i];\n            var linearRing = new LinearRing(flatCoordinates.slice(offset, end), layout);\n            linearRings.push(linearRing);\n            offset = end;\n        }\n        return linearRings;\n    };\n    /**\n     * @return {Array<number>} Oriented flat coordinates.\n     */\n    Polygon.prototype.getOrientedFlatCoordinates = function () {\n        if (this.orientedRevision_ != this.getRevision()) {\n            var flatCoordinates = this.flatCoordinates;\n            if (linearRingsAreOriented(flatCoordinates, 0, this.ends_, this.stride)) {\n                this.orientedFlatCoordinates_ = flatCoordinates;\n            }\n            else {\n                this.orientedFlatCoordinates_ = flatCoordinates.slice();\n                this.orientedFlatCoordinates_.length =\n                    orientLinearRings(this.orientedFlatCoordinates_, 0, this.ends_, this.stride);\n            }\n            this.orientedRevision_ = this.getRevision();\n        }\n        return this.orientedFlatCoordinates_;\n    };\n    /**\n     * @inheritDoc\n     */\n    Polygon.prototype.getSimplifiedGeometryInternal = function (squaredTolerance) {\n        var simplifiedFlatCoordinates = [];\n        var simplifiedEnds = [];\n        simplifiedFlatCoordinates.length = quantizeArray(this.flatCoordinates, 0, this.ends_, this.stride, Math.sqrt(squaredTolerance), simplifiedFlatCoordinates, 0, simplifiedEnds);\n        return new Polygon(simplifiedFlatCoordinates, GeometryLayout.XY, simplifiedEnds);\n    };\n    /**\n     * @inheritDoc\n     * @api\n     */\n    Polygon.prototype.getType = function () {\n        return GeometryType.POLYGON;\n    };\n    /**\n     * @inheritDoc\n     * @api\n     */\n    Polygon.prototype.intersectsExtent = function (extent) {\n        return intersectsLinearRingArray(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, extent);\n    };\n    /**\n     * Set the coordinates of the polygon.\n     * @param {!Array<Array<import(\"../coordinate.js\").Coordinate>>} coordinates Coordinates.\n     * @param {GeometryLayout=} opt_layout Layout.\n     * @override\n     * @api\n     */\n    Polygon.prototype.setCoordinates = function (coordinates, opt_layout) {\n        this.setLayout(opt_layout, coordinates, 2);\n        if (!this.flatCoordinates) {\n            this.flatCoordinates = [];\n        }\n        var ends = deflateCoordinatesArray(this.flatCoordinates, 0, coordinates, this.stride, this.ends_);\n        this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];\n        this.changed();\n    };\n    return Polygon;\n}(SimpleGeometry));\nexport default Polygon;\n/**\n * Create an approximation of a circle on the surface of a sphere.\n * @param {import(\"../coordinate.js\").Coordinate} center Center (`[lon, lat]` in degrees).\n * @param {number} radius The great-circle distance from the center to\n *     the polygon vertices.\n * @param {number=} opt_n Optional number of vertices for the resulting\n *     polygon. Default is `32`.\n * @param {number=} opt_sphereRadius Optional radius for the sphere (defaults to\n *     the Earth's mean radius using the WGS84 ellipsoid).\n * @return {Polygon} The \"circular\" polygon.\n * @api\n */\nexport function circular(center, radius, opt_n, opt_sphereRadius) {\n    var n = opt_n ? opt_n : 32;\n    /** @type {Array<number>} */\n    var flatCoordinates = [];\n    for (var i = 0; i < n; ++i) {\n        extend(flatCoordinates, sphereOffset(center, radius, 2 * Math.PI * i / n, opt_sphereRadius));\n    }\n    flatCoordinates.push(flatCoordinates[0], flatCoordinates[1]);\n    return new Polygon(flatCoordinates, GeometryLayout.XY, [flatCoordinates.length]);\n}\n/**\n * Create a polygon from an extent. The layout used is `XY`.\n * @param {import(\"../extent.js\").Extent} extent The extent.\n * @return {Polygon} The polygon.\n * @api\n */\nexport function fromExtent(extent) {\n    var minX = extent[0];\n    var minY = extent[1];\n    var maxX = extent[2];\n    var maxY = extent[3];\n    var flatCoordinates = [minX, minY, minX, maxY, maxX, maxY, maxX, minY, minX, minY];\n    return new Polygon(flatCoordinates, GeometryLayout.XY, [flatCoordinates.length]);\n}\n/**\n * Create a regular polygon from a circle.\n * @param {import(\"./Circle.js\").default} circle Circle geometry.\n * @param {number=} opt_sides Number of sides of the polygon. Default is 32.\n * @param {number=} opt_angle Start angle for the first vertex of the polygon in\n *     radians. Default is 0.\n * @return {Polygon} Polygon geometry.\n * @api\n */\nexport function fromCircle(circle, opt_sides, opt_angle) {\n    var sides = opt_sides ? opt_sides : 32;\n    var stride = circle.getStride();\n    var layout = circle.getLayout();\n    var center = circle.getCenter();\n    var arrayLength = stride * (sides + 1);\n    var flatCoordinates = new Array(arrayLength);\n    for (var i = 0; i < arrayLength; i += stride) {\n        flatCoordinates[i] = 0;\n        flatCoordinates[i + 1] = 0;\n        for (var j = 2; j < stride; j++) {\n            flatCoordinates[i + j] = center[j];\n        }\n    }\n    var ends = [flatCoordinates.length];\n    var polygon = new Polygon(flatCoordinates, layout, ends);\n    makeRegular(polygon, center, circle.getRadius(), opt_angle);\n    return polygon;\n}\n/**\n * Modify the coordinates of a polygon to make it a regular polygon.\n * @param {Polygon} polygon Polygon geometry.\n * @param {import(\"../coordinate.js\").Coordinate} center Center of the regular polygon.\n * @param {number} radius Radius of the regular polygon.\n * @param {number=} opt_angle Start angle for the first vertex of the polygon in\n *     radians. Default is 0.\n */\nexport function makeRegular(polygon, center, radius, opt_angle) {\n    var flatCoordinates = polygon.getFlatCoordinates();\n    var stride = polygon.getStride();\n    var sides = flatCoordinates.length / stride - 1;\n    var startAngle = opt_angle ? opt_angle : 0;\n    for (var i = 0; i <= sides; ++i) {\n        var offset = i * stride;\n        var angle = startAngle + (modulo(i, sides) * 2 * Math.PI / sides);\n        flatCoordinates[offset] = center[0] + (radius * Math.cos(angle));\n        flatCoordinates[offset + 1] = center[1] + (radius * Math.sin(angle));\n    }\n    polygon.changed();\n}\n//# sourceMappingURL=Polygon.js.map"]},"metadata":{},"sourceType":"module"}