{"ast":null,"code":"/**\n * @module ol/format/XML\n */\nimport { isDocument, parse } from '../xml.js';\n/**\n * @classdesc\n * Generic format for reading non-feature XML data\n *\n * @abstract\n */\n\nvar XML =\n/** @class */\nfunction () {\n  function XML() {}\n  /**\n   * Read the source document.\n   *\n   * @param {Document|Element|string} source The XML source.\n   * @return {Object} An object representing the source.\n   * @api\n   */\n\n\n  XML.prototype.read = function (source) {\n    if (!source) {\n      return null;\n    } else if (typeof source === 'string') {\n      var doc = parse(source);\n      return this.readFromDocument(doc);\n    } else if (isDocument(source)) {\n      return this.readFromDocument(\n      /** @type {Document} */\n      source);\n    } else {\n      return this.readFromNode(\n      /** @type {Element} */\n      source);\n    }\n  };\n  /**\n   * @abstract\n   * @param {Document} doc Document.\n   * @return {Object} Object\n   */\n\n\n  XML.prototype.readFromDocument = function (doc) {};\n  /**\n   * @abstract\n   * @param {Element} node Node.\n   * @return {Object} Object\n   */\n\n\n  XML.prototype.readFromNode = function (node) {};\n\n  return XML;\n}();\n\nexport default XML;","map":{"version":3,"sources":["../src/format/XML.js"],"names":[],"mappings":"AAAA;;;AAGA,SAAQ,UAAR,EAAoB,KAApB,QAAgC,WAAhC;AAEA;;;;;;;AAMA,IAAA,GAAA;AAAA;AAAA,YAAA;AAAA,WAAA,GAAA,GAAA,CAkCC;AAjCC;;;;;;;;;AAOA,EAAA,GAAA,CAAA,SAAA,CAAA,IAAA,GAAA,UAAK,MAAL,EAAW;AACT,QAAI,CAAC,MAAL,EAAa;AACX,aAAO,IAAP;AACD,KAFD,MAEO,IAAI,OAAO,MAAP,KAAkB,QAAtB,EAAgC;AACrC,UAAM,GAAG,GAAG,KAAK,CAAC,MAAD,CAAjB;AACA,aAAO,KAAK,gBAAL,CAAsB,GAAtB,CAAP;AACD,KAHM,MAGA,IAAI,UAAU,CAAC,MAAD,CAAd,EAAwB;AAC7B,aAAO,KAAK,gBAAL;AAAsB;AAAyB,MAAA,MAA/C,CAAP;AACD,KAFM,MAEA;AACL,aAAO,KAAK,YAAL;AAAkB;AAAwB,MAAA,MAA1C,CAAP;AACD;AACF,GAXD;AAaA;;;;;;;AAKA,EAAA,GAAA,CAAA,SAAA,CAAA,gBAAA,GAAA,UAAiB,GAAjB,EAAoB,CAAI,CAAxB;AAEA;;;;;;;AAKA,EAAA,GAAA,CAAA,SAAA,CAAA,YAAA,GAAA,UAAa,IAAb,EAAiB,CAAI,CAArB;;AACF,SAAA,GAAA;AAAC,CAlCD,EAAA;;AAoCA,eAAe,GAAf","sourceRoot":"","sourcesContent":["/**\n * @module ol/format/XML\n */\nimport { isDocument, parse } from '../xml.js';\n/**\n * @classdesc\n * Generic format for reading non-feature XML data\n *\n * @abstract\n */\nvar XML = /** @class */ (function () {\n    function XML() {\n    }\n    /**\n     * Read the source document.\n     *\n     * @param {Document|Element|string} source The XML source.\n     * @return {Object} An object representing the source.\n     * @api\n     */\n    XML.prototype.read = function (source) {\n        if (!source) {\n            return null;\n        }\n        else if (typeof source === 'string') {\n            var doc = parse(source);\n            return this.readFromDocument(doc);\n        }\n        else if (isDocument(source)) {\n            return this.readFromDocument(/** @type {Document} */ (source));\n        }\n        else {\n            return this.readFromNode(/** @type {Element} */ (source));\n        }\n    };\n    /**\n     * @abstract\n     * @param {Document} doc Document.\n     * @return {Object} Object\n     */\n    XML.prototype.readFromDocument = function (doc) { };\n    /**\n     * @abstract\n     * @param {Element} node Node.\n     * @return {Object} Object\n     */\n    XML.prototype.readFromNode = function (node) { };\n    return XML;\n}());\nexport default XML;\n//# sourceMappingURL=XML.js.map"]},"metadata":{},"sourceType":"module"}