{"ast":null,"code":"/**\n * @module ol/source/TileDebug\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport Tile from '../Tile.js';\nimport TileState from '../TileState.js';\nimport { createCanvasContext2D } from '../dom.js';\nimport { toSize } from '../size.js';\nimport XYZ from './XYZ.js';\nimport { getKeyZXY } from '../tilecoord.js';\n\nvar LabeledTile =\n/** @class */\nfunction (_super) {\n  __extends(LabeledTile, _super);\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../size.js\").Size} tileSize Tile size.\n   * @param {string} text Text.\n   */\n\n\n  function LabeledTile(tileCoord, tileSize, text) {\n    var _this = _super.call(this, tileCoord, TileState.LOADED) || this;\n    /**\n    * @private\n    * @type {import(\"../size.js\").Size}\n    */\n\n\n    _this.tileSize_ = tileSize;\n    /**\n    * @private\n    * @type {string}\n    */\n\n    _this.text_ = text;\n    /**\n    * @private\n    * @type {HTMLCanvasElement}\n    */\n\n    _this.canvas_ = null;\n    return _this;\n  }\n  /**\n  * Get the image element for this tile.\n  * @return {HTMLCanvasElement} Image.\n  */\n\n\n  LabeledTile.prototype.getImage = function () {\n    if (this.canvas_) {\n      return this.canvas_;\n    } else {\n      var tileSize = this.tileSize_;\n      var context = createCanvasContext2D(tileSize[0], tileSize[1]);\n      context.strokeStyle = 'grey';\n      context.strokeRect(0.5, 0.5, tileSize[0] + 0.5, tileSize[1] + 0.5);\n      context.fillStyle = 'grey';\n      context.strokeStyle = 'white';\n      context.textAlign = 'center';\n      context.textBaseline = 'middle';\n      context.font = '24px sans-serif';\n      context.lineWidth = 4;\n      context.strokeText(this.text_, tileSize[0] / 2, tileSize[1] / 2, tileSize[0]);\n      context.fillText(this.text_, tileSize[0] / 2, tileSize[1] / 2, tileSize[0]);\n      this.canvas_ = context.canvas;\n      return context.canvas;\n    }\n  };\n  /**\n  * @override\n  */\n\n\n  LabeledTile.prototype.load = function () {};\n\n  return LabeledTile;\n}(Tile);\n/**\n * @typedef {Object} Options\n * @property {import(\"../proj.js\").ProjectionLike} [projection='EPSG:3857'] Optional projection.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {number} [zDirection=0] Set to `1` when debugging `VectorTile` sources with\n * a default configuration. Indicates which resolution should be used by a renderer if\n * the view resolution does not match any resolution of the tile source. If 0, the nearest\n * resolution will be used. If 1, the nearest lower resolution will be used. If -1, the\n * nearest higher resolution will be used.\n */\n\n/**\n * @classdesc\n * A pseudo tile source, which does not fetch tiles from a server, but renders\n * a grid outline for the tile grid/projection along with the coordinates for\n * each tile. See examples/canvas-tiles for an example.\n *\n * Uses Canvas context2d, so requires Canvas support.\n * @api\n */\n\n\nvar TileDebug =\n/** @class */\nfunction (_super) {\n  __extends(TileDebug, _super);\n  /**\n   * @param {Options=} opt_options Debug tile options.\n   */\n\n\n  function TileDebug(opt_options) {\n    var _this = this;\n    /**\n     * @type {Options}\n     */\n\n\n    var options = opt_options || {};\n    _this = _super.call(this, {\n      opaque: false,\n      projection: options.projection,\n      tileGrid: options.tileGrid,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      zDirection: options.zDirection\n    }) || this;\n    return _this;\n  }\n  /**\n  * @inheritDoc\n  */\n\n\n  TileDebug.prototype.getTile = function (z, x, y) {\n    var tileCoordKey = getKeyZXY(z, x, y);\n\n    if (this.tileCache.containsKey(tileCoordKey)) {\n      return (\n        /** @type {!LabeledTile} */\n        this.tileCache.get(tileCoordKey)\n      );\n    } else {\n      var tileSize = toSize(this.tileGrid.getTileSize(z));\n      var tileCoord = [z, x, y];\n      var textTileCoord = this.getTileCoordForTileUrlFunction(tileCoord);\n      var text = void 0;\n\n      if (textTileCoord) {\n        text = 'z:' + textTileCoord[0] + ' x:' + textTileCoord[1] + ' y:' + textTileCoord[2];\n      } else {\n        text = 'none';\n      }\n\n      var tile = new LabeledTile(tileCoord, tileSize, text);\n      this.tileCache.set(tileCoordKey, tile);\n      return tile;\n    }\n  };\n\n  return TileDebug;\n}(XYZ);\n\nexport default TileDebug;","map":{"version":3,"sources":["../src/source/TileDebug.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @module ol/source/TileDebug\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport Tile from '../Tile.js';\nimport TileState from '../TileState.js';\nimport { createCanvasContext2D } from '../dom.js';\nimport { toSize } from '../size.js';\nimport XYZ from './XYZ.js';\nimport { getKeyZXY } from '../tilecoord.js';\nvar LabeledTile = /** @class */ (function (_super) {\n    __extends(LabeledTile, _super);\n    /**\n     * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n     * @param {import(\"../size.js\").Size} tileSize Tile size.\n     * @param {string} text Text.\n     */\n    function LabeledTile(tileCoord, tileSize, text) {\n        var _this = _super.call(this, tileCoord, TileState.LOADED) || this;\n        /**\n        * @private\n        * @type {import(\"../size.js\").Size}\n        */\n        _this.tileSize_ = tileSize;\n        /**\n        * @private\n        * @type {string}\n        */\n        _this.text_ = text;\n        /**\n        * @private\n        * @type {HTMLCanvasElement}\n        */\n        _this.canvas_ = null;\n        return _this;\n    }\n    /**\n    * Get the image element for this tile.\n    * @return {HTMLCanvasElement} Image.\n    */\n    LabeledTile.prototype.getImage = function () {\n        if (this.canvas_) {\n            return this.canvas_;\n        }\n        else {\n            var tileSize = this.tileSize_;\n            var context = createCanvasContext2D(tileSize[0], tileSize[1]);\n            context.strokeStyle = 'grey';\n            context.strokeRect(0.5, 0.5, tileSize[0] + 0.5, tileSize[1] + 0.5);\n            context.fillStyle = 'grey';\n            context.strokeStyle = 'white';\n            context.textAlign = 'center';\n            context.textBaseline = 'middle';\n            context.font = '24px sans-serif';\n            context.lineWidth = 4;\n            context.strokeText(this.text_, tileSize[0] / 2, tileSize[1] / 2, tileSize[0]);\n            context.fillText(this.text_, tileSize[0] / 2, tileSize[1] / 2, tileSize[0]);\n            this.canvas_ = context.canvas;\n            return context.canvas;\n        }\n    };\n    /**\n    * @override\n    */\n    LabeledTile.prototype.load = function () { };\n    return LabeledTile;\n}(Tile));\n/**\n * @typedef {Object} Options\n * @property {import(\"../proj.js\").ProjectionLike} [projection='EPSG:3857'] Optional projection.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {number} [zDirection=0] Set to `1` when debugging `VectorTile` sources with\n * a default configuration. Indicates which resolution should be used by a renderer if\n * the view resolution does not match any resolution of the tile source. If 0, the nearest\n * resolution will be used. If 1, the nearest lower resolution will be used. If -1, the\n * nearest higher resolution will be used.\n */\n/**\n * @classdesc\n * A pseudo tile source, which does not fetch tiles from a server, but renders\n * a grid outline for the tile grid/projection along with the coordinates for\n * each tile. See examples/canvas-tiles for an example.\n *\n * Uses Canvas context2d, so requires Canvas support.\n * @api\n */\nvar TileDebug = /** @class */ (function (_super) {\n    __extends(TileDebug, _super);\n    /**\n     * @param {Options=} opt_options Debug tile options.\n     */\n    function TileDebug(opt_options) {\n        var _this = this;\n        /**\n         * @type {Options}\n         */\n        var options = opt_options || {};\n        _this = _super.call(this, {\n            opaque: false,\n            projection: options.projection,\n            tileGrid: options.tileGrid,\n            wrapX: options.wrapX !== undefined ? options.wrapX : true,\n            zDirection: options.zDirection\n        }) || this;\n        return _this;\n    }\n    /**\n    * @inheritDoc\n    */\n    TileDebug.prototype.getTile = function (z, x, y) {\n        var tileCoordKey = getKeyZXY(z, x, y);\n        if (this.tileCache.containsKey(tileCoordKey)) {\n            return /** @type {!LabeledTile} */ (this.tileCache.get(tileCoordKey));\n        }\n        else {\n            var tileSize = toSize(this.tileGrid.getTileSize(z));\n            var tileCoord = [z, x, y];\n            var textTileCoord = this.getTileCoordForTileUrlFunction(tileCoord);\n            var text = void 0;\n            if (textTileCoord) {\n                text = 'z:' + textTileCoord[0] + ' x:' + textTileCoord[1] + ' y:' + textTileCoord[2];\n            }\n            else {\n                text = 'none';\n            }\n            var tile = new LabeledTile(tileCoord, tileSize, text);\n            this.tileCache.set(tileCoordKey, tile);\n            return tile;\n        }\n    };\n    return TileDebug;\n}(XYZ));\nexport default TileDebug;\n//# sourceMappingURL=TileDebug.js.map"]},"metadata":{},"sourceType":"module"}