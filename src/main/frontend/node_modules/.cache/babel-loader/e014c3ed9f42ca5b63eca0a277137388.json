{"ast":null,"code":"/**\n * @module ol/source/WMTS\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { expandUrl, createFromTileUrlFunctions, nullTileUrlFunction } from '../tileurlfunction.js';\nimport { find, findIndex, includes } from '../array.js';\nimport { containsExtent } from '../extent.js';\nimport { assign } from '../obj.js';\nimport { get as getProjection, equivalent, transformExtent } from '../proj.js';\nimport TileImage from './TileImage.js';\nimport WMTSRequestEncoding from './WMTSRequestEncoding.js';\nimport { createFromCapabilitiesMatrixSet } from '../tilegrid/WMTS.js';\nimport { appendParams } from '../uri.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize] Tile cache size. The default depends on the screen size. Will increase if too small.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {import(\"../tilegrid/WMTS.js\").default} tileGrid Tile grid.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"./WMTSRequestEncoding.js\").default|string} [requestEncoding='KVP'] Request encoding.\n * @property {string} layer Layer name as advertised in the WMTS capabilities.\n * @property {string} style Style name as advertised in the WMTS capabilities.\n * @property {typeof import(\"../ImageTile.js\").default} [tileClass]  Class used to instantiate image tiles. Default is {@link module:ol/ImageTile~ImageTile}.\n * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service.\n * For example, if the tile service advertizes 256px by 256px tiles but actually sends 512px\n * by 512px images (for retina/hidpi devices) then `tilePixelRatio`\n * should be set to `2`.\n * @property {string} [format='image/jpeg'] Image format. Only used when `requestEncoding` is `'KVP'`.\n * @property {string} [version='1.0.0'] WMTS version.\n * @property {string} matrixSet Matrix set.\n * @property {!Object} [dimensions] Additional \"dimensions\" for tile requests.\n * This is an object with properties named like the advertised WMTS dimensions.\n * @property {string} [url]  A URL for the service.\n * For the RESTful request encoding, this is a URL\n * template.  For KVP encoding, it is normal URL. A `{?-?}` template pattern,\n * for example `subdomain{a-f}.domain.com`, may be used instead of defining\n * each one separately in the `urls` option.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {Array<string>} [urls] An array of URLs.\n * Requests will be distributed among the URLs in this array.\n * @property {boolean} [wrapX=false] Whether to wrap the world horizontally.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n */\n\n/**\n * @classdesc\n * Layer source for tile data from WMTS servers.\n * @api\n */\n\nvar WMTS =\n/** @class */\nfunction (_super) {\n  __extends(WMTS, _super);\n  /**\n   * @param {Options} options WMTS options.\n   */\n\n\n  function WMTS(options) {\n    // TODO: add support for TileMatrixLimits\n    var _this = this;\n\n    var requestEncoding = options.requestEncoding !== undefined ?\n    /** @type {import(\"./WMTSRequestEncoding.js\").default} */\n    options.requestEncoding : WMTSRequestEncoding.KVP; // FIXME: should we create a default tileGrid?\n    // we could issue a getCapabilities xhr to retrieve missing configuration\n\n    var tileGrid = options.tileGrid;\n    var urls = options.urls;\n\n    if (urls === undefined && options.url !== undefined) {\n      urls = expandUrl(options.url);\n    }\n\n    _this = _super.call(this, {\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      projection: options.projection,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileClass: options.tileClass,\n      tileGrid: tileGrid,\n      tileLoadFunction: options.tileLoadFunction,\n      tilePixelRatio: options.tilePixelRatio,\n      tileUrlFunction: nullTileUrlFunction,\n      urls: urls,\n      wrapX: options.wrapX !== undefined ? options.wrapX : false,\n      transition: options.transition\n    }) || this;\n    /**\n     * @private\n     * @type {string}\n     */\n\n    _this.version_ = options.version !== undefined ? options.version : '1.0.0';\n    /**\n     * @private\n     * @type {string}\n     */\n\n    _this.format_ = options.format !== undefined ? options.format : 'image/jpeg';\n    /**\n     * @private\n     * @type {!Object}\n     */\n\n    _this.dimensions_ = options.dimensions !== undefined ? options.dimensions : {};\n    /**\n     * @private\n     * @type {string}\n     */\n\n    _this.layer_ = options.layer;\n    /**\n     * @private\n     * @type {string}\n     */\n\n    _this.matrixSet_ = options.matrixSet;\n    /**\n     * @private\n     * @type {string}\n     */\n\n    _this.style_ = options.style; // FIXME: should we guess this requestEncoding from options.url(s)\n    //        structure? that would mean KVP only if a template is not provided.\n\n    /**\n     * @private\n     * @type {import(\"./WMTSRequestEncoding.js\").default}\n     */\n\n    _this.requestEncoding_ = requestEncoding;\n\n    _this.setKey(_this.getKeyForDimensions_());\n\n    if (urls && urls.length > 0) {\n      _this.tileUrlFunction = createFromTileUrlFunctions(urls.map(createFromWMTSTemplate.bind(_this)));\n    }\n\n    return _this;\n  }\n  /**\n   * Set the URLs to use for requests.\n   * URLs may contain OGC conform URL Template Variables: {TileMatrix}, {TileRow}, {TileCol}.\n   * @override\n   */\n\n\n  WMTS.prototype.setUrls = function (urls) {\n    this.urls = urls;\n    var key = urls.join('\\n');\n    this.setTileUrlFunction(createFromTileUrlFunctions(urls.map(createFromWMTSTemplate.bind(this))), key);\n  };\n  /**\n   * Get the dimensions, i.e. those passed to the constructor through the\n   * \"dimensions\" option, and possibly updated using the updateDimensions\n   * method.\n   * @return {!Object} Dimensions.\n   * @api\n   */\n\n\n  WMTS.prototype.getDimensions = function () {\n    return this.dimensions_;\n  };\n  /**\n   * Return the image format of the WMTS source.\n   * @return {string} Format.\n   * @api\n   */\n\n\n  WMTS.prototype.getFormat = function () {\n    return this.format_;\n  };\n  /**\n   * Return the layer of the WMTS source.\n   * @return {string} Layer.\n   * @api\n   */\n\n\n  WMTS.prototype.getLayer = function () {\n    return this.layer_;\n  };\n  /**\n   * Return the matrix set of the WMTS source.\n   * @return {string} MatrixSet.\n   * @api\n   */\n\n\n  WMTS.prototype.getMatrixSet = function () {\n    return this.matrixSet_;\n  };\n  /**\n   * Return the request encoding, either \"KVP\" or \"REST\".\n   * @return {import(\"./WMTSRequestEncoding.js\").default} Request encoding.\n   * @api\n   */\n\n\n  WMTS.prototype.getRequestEncoding = function () {\n    return this.requestEncoding_;\n  };\n  /**\n   * Return the style of the WMTS source.\n   * @return {string} Style.\n   * @api\n   */\n\n\n  WMTS.prototype.getStyle = function () {\n    return this.style_;\n  };\n  /**\n   * Return the version of the WMTS source.\n   * @return {string} Version.\n   * @api\n   */\n\n\n  WMTS.prototype.getVersion = function () {\n    return this.version_;\n  };\n  /**\n   * @private\n   * @return {string} The key for the current dimensions.\n   */\n\n\n  WMTS.prototype.getKeyForDimensions_ = function () {\n    var i = 0;\n    var res = [];\n\n    for (var key in this.dimensions_) {\n      res[i++] = key + '-' + this.dimensions_[key];\n    }\n\n    return res.join('/');\n  };\n  /**\n   * Update the dimensions.\n   * @param {Object} dimensions Dimensions.\n   * @api\n   */\n\n\n  WMTS.prototype.updateDimensions = function (dimensions) {\n    assign(this.dimensions_, dimensions);\n    this.setKey(this.getKeyForDimensions_());\n  };\n\n  return WMTS;\n}(TileImage);\n\nexport default WMTS;\n/**\n * Generate source options from a capabilities object.\n * @param {Object} wmtsCap An object representing the capabilities document.\n * @param {!Object} config Configuration properties for the layer.  Defaults for\n *                  the layer will apply if not provided.\n *\n * Required config properties:\n *  - layer - {string} The layer identifier.\n *\n * Optional config properties:\n *  - matrixSet - {string} The matrix set identifier, required if there is\n *       more than one matrix set in the layer capabilities.\n *  - projection - {string} The desired CRS when no matrixSet is specified.\n *       eg: \"EPSG:3857\". If the desired projection is not available,\n *       an error is thrown.\n *  - requestEncoding - {string} url encoding format for the layer. Default is\n *       the first tile url format found in the GetCapabilities response.\n *  - style - {string} The name of the style\n *  - format - {string} Image format for the layer. Default is the first\n *       format returned in the GetCapabilities response.\n *  - crossOrigin - {string|null|undefined} Cross origin. Default is `undefined`.\n * @return {?Options} WMTS source options object or `null` if the layer was not found.\n * @api\n */\n\nexport function optionsFromCapabilities(wmtsCap, config) {\n  var layers = wmtsCap['Contents']['Layer'];\n  var l = find(layers, function (elt, index, array) {\n    return elt['Identifier'] == config['layer'];\n  });\n\n  if (l === null) {\n    return null;\n  }\n\n  var tileMatrixSets = wmtsCap['Contents']['TileMatrixSet'];\n  var idx;\n\n  if (l['TileMatrixSetLink'].length > 1) {\n    if ('projection' in config) {\n      idx = findIndex(l['TileMatrixSetLink'], function (elt, index, array) {\n        var tileMatrixSet = find(tileMatrixSets, function (el) {\n          return el['Identifier'] == elt['TileMatrixSet'];\n        });\n        var supportedCRS = tileMatrixSet['SupportedCRS'];\n        var proj1 = getProjection(supportedCRS.replace(/urn:ogc:def:crs:(\\w+):(.*:)?(\\w+)$/, '$1:$3')) || getProjection(supportedCRS);\n        var proj2 = getProjection(config['projection']);\n\n        if (proj1 && proj2) {\n          return equivalent(proj1, proj2);\n        } else {\n          return supportedCRS == config['projection'];\n        }\n      });\n    } else {\n      idx = findIndex(l['TileMatrixSetLink'], function (elt, index, array) {\n        return elt['TileMatrixSet'] == config['matrixSet'];\n      });\n    }\n  } else {\n    idx = 0;\n  }\n\n  if (idx < 0) {\n    idx = 0;\n  }\n\n  var matrixSet =\n  /** @type {string} */\n  l['TileMatrixSetLink'][idx]['TileMatrixSet'];\n  var matrixLimits =\n  /** @type {Array<Object>} */\n  l['TileMatrixSetLink'][idx]['TileMatrixSetLimits'];\n  var format =\n  /** @type {string} */\n  l['Format'][0];\n\n  if ('format' in config) {\n    format = config['format'];\n  }\n\n  idx = findIndex(l['Style'], function (elt, index, array) {\n    if ('style' in config) {\n      return elt['Title'] == config['style'];\n    } else {\n      return elt['isDefault'];\n    }\n  });\n\n  if (idx < 0) {\n    idx = 0;\n  }\n\n  var style =\n  /** @type {string} */\n  l['Style'][idx]['Identifier'];\n  var dimensions = {};\n\n  if ('Dimension' in l) {\n    l['Dimension'].forEach(function (elt, index, array) {\n      var key = elt['Identifier'];\n      var value = elt['Default'];\n\n      if (value === undefined) {\n        value = elt['Value'][0];\n      }\n\n      dimensions[key] = value;\n    });\n  }\n\n  var matrixSets = wmtsCap['Contents']['TileMatrixSet'];\n  var matrixSetObj = find(matrixSets, function (elt, index, array) {\n    return elt['Identifier'] == matrixSet;\n  });\n  var projection;\n  var code = matrixSetObj['SupportedCRS'];\n\n  if (code) {\n    projection = getProjection(code.replace(/urn:ogc:def:crs:(\\w+):(.*:)?(\\w+)$/, '$1:$3')) || getProjection(code);\n  }\n\n  if ('projection' in config) {\n    var projConfig = getProjection(config['projection']);\n\n    if (projConfig) {\n      if (!projection || equivalent(projConfig, projection)) {\n        projection = projConfig;\n      }\n    }\n  }\n\n  var wgs84BoundingBox = l['WGS84BoundingBox'];\n  var extent, wrapX;\n\n  if (wgs84BoundingBox !== undefined) {\n    var wgs84ProjectionExtent = getProjection('EPSG:4326').getExtent();\n    wrapX = wgs84BoundingBox[0] == wgs84ProjectionExtent[0] && wgs84BoundingBox[2] == wgs84ProjectionExtent[2];\n    extent = transformExtent(wgs84BoundingBox, 'EPSG:4326', projection);\n    var projectionExtent = projection.getExtent();\n\n    if (projectionExtent) {\n      // If possible, do a sanity check on the extent - it should never be\n      // bigger than the validity extent of the projection of a matrix set.\n      if (!containsExtent(projectionExtent, extent)) {\n        extent = undefined;\n      }\n    }\n  }\n\n  var tileGrid = createFromCapabilitiesMatrixSet(matrixSetObj, extent, matrixLimits);\n  /** @type {!Array<string>} */\n\n  var urls = [];\n  var requestEncoding = config['requestEncoding'];\n  requestEncoding = requestEncoding !== undefined ? requestEncoding : '';\n\n  if ('OperationsMetadata' in wmtsCap && 'GetTile' in wmtsCap['OperationsMetadata']) {\n    var gets = wmtsCap['OperationsMetadata']['GetTile']['DCP']['HTTP']['Get'];\n\n    for (var i = 0, ii = gets.length; i < ii; ++i) {\n      if (gets[i]['Constraint']) {\n        var constraint = find(gets[i]['Constraint'], function (element) {\n          return element['name'] == 'GetEncoding';\n        });\n        var encodings = constraint['AllowedValues']['Value'];\n\n        if (requestEncoding === '') {\n          // requestEncoding not provided, use the first encoding from the list\n          requestEncoding = encodings[0];\n        }\n\n        if (requestEncoding === WMTSRequestEncoding.KVP) {\n          if (includes(encodings, WMTSRequestEncoding.KVP)) {\n            urls.push(\n            /** @type {string} */\n            gets[i]['href']);\n          }\n        } else {\n          break;\n        }\n      } else if (gets[i]['href']) {\n        requestEncoding = WMTSRequestEncoding.KVP;\n        urls.push(\n        /** @type {string} */\n        gets[i]['href']);\n      }\n    }\n  }\n\n  if (urls.length === 0) {\n    requestEncoding = WMTSRequestEncoding.REST;\n    l['ResourceURL'].forEach(function (element) {\n      if (element['resourceType'] === 'tile') {\n        format = element['format'];\n        urls.push(\n        /** @type {string} */\n        element['template']);\n      }\n    });\n  }\n\n  return {\n    urls: urls,\n    layer: config['layer'],\n    matrixSet: matrixSet,\n    format: format,\n    projection: projection,\n    requestEncoding: requestEncoding,\n    tileGrid: tileGrid,\n    style: style,\n    dimensions: dimensions,\n    wrapX: wrapX,\n    crossOrigin: config['crossOrigin']\n  };\n}\n/**\n * @param {string} template Template.\n * @return {import(\"../Tile.js\").UrlFunction} Tile URL function.\n * @this {WMTS}\n */\n\nfunction createFromWMTSTemplate(template) {\n  var requestEncoding = this.requestEncoding_; // context property names are lower case to allow for a case insensitive\n  // replacement as some services use different naming conventions\n\n  var context = {\n    'layer': this.layer_,\n    'style': this.style_,\n    'tilematrixset': this.matrixSet_\n  };\n\n  if (requestEncoding == WMTSRequestEncoding.KVP) {\n    assign(context, {\n      'Service': 'WMTS',\n      'Request': 'GetTile',\n      'Version': this.version_,\n      'Format': this.format_\n    });\n  } // TODO: we may want to create our own appendParams function so that params\n  // order conforms to wmts spec guidance, and so that we can avoid to escape\n  // special template params\n\n\n  template = requestEncoding == WMTSRequestEncoding.KVP ? appendParams(template, context) : template.replace(/\\{(\\w+?)\\}/g, function (m, p) {\n    return p.toLowerCase() in context ? context[p.toLowerCase()] : m;\n  });\n  var tileGrid =\n  /** @type {import(\"../tilegrid/WMTS.js\").default} */\n  this.tileGrid;\n  var dimensions = this.dimensions_;\n  return (\n    /**\n     * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @return {string|undefined} Tile URL.\n     */\n    function (tileCoord, pixelRatio, projection) {\n      if (!tileCoord) {\n        return undefined;\n      } else {\n        var localContext_1 = {\n          'TileMatrix': tileGrid.getMatrixId(tileCoord[0]),\n          'TileCol': tileCoord[1],\n          'TileRow': tileCoord[2]\n        };\n        assign(localContext_1, dimensions);\n        var url = template;\n\n        if (requestEncoding == WMTSRequestEncoding.KVP) {\n          url = appendParams(url, localContext_1);\n        } else {\n          url = url.replace(/\\{(\\w+?)\\}/g, function (m, p) {\n            return localContext_1[p];\n          });\n        }\n\n        return url;\n      }\n    }\n  );\n}","map":{"version":3,"sources":["../src/source/WMTS.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA,SAAQ,SAAR,EAAmB,0BAAnB,EAA+C,mBAA/C,QAAyE,uBAAzE;AACA,SAAQ,IAAR,EAAc,SAAd,EAAyB,QAAzB,QAAwC,aAAxC;AACA,SAAQ,cAAR,QAA6B,cAA7B;AACA,SAAQ,MAAR,QAAqB,WAArB;AACA,SAAQ,GAAG,IAAI,aAAf,EAA8B,UAA9B,EAA0C,eAA1C,QAAgE,YAAhE;AACA,OAAO,SAAP,MAAsB,gBAAtB;AACA,OAAO,mBAAP,MAAgC,0BAAhC;AACA,SAAQ,+BAAR,QAA8C,qBAA9C;AACA,SAAQ,YAAR,QAA2B,WAA3B;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CA;;;;;;AAKA,IAAA,IAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAmB,EAAA,SAAA,CAAA,IAAA,EAAA,MAAA,CAAA;AACjB;;;;;AAGA,WAAA,IAAA,CAAY,OAAZ,EAAmB;AAEjB;AAFF,QAAA,KAAA,GAAA,IAAA;;AAIE,QAAM,eAAe,GAAG,OAAO,CAAC,eAAR,KAA4B,SAA5B;AACtB;AAA2D,IAAA,OAAO,CAAC,eAD7C,GAEtB,mBAAmB,CAAC,GAFtB,CAJiB,CAQjB;AACA;;AACA,QAAM,QAAQ,GAAG,OAAO,CAAC,QAAzB;AAEA,QAAI,IAAI,GAAG,OAAO,CAAC,IAAnB;;AACA,QAAI,IAAI,KAAK,SAAT,IAAsB,OAAO,CAAC,GAAR,KAAgB,SAA1C,EAAqD;AACnD,MAAA,IAAI,GAAG,SAAS,CAAC,OAAO,CAAC,GAAT,CAAhB;AACD;;AAED,IAAA,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM;AACJ,MAAA,YAAY,EAAE,OAAO,CAAC,YADlB;AAEJ,MAAA,SAAS,EAAE,OAAO,CAAC,SAFf;AAGJ,MAAA,WAAW,EAAE,OAAO,CAAC,WAHjB;AAIJ,MAAA,UAAU,EAAE,OAAO,CAAC,UAJhB;AAKJ,MAAA,0BAA0B,EAAE,OAAO,CAAC,0BALhC;AAMJ,MAAA,SAAS,EAAE,OAAO,CAAC,SANf;AAOJ,MAAA,QAAQ,EAAE,QAPN;AAQJ,MAAA,gBAAgB,EAAE,OAAO,CAAC,gBARtB;AASJ,MAAA,cAAc,EAAE,OAAO,CAAC,cATpB;AAUJ,MAAA,eAAe,EAAE,mBAVb;AAWJ,MAAA,IAAI,EAAE,IAXF;AAYJ,MAAA,KAAK,EAAE,OAAO,CAAC,KAAR,KAAkB,SAAlB,GAA8B,OAAO,CAAC,KAAtC,GAA8C,KAZjD;AAaJ,MAAA,UAAU,EAAE,OAAO,CAAC;AAbhB,KAAN,KAcE,IAdF;AAgBA;;;;;AAIA,IAAA,KAAI,CAAC,QAAL,GAAgB,OAAO,CAAC,OAAR,KAAoB,SAApB,GAAgC,OAAO,CAAC,OAAxC,GAAkD,OAAlE;AAEA;;;;;AAIA,IAAA,KAAI,CAAC,OAAL,GAAe,OAAO,CAAC,MAAR,KAAmB,SAAnB,GAA+B,OAAO,CAAC,MAAvC,GAAgD,YAA/D;AAEA;;;;;AAIA,IAAA,KAAI,CAAC,WAAL,GAAmB,OAAO,CAAC,UAAR,KAAuB,SAAvB,GAAmC,OAAO,CAAC,UAA3C,GAAwD,EAA3E;AAEA;;;;;AAIA,IAAA,KAAI,CAAC,MAAL,GAAc,OAAO,CAAC,KAAtB;AAEA;;;;;AAIA,IAAA,KAAI,CAAC,UAAL,GAAkB,OAAO,CAAC,SAA1B;AAEA;;;;;AAIA,IAAA,KAAI,CAAC,MAAL,GAAc,OAAO,CAAC,KAAtB,CAnEiB,CAqEjB;AACA;;AAEA;;;;;AAIA,IAAA,KAAI,CAAC,gBAAL,GAAwB,eAAxB;;AAEA,IAAA,KAAI,CAAC,MAAL,CAAY,KAAI,CAAC,oBAAL,EAAZ;;AAEA,QAAI,IAAI,IAAI,IAAI,CAAC,MAAL,GAAc,CAA1B,EAA6B;AAC3B,MAAA,KAAI,CAAC,eAAL,GAAuB,0BAA0B,CAAC,IAAI,CAAC,GAAL,CAAS,sBAAsB,CAAC,IAAvB,CAA4B,KAA5B,CAAT,CAAD,CAAjD;AACD;;;AAEF;AAED;;;;;;;AAKA,EAAA,IAAA,CAAA,SAAA,CAAA,OAAA,GAAA,UAAQ,IAAR,EAAY;AACV,SAAK,IAAL,GAAY,IAAZ;AACA,QAAM,GAAG,GAAG,IAAI,CAAC,IAAL,CAAU,IAAV,CAAZ;AACA,SAAK,kBAAL,CAAwB,0BAA0B,CAAC,IAAI,CAAC,GAAL,CAAS,sBAAsB,CAAC,IAAvB,CAA4B,IAA5B,CAAT,CAAD,CAAlD,EAAiG,GAAjG;AACD,GAJD;AAMA;;;;;;;;;AAOA,EAAA,IAAA,CAAA,SAAA,CAAA,aAAA,GAAA,YAAA;AACE,WAAO,KAAK,WAAZ;AACD,GAFD;AAKA;;;;;;;AAKA,EAAA,IAAA,CAAA,SAAA,CAAA,SAAA,GAAA,YAAA;AACE,WAAO,KAAK,OAAZ;AACD,GAFD;AAKA;;;;;;;AAKA,EAAA,IAAA,CAAA,SAAA,CAAA,QAAA,GAAA,YAAA;AACE,WAAO,KAAK,MAAZ;AACD,GAFD;AAKA;;;;;;;AAKA,EAAA,IAAA,CAAA,SAAA,CAAA,YAAA,GAAA,YAAA;AACE,WAAO,KAAK,UAAZ;AACD,GAFD;AAKA;;;;;;;AAKA,EAAA,IAAA,CAAA,SAAA,CAAA,kBAAA,GAAA,YAAA;AACE,WAAO,KAAK,gBAAZ;AACD,GAFD;AAKA;;;;;;;AAKA,EAAA,IAAA,CAAA,SAAA,CAAA,QAAA,GAAA,YAAA;AACE,WAAO,KAAK,MAAZ;AACD,GAFD;AAKA;;;;;;;AAKA,EAAA,IAAA,CAAA,SAAA,CAAA,UAAA,GAAA,YAAA;AACE,WAAO,KAAK,QAAZ;AACD,GAFD;AAKA;;;;;;AAIA,EAAA,IAAA,CAAA,SAAA,CAAA,oBAAA,GAAA,YAAA;AACE,QAAI,CAAC,GAAG,CAAR;AACA,QAAM,GAAG,GAAG,EAAZ;;AACA,SAAK,IAAM,GAAX,IAAkB,KAAK,WAAvB,EAAoC;AAClC,MAAA,GAAG,CAAC,CAAC,EAAF,CAAH,GAAW,GAAG,GAAG,GAAN,GAAY,KAAK,WAAL,CAAiB,GAAjB,CAAvB;AACD;;AACD,WAAO,GAAG,CAAC,IAAJ,CAAS,GAAT,CAAP;AACD,GAPD;AAUA;;;;;;;AAKA,EAAA,IAAA,CAAA,SAAA,CAAA,gBAAA,GAAA,UAAiB,UAAjB,EAA2B;AACzB,IAAA,MAAM,CAAC,KAAK,WAAN,EAAmB,UAAnB,CAAN;AACA,SAAK,MAAL,CAAY,KAAK,oBAAL,EAAZ;AACD,GAHD;;AAKF,SAAA,IAAA;AAAC,CArMD,CAAmB,SAAnB,CAAA;;AAuMA,eAAe,IAAf;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,OAAM,SAAU,uBAAV,CAAkC,OAAlC,EAA2C,MAA3C,EAAiD;AACrD,MAAM,MAAM,GAAG,OAAO,CAAC,UAAD,CAAP,CAAoB,OAApB,CAAf;AACA,MAAM,CAAC,GAAG,IAAI,CAAC,MAAD,EAAS,UAAS,GAAT,EAAc,KAAd,EAAqB,KAArB,EAA0B;AAC/C,WAAO,GAAG,CAAC,YAAD,CAAH,IAAqB,MAAM,CAAC,OAAD,CAAlC;AACD,GAFa,CAAd;;AAGA,MAAI,CAAC,KAAK,IAAV,EAAgB;AACd,WAAO,IAAP;AACD;;AACD,MAAM,cAAc,GAAG,OAAO,CAAC,UAAD,CAAP,CAAoB,eAApB,CAAvB;AACA,MAAI,GAAJ;;AACA,MAAI,CAAC,CAAC,mBAAD,CAAD,CAAuB,MAAvB,GAAgC,CAApC,EAAuC;AACrC,QAAI,gBAAgB,MAApB,EAA4B;AAC1B,MAAA,GAAG,GAAG,SAAS,CAAC,CAAC,CAAC,mBAAD,CAAF,EACb,UAAS,GAAT,EAAc,KAAd,EAAqB,KAArB,EAA0B;AACxB,YAAM,aAAa,GAAG,IAAI,CAAC,cAAD,EAAiB,UAAS,EAAT,EAAW;AACpD,iBAAO,EAAE,CAAC,YAAD,CAAF,IAAoB,GAAG,CAAC,eAAD,CAA9B;AACD,SAFyB,CAA1B;AAGA,YAAM,YAAY,GAAG,aAAa,CAAC,cAAD,CAAlC;AACA,YAAM,KAAK,GAAG,aAAa,CAAC,YAAY,CAAC,OAAb,CAAqB,oCAArB,EAA2D,OAA3D,CAAD,CAAb,IACR,aAAa,CAAC,YAAD,CADnB;AAEA,YAAM,KAAK,GAAG,aAAa,CAAC,MAAM,CAAC,YAAD,CAAP,CAA3B;;AACA,YAAI,KAAK,IAAI,KAAb,EAAoB;AAClB,iBAAO,UAAU,CAAC,KAAD,EAAQ,KAAR,CAAjB;AACD,SAFD,MAEO;AACL,iBAAO,YAAY,IAAI,MAAM,CAAC,YAAD,CAA7B;AACD;AACF,OAdY,CAAf;AAeD,KAhBD,MAgBO;AACL,MAAA,GAAG,GAAG,SAAS,CAAC,CAAC,CAAC,mBAAD,CAAF,EACb,UAAS,GAAT,EAAc,KAAd,EAAqB,KAArB,EAA0B;AACxB,eAAO,GAAG,CAAC,eAAD,CAAH,IAAwB,MAAM,CAAC,WAAD,CAArC;AACD,OAHY,CAAf;AAID;AACF,GAvBD,MAuBO;AACL,IAAA,GAAG,GAAG,CAAN;AACD;;AACD,MAAI,GAAG,GAAG,CAAV,EAAa;AACX,IAAA,GAAG,GAAG,CAAN;AACD;;AACD,MAAM,SAAS;AAAG;AACf,EAAA,CAAC,CAAC,mBAAD,CAAD,CAAuB,GAAvB,EAA4B,eAA5B,CADH;AAEA,MAAM,YAAY;AAAG;AAClB,EAAA,CAAC,CAAC,mBAAD,CAAD,CAAuB,GAAvB,EAA4B,qBAA5B,CADH;AAGA,MAAI,MAAM;AAAG;AAAuB,EAAA,CAAC,CAAC,QAAD,CAAD,CAAY,CAAZ,CAApC;;AACA,MAAI,YAAY,MAAhB,EAAwB;AACtB,IAAA,MAAM,GAAG,MAAM,CAAC,QAAD,CAAf;AACD;;AACD,EAAA,GAAG,GAAG,SAAS,CAAC,CAAC,CAAC,OAAD,CAAF,EAAa,UAAS,GAAT,EAAc,KAAd,EAAqB,KAArB,EAA0B;AACpD,QAAI,WAAW,MAAf,EAAuB;AACrB,aAAO,GAAG,CAAC,OAAD,CAAH,IAAgB,MAAM,CAAC,OAAD,CAA7B;AACD,KAFD,MAEO;AACL,aAAO,GAAG,CAAC,WAAD,CAAV;AACD;AACF,GANc,CAAf;;AAOA,MAAI,GAAG,GAAG,CAAV,EAAa;AACX,IAAA,GAAG,GAAG,CAAN;AACD;;AACD,MAAM,KAAK;AAAG;AAAuB,EAAA,CAAC,CAAC,OAAD,CAAD,CAAW,GAAX,EAAgB,YAAhB,CAArC;AAEA,MAAM,UAAU,GAAG,EAAnB;;AACA,MAAI,eAAe,CAAnB,EAAsB;AACpB,IAAA,CAAC,CAAC,WAAD,CAAD,CAAe,OAAf,CAAuB,UAAS,GAAT,EAAc,KAAd,EAAqB,KAArB,EAA0B;AAC/C,UAAM,GAAG,GAAG,GAAG,CAAC,YAAD,CAAf;AACA,UAAI,KAAK,GAAG,GAAG,CAAC,SAAD,CAAf;;AACA,UAAI,KAAK,KAAK,SAAd,EAAyB;AACvB,QAAA,KAAK,GAAG,GAAG,CAAC,OAAD,CAAH,CAAa,CAAb,CAAR;AACD;;AACD,MAAA,UAAU,CAAC,GAAD,CAAV,GAAkB,KAAlB;AACD,KAPD;AAQD;;AAED,MAAM,UAAU,GAAG,OAAO,CAAC,UAAD,CAAP,CAAoB,eAApB,CAAnB;AACA,MAAM,YAAY,GAAG,IAAI,CAAC,UAAD,EAAa,UAAS,GAAT,EAAc,KAAd,EAAqB,KAArB,EAA0B;AAC9D,WAAO,GAAG,CAAC,YAAD,CAAH,IAAqB,SAA5B;AACD,GAFwB,CAAzB;AAIA,MAAI,UAAJ;AACA,MAAM,IAAI,GAAG,YAAY,CAAC,cAAD,CAAzB;;AACA,MAAI,IAAJ,EAAU;AACR,IAAA,UAAU,GAAG,aAAa,CAAC,IAAI,CAAC,OAAL,CAAa,oCAAb,EAAmD,OAAnD,CAAD,CAAb,IACT,aAAa,CAAC,IAAD,CADjB;AAED;;AACD,MAAI,gBAAgB,MAApB,EAA4B;AAC1B,QAAM,UAAU,GAAG,aAAa,CAAC,MAAM,CAAC,YAAD,CAAP,CAAhC;;AACA,QAAI,UAAJ,EAAgB;AACd,UAAI,CAAC,UAAD,IAAe,UAAU,CAAC,UAAD,EAAa,UAAb,CAA7B,EAAuD;AACrD,QAAA,UAAU,GAAG,UAAb;AACD;AACF;AACF;;AAED,MAAM,gBAAgB,GAAG,CAAC,CAAC,kBAAD,CAA1B;AACA,MAAI,MAAJ,EAAY,KAAZ;;AACA,MAAI,gBAAgB,KAAK,SAAzB,EAAoC;AAClC,QAAM,qBAAqB,GAAG,aAAa,CAAC,WAAD,CAAb,CAA2B,SAA3B,EAA9B;AACA,IAAA,KAAK,GAAI,gBAAgB,CAAC,CAAD,CAAhB,IAAuB,qBAAqB,CAAC,CAAD,CAA5C,IACL,gBAAgB,CAAC,CAAD,CAAhB,IAAuB,qBAAqB,CAAC,CAAD,CADhD;AAEA,IAAA,MAAM,GAAG,eAAe,CACtB,gBADsB,EACJ,WADI,EACS,UADT,CAAxB;AAEA,QAAM,gBAAgB,GAAG,UAAU,CAAC,SAAX,EAAzB;;AACA,QAAI,gBAAJ,EAAsB;AACpB;AACA;AACA,UAAI,CAAC,cAAc,CAAC,gBAAD,EAAmB,MAAnB,CAAnB,EAA+C;AAC7C,QAAA,MAAM,GAAG,SAAT;AACD;AACF;AACF;;AAED,MAAM,QAAQ,GAAG,+BAA+B,CAAC,YAAD,EAAe,MAAf,EAAuB,YAAvB,CAAhD;AAEA;;AACA,MAAM,IAAI,GAAG,EAAb;AACA,MAAI,eAAe,GAAG,MAAM,CAAC,iBAAD,CAA5B;AACA,EAAA,eAAe,GAAG,eAAe,KAAK,SAApB,GAAgC,eAAhC,GAAkD,EAApE;;AAEA,MAAI,wBAAwB,OAAxB,IAAmC,aAAa,OAAO,CAAC,oBAAD,CAA3D,EAAmF;AACjF,QAAM,IAAI,GAAG,OAAO,CAAC,oBAAD,CAAP,CAA8B,SAA9B,EAAyC,KAAzC,EAAgD,MAAhD,EAAwD,KAAxD,CAAb;;AAEA,SAAK,IAAI,CAAC,GAAG,CAAR,EAAW,EAAE,GAAG,IAAI,CAAC,MAA1B,EAAkC,CAAC,GAAG,EAAtC,EAA0C,EAAE,CAA5C,EAA+C;AAC7C,UAAI,IAAI,CAAC,CAAD,CAAJ,CAAQ,YAAR,CAAJ,EAA2B;AACzB,YAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,CAAD,CAAJ,CAAQ,YAAR,CAAD,EAAwB,UAAS,OAAT,EAAgB;AAC7D,iBAAO,OAAO,CAAC,MAAD,CAAP,IAAmB,aAA1B;AACD,SAFsB,CAAvB;AAGA,YAAM,SAAS,GAAG,UAAU,CAAC,eAAD,CAAV,CAA4B,OAA5B,CAAlB;;AAEA,YAAI,eAAe,KAAK,EAAxB,EAA4B;AAC1B;AACA,UAAA,eAAe,GAAG,SAAS,CAAC,CAAD,CAA3B;AACD;;AACD,YAAI,eAAe,KAAK,mBAAmB,CAAC,GAA5C,EAAiD;AAC/C,cAAI,QAAQ,CAAC,SAAD,EAAY,mBAAmB,CAAC,GAAhC,CAAZ,EAAkD;AAChD,YAAA,IAAI,CAAC,IAAL;AAAU;AAAuB,YAAA,IAAI,CAAC,CAAD,CAAJ,CAAQ,MAAR,CAAjC;AACD;AACF,SAJD,MAIO;AACL;AACD;AACF,OAjBD,MAiBO,IAAI,IAAI,CAAC,CAAD,CAAJ,CAAQ,MAAR,CAAJ,EAAqB;AAC1B,QAAA,eAAe,GAAG,mBAAmB,CAAC,GAAtC;AACA,QAAA,IAAI,CAAC,IAAL;AAAU;AAAuB,QAAA,IAAI,CAAC,CAAD,CAAJ,CAAQ,MAAR,CAAjC;AACD;AACF;AACF;;AACD,MAAI,IAAI,CAAC,MAAL,KAAgB,CAApB,EAAuB;AACrB,IAAA,eAAe,GAAG,mBAAmB,CAAC,IAAtC;AACA,IAAA,CAAC,CAAC,aAAD,CAAD,CAAiB,OAAjB,CAAyB,UAAS,OAAT,EAAgB;AACvC,UAAI,OAAO,CAAC,cAAD,CAAP,KAA4B,MAAhC,EAAwC;AACtC,QAAA,MAAM,GAAG,OAAO,CAAC,QAAD,CAAhB;AACA,QAAA,IAAI,CAAC,IAAL;AAAU;AAAuB,QAAA,OAAO,CAAC,UAAD,CAAxC;AACD;AACF,KALD;AAMD;;AAED,SAAO;AACL,IAAA,IAAI,EAAE,IADD;AAEL,IAAA,KAAK,EAAE,MAAM,CAAC,OAAD,CAFR;AAGL,IAAA,SAAS,EAAE,SAHN;AAIL,IAAA,MAAM,EAAE,MAJH;AAKL,IAAA,UAAU,EAAE,UALP;AAML,IAAA,eAAe,EAAE,eANZ;AAOL,IAAA,QAAQ,EAAE,QAPL;AAQL,IAAA,KAAK,EAAE,KARF;AASL,IAAA,UAAU,EAAE,UATP;AAUL,IAAA,KAAK,EAAE,KAVF;AAWL,IAAA,WAAW,EAAE,MAAM,CAAC,aAAD;AAXd,GAAP;AAaD;AAED;;;;;;AAKA,SAAS,sBAAT,CAAgC,QAAhC,EAAwC;AACtC,MAAM,eAAe,GAAG,KAAK,gBAA7B,CADsC,CAGtC;AACA;;AACA,MAAM,OAAO,GAAG;AACd,aAAS,KAAK,MADA;AAEd,aAAS,KAAK,MAFA;AAGd,qBAAiB,KAAK;AAHR,GAAhB;;AAMA,MAAI,eAAe,IAAI,mBAAmB,CAAC,GAA3C,EAAgD;AAC9C,IAAA,MAAM,CAAC,OAAD,EAAU;AACd,iBAAW,MADG;AAEd,iBAAW,SAFG;AAGd,iBAAW,KAAK,QAHF;AAId,gBAAU,KAAK;AAJD,KAAV,CAAN;AAMD,GAlBqC,CAoBtC;AACA;AACA;;;AAEA,EAAA,QAAQ,GAAI,eAAe,IAAI,mBAAmB,CAAC,GAAxC,GACT,YAAY,CAAC,QAAD,EAAW,OAAX,CADH,GAET,QAAQ,CAAC,OAAT,CAAiB,aAAjB,EAAgC,UAAS,CAAT,EAAY,CAAZ,EAAa;AAC3C,WAAQ,CAAC,CAAC,WAAF,MAAmB,OAApB,GAA+B,OAAO,CAAC,CAAC,CAAC,WAAF,EAAD,CAAtC,GAA0D,CAAjE;AACD,GAFD,CAFF;AAMA,MAAM,QAAQ;AAAG;AACf,OAAK,QADP;AAEA,MAAM,UAAU,GAAG,KAAK,WAAxB;AAEA;AACE;;;;;;AAMA,cAAS,SAAT,EAAoB,UAApB,EAAgC,UAAhC,EAA0C;AACxC,UAAI,CAAC,SAAL,EAAgB;AACd,eAAO,SAAP;AACD,OAFD,MAEO;AACL,YAAM,cAAY,GAAG;AACnB,wBAAc,QAAQ,CAAC,WAAT,CAAqB,SAAS,CAAC,CAAD,CAA9B,CADK;AAEnB,qBAAW,SAAS,CAAC,CAAD,CAFD;AAGnB,qBAAW,SAAS,CAAC,CAAD;AAHD,SAArB;AAKA,QAAA,MAAM,CAAC,cAAD,EAAe,UAAf,CAAN;AACA,YAAI,GAAG,GAAG,QAAV;;AACA,YAAI,eAAe,IAAI,mBAAmB,CAAC,GAA3C,EAAgD;AAC9C,UAAA,GAAG,GAAG,YAAY,CAAC,GAAD,EAAM,cAAN,CAAlB;AACD,SAFD,MAEO;AACL,UAAA,GAAG,GAAG,GAAG,CAAC,OAAJ,CAAY,aAAZ,EAA2B,UAAS,CAAT,EAAY,CAAZ,EAAa;AAC5C,mBAAO,cAAY,CAAC,CAAD,CAAnB;AACD,WAFK,CAAN;AAGD;;AACD,eAAO,GAAP;AACD;AACF;AA3BH;AA6BD","sourceRoot":"","sourcesContent":["/**\n * @module ol/source/WMTS\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { expandUrl, createFromTileUrlFunctions, nullTileUrlFunction } from '../tileurlfunction.js';\nimport { find, findIndex, includes } from '../array.js';\nimport { containsExtent } from '../extent.js';\nimport { assign } from '../obj.js';\nimport { get as getProjection, equivalent, transformExtent } from '../proj.js';\nimport TileImage from './TileImage.js';\nimport WMTSRequestEncoding from './WMTSRequestEncoding.js';\nimport { createFromCapabilitiesMatrixSet } from '../tilegrid/WMTS.js';\nimport { appendParams } from '../uri.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize] Tile cache size. The default depends on the screen size. Will increase if too small.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {import(\"../tilegrid/WMTS.js\").default} tileGrid Tile grid.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"./WMTSRequestEncoding.js\").default|string} [requestEncoding='KVP'] Request encoding.\n * @property {string} layer Layer name as advertised in the WMTS capabilities.\n * @property {string} style Style name as advertised in the WMTS capabilities.\n * @property {typeof import(\"../ImageTile.js\").default} [tileClass]  Class used to instantiate image tiles. Default is {@link module:ol/ImageTile~ImageTile}.\n * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service.\n * For example, if the tile service advertizes 256px by 256px tiles but actually sends 512px\n * by 512px images (for retina/hidpi devices) then `tilePixelRatio`\n * should be set to `2`.\n * @property {string} [format='image/jpeg'] Image format. Only used when `requestEncoding` is `'KVP'`.\n * @property {string} [version='1.0.0'] WMTS version.\n * @property {string} matrixSet Matrix set.\n * @property {!Object} [dimensions] Additional \"dimensions\" for tile requests.\n * This is an object with properties named like the advertised WMTS dimensions.\n * @property {string} [url]  A URL for the service.\n * For the RESTful request encoding, this is a URL\n * template.  For KVP encoding, it is normal URL. A `{?-?}` template pattern,\n * for example `subdomain{a-f}.domain.com`, may be used instead of defining\n * each one separately in the `urls` option.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {Array<string>} [urls] An array of URLs.\n * Requests will be distributed among the URLs in this array.\n * @property {boolean} [wrapX=false] Whether to wrap the world horizontally.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n */\n/**\n * @classdesc\n * Layer source for tile data from WMTS servers.\n * @api\n */\nvar WMTS = /** @class */ (function (_super) {\n    __extends(WMTS, _super);\n    /**\n     * @param {Options} options WMTS options.\n     */\n    function WMTS(options) {\n        // TODO: add support for TileMatrixLimits\n        var _this = this;\n        var requestEncoding = options.requestEncoding !== undefined ?\n            /** @type {import(\"./WMTSRequestEncoding.js\").default} */ (options.requestEncoding) :\n            WMTSRequestEncoding.KVP;\n        // FIXME: should we create a default tileGrid?\n        // we could issue a getCapabilities xhr to retrieve missing configuration\n        var tileGrid = options.tileGrid;\n        var urls = options.urls;\n        if (urls === undefined && options.url !== undefined) {\n            urls = expandUrl(options.url);\n        }\n        _this = _super.call(this, {\n            attributions: options.attributions,\n            cacheSize: options.cacheSize,\n            crossOrigin: options.crossOrigin,\n            projection: options.projection,\n            reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n            tileClass: options.tileClass,\n            tileGrid: tileGrid,\n            tileLoadFunction: options.tileLoadFunction,\n            tilePixelRatio: options.tilePixelRatio,\n            tileUrlFunction: nullTileUrlFunction,\n            urls: urls,\n            wrapX: options.wrapX !== undefined ? options.wrapX : false,\n            transition: options.transition\n        }) || this;\n        /**\n         * @private\n         * @type {string}\n         */\n        _this.version_ = options.version !== undefined ? options.version : '1.0.0';\n        /**\n         * @private\n         * @type {string}\n         */\n        _this.format_ = options.format !== undefined ? options.format : 'image/jpeg';\n        /**\n         * @private\n         * @type {!Object}\n         */\n        _this.dimensions_ = options.dimensions !== undefined ? options.dimensions : {};\n        /**\n         * @private\n         * @type {string}\n         */\n        _this.layer_ = options.layer;\n        /**\n         * @private\n         * @type {string}\n         */\n        _this.matrixSet_ = options.matrixSet;\n        /**\n         * @private\n         * @type {string}\n         */\n        _this.style_ = options.style;\n        // FIXME: should we guess this requestEncoding from options.url(s)\n        //        structure? that would mean KVP only if a template is not provided.\n        /**\n         * @private\n         * @type {import(\"./WMTSRequestEncoding.js\").default}\n         */\n        _this.requestEncoding_ = requestEncoding;\n        _this.setKey(_this.getKeyForDimensions_());\n        if (urls && urls.length > 0) {\n            _this.tileUrlFunction = createFromTileUrlFunctions(urls.map(createFromWMTSTemplate.bind(_this)));\n        }\n        return _this;\n    }\n    /**\n     * Set the URLs to use for requests.\n     * URLs may contain OGC conform URL Template Variables: {TileMatrix}, {TileRow}, {TileCol}.\n     * @override\n     */\n    WMTS.prototype.setUrls = function (urls) {\n        this.urls = urls;\n        var key = urls.join('\\n');\n        this.setTileUrlFunction(createFromTileUrlFunctions(urls.map(createFromWMTSTemplate.bind(this))), key);\n    };\n    /**\n     * Get the dimensions, i.e. those passed to the constructor through the\n     * \"dimensions\" option, and possibly updated using the updateDimensions\n     * method.\n     * @return {!Object} Dimensions.\n     * @api\n     */\n    WMTS.prototype.getDimensions = function () {\n        return this.dimensions_;\n    };\n    /**\n     * Return the image format of the WMTS source.\n     * @return {string} Format.\n     * @api\n     */\n    WMTS.prototype.getFormat = function () {\n        return this.format_;\n    };\n    /**\n     * Return the layer of the WMTS source.\n     * @return {string} Layer.\n     * @api\n     */\n    WMTS.prototype.getLayer = function () {\n        return this.layer_;\n    };\n    /**\n     * Return the matrix set of the WMTS source.\n     * @return {string} MatrixSet.\n     * @api\n     */\n    WMTS.prototype.getMatrixSet = function () {\n        return this.matrixSet_;\n    };\n    /**\n     * Return the request encoding, either \"KVP\" or \"REST\".\n     * @return {import(\"./WMTSRequestEncoding.js\").default} Request encoding.\n     * @api\n     */\n    WMTS.prototype.getRequestEncoding = function () {\n        return this.requestEncoding_;\n    };\n    /**\n     * Return the style of the WMTS source.\n     * @return {string} Style.\n     * @api\n     */\n    WMTS.prototype.getStyle = function () {\n        return this.style_;\n    };\n    /**\n     * Return the version of the WMTS source.\n     * @return {string} Version.\n     * @api\n     */\n    WMTS.prototype.getVersion = function () {\n        return this.version_;\n    };\n    /**\n     * @private\n     * @return {string} The key for the current dimensions.\n     */\n    WMTS.prototype.getKeyForDimensions_ = function () {\n        var i = 0;\n        var res = [];\n        for (var key in this.dimensions_) {\n            res[i++] = key + '-' + this.dimensions_[key];\n        }\n        return res.join('/');\n    };\n    /**\n     * Update the dimensions.\n     * @param {Object} dimensions Dimensions.\n     * @api\n     */\n    WMTS.prototype.updateDimensions = function (dimensions) {\n        assign(this.dimensions_, dimensions);\n        this.setKey(this.getKeyForDimensions_());\n    };\n    return WMTS;\n}(TileImage));\nexport default WMTS;\n/**\n * Generate source options from a capabilities object.\n * @param {Object} wmtsCap An object representing the capabilities document.\n * @param {!Object} config Configuration properties for the layer.  Defaults for\n *                  the layer will apply if not provided.\n *\n * Required config properties:\n *  - layer - {string} The layer identifier.\n *\n * Optional config properties:\n *  - matrixSet - {string} The matrix set identifier, required if there is\n *       more than one matrix set in the layer capabilities.\n *  - projection - {string} The desired CRS when no matrixSet is specified.\n *       eg: \"EPSG:3857\". If the desired projection is not available,\n *       an error is thrown.\n *  - requestEncoding - {string} url encoding format for the layer. Default is\n *       the first tile url format found in the GetCapabilities response.\n *  - style - {string} The name of the style\n *  - format - {string} Image format for the layer. Default is the first\n *       format returned in the GetCapabilities response.\n *  - crossOrigin - {string|null|undefined} Cross origin. Default is `undefined`.\n * @return {?Options} WMTS source options object or `null` if the layer was not found.\n * @api\n */\nexport function optionsFromCapabilities(wmtsCap, config) {\n    var layers = wmtsCap['Contents']['Layer'];\n    var l = find(layers, function (elt, index, array) {\n        return elt['Identifier'] == config['layer'];\n    });\n    if (l === null) {\n        return null;\n    }\n    var tileMatrixSets = wmtsCap['Contents']['TileMatrixSet'];\n    var idx;\n    if (l['TileMatrixSetLink'].length > 1) {\n        if ('projection' in config) {\n            idx = findIndex(l['TileMatrixSetLink'], function (elt, index, array) {\n                var tileMatrixSet = find(tileMatrixSets, function (el) {\n                    return el['Identifier'] == elt['TileMatrixSet'];\n                });\n                var supportedCRS = tileMatrixSet['SupportedCRS'];\n                var proj1 = getProjection(supportedCRS.replace(/urn:ogc:def:crs:(\\w+):(.*:)?(\\w+)$/, '$1:$3')) ||\n                    getProjection(supportedCRS);\n                var proj2 = getProjection(config['projection']);\n                if (proj1 && proj2) {\n                    return equivalent(proj1, proj2);\n                }\n                else {\n                    return supportedCRS == config['projection'];\n                }\n            });\n        }\n        else {\n            idx = findIndex(l['TileMatrixSetLink'], function (elt, index, array) {\n                return elt['TileMatrixSet'] == config['matrixSet'];\n            });\n        }\n    }\n    else {\n        idx = 0;\n    }\n    if (idx < 0) {\n        idx = 0;\n    }\n    var matrixSet = /** @type {string} */ (l['TileMatrixSetLink'][idx]['TileMatrixSet']);\n    var matrixLimits = /** @type {Array<Object>} */ (l['TileMatrixSetLink'][idx]['TileMatrixSetLimits']);\n    var format = /** @type {string} */ (l['Format'][0]);\n    if ('format' in config) {\n        format = config['format'];\n    }\n    idx = findIndex(l['Style'], function (elt, index, array) {\n        if ('style' in config) {\n            return elt['Title'] == config['style'];\n        }\n        else {\n            return elt['isDefault'];\n        }\n    });\n    if (idx < 0) {\n        idx = 0;\n    }\n    var style = /** @type {string} */ (l['Style'][idx]['Identifier']);\n    var dimensions = {};\n    if ('Dimension' in l) {\n        l['Dimension'].forEach(function (elt, index, array) {\n            var key = elt['Identifier'];\n            var value = elt['Default'];\n            if (value === undefined) {\n                value = elt['Value'][0];\n            }\n            dimensions[key] = value;\n        });\n    }\n    var matrixSets = wmtsCap['Contents']['TileMatrixSet'];\n    var matrixSetObj = find(matrixSets, function (elt, index, array) {\n        return elt['Identifier'] == matrixSet;\n    });\n    var projection;\n    var code = matrixSetObj['SupportedCRS'];\n    if (code) {\n        projection = getProjection(code.replace(/urn:ogc:def:crs:(\\w+):(.*:)?(\\w+)$/, '$1:$3')) ||\n            getProjection(code);\n    }\n    if ('projection' in config) {\n        var projConfig = getProjection(config['projection']);\n        if (projConfig) {\n            if (!projection || equivalent(projConfig, projection)) {\n                projection = projConfig;\n            }\n        }\n    }\n    var wgs84BoundingBox = l['WGS84BoundingBox'];\n    var extent, wrapX;\n    if (wgs84BoundingBox !== undefined) {\n        var wgs84ProjectionExtent = getProjection('EPSG:4326').getExtent();\n        wrapX = (wgs84BoundingBox[0] == wgs84ProjectionExtent[0] &&\n            wgs84BoundingBox[2] == wgs84ProjectionExtent[2]);\n        extent = transformExtent(wgs84BoundingBox, 'EPSG:4326', projection);\n        var projectionExtent = projection.getExtent();\n        if (projectionExtent) {\n            // If possible, do a sanity check on the extent - it should never be\n            // bigger than the validity extent of the projection of a matrix set.\n            if (!containsExtent(projectionExtent, extent)) {\n                extent = undefined;\n            }\n        }\n    }\n    var tileGrid = createFromCapabilitiesMatrixSet(matrixSetObj, extent, matrixLimits);\n    /** @type {!Array<string>} */\n    var urls = [];\n    var requestEncoding = config['requestEncoding'];\n    requestEncoding = requestEncoding !== undefined ? requestEncoding : '';\n    if ('OperationsMetadata' in wmtsCap && 'GetTile' in wmtsCap['OperationsMetadata']) {\n        var gets = wmtsCap['OperationsMetadata']['GetTile']['DCP']['HTTP']['Get'];\n        for (var i = 0, ii = gets.length; i < ii; ++i) {\n            if (gets[i]['Constraint']) {\n                var constraint = find(gets[i]['Constraint'], function (element) {\n                    return element['name'] == 'GetEncoding';\n                });\n                var encodings = constraint['AllowedValues']['Value'];\n                if (requestEncoding === '') {\n                    // requestEncoding not provided, use the first encoding from the list\n                    requestEncoding = encodings[0];\n                }\n                if (requestEncoding === WMTSRequestEncoding.KVP) {\n                    if (includes(encodings, WMTSRequestEncoding.KVP)) {\n                        urls.push(/** @type {string} */ (gets[i]['href']));\n                    }\n                }\n                else {\n                    break;\n                }\n            }\n            else if (gets[i]['href']) {\n                requestEncoding = WMTSRequestEncoding.KVP;\n                urls.push(/** @type {string} */ (gets[i]['href']));\n            }\n        }\n    }\n    if (urls.length === 0) {\n        requestEncoding = WMTSRequestEncoding.REST;\n        l['ResourceURL'].forEach(function (element) {\n            if (element['resourceType'] === 'tile') {\n                format = element['format'];\n                urls.push(/** @type {string} */ (element['template']));\n            }\n        });\n    }\n    return {\n        urls: urls,\n        layer: config['layer'],\n        matrixSet: matrixSet,\n        format: format,\n        projection: projection,\n        requestEncoding: requestEncoding,\n        tileGrid: tileGrid,\n        style: style,\n        dimensions: dimensions,\n        wrapX: wrapX,\n        crossOrigin: config['crossOrigin']\n    };\n}\n/**\n * @param {string} template Template.\n * @return {import(\"../Tile.js\").UrlFunction} Tile URL function.\n * @this {WMTS}\n */\nfunction createFromWMTSTemplate(template) {\n    var requestEncoding = this.requestEncoding_;\n    // context property names are lower case to allow for a case insensitive\n    // replacement as some services use different naming conventions\n    var context = {\n        'layer': this.layer_,\n        'style': this.style_,\n        'tilematrixset': this.matrixSet_\n    };\n    if (requestEncoding == WMTSRequestEncoding.KVP) {\n        assign(context, {\n            'Service': 'WMTS',\n            'Request': 'GetTile',\n            'Version': this.version_,\n            'Format': this.format_\n        });\n    }\n    // TODO: we may want to create our own appendParams function so that params\n    // order conforms to wmts spec guidance, and so that we can avoid to escape\n    // special template params\n    template = (requestEncoding == WMTSRequestEncoding.KVP) ?\n        appendParams(template, context) :\n        template.replace(/\\{(\\w+?)\\}/g, function (m, p) {\n            return (p.toLowerCase() in context) ? context[p.toLowerCase()] : m;\n        });\n    var tileGrid = /** @type {import(\"../tilegrid/WMTS.js\").default} */ (this.tileGrid);\n    var dimensions = this.dimensions_;\n    return (\n    /**\n     * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @return {string|undefined} Tile URL.\n     */\n    function (tileCoord, pixelRatio, projection) {\n        if (!tileCoord) {\n            return undefined;\n        }\n        else {\n            var localContext_1 = {\n                'TileMatrix': tileGrid.getMatrixId(tileCoord[0]),\n                'TileCol': tileCoord[1],\n                'TileRow': tileCoord[2]\n            };\n            assign(localContext_1, dimensions);\n            var url = template;\n            if (requestEncoding == WMTSRequestEncoding.KVP) {\n                url = appendParams(url, localContext_1);\n            }\n            else {\n                url = url.replace(/\\{(\\w+?)\\}/g, function (m, p) {\n                    return localContext_1[p];\n                });\n            }\n            return url;\n        }\n    });\n}\n//# sourceMappingURL=WMTS.js.map"]},"metadata":{},"sourceType":"module"}