{"ast":null,"code":"/**\n * @module ol/css\n */\n\n/**\n * @typedef {Object} FontParameters\n * @property {Array<string>} families\n * @property {string} style\n * @property {string} weight\n */\n\n/**\n * The CSS class for hidden feature.\n *\n * @const\n * @type {string}\n */\nexport var CLASS_HIDDEN = 'ol-hidden';\n/**\n * The CSS class that we'll give the DOM elements to have them selectable.\n *\n * @const\n * @type {string}\n */\n\nexport var CLASS_SELECTABLE = 'ol-selectable';\n/**\n * The CSS class that we'll give the DOM elements to have them unselectable.\n *\n * @const\n * @type {string}\n */\n\nexport var CLASS_UNSELECTABLE = 'ol-unselectable';\n/**\n * The CSS class for unsupported feature.\n *\n * @const\n * @type {string}\n */\n\nexport var CLASS_UNSUPPORTED = 'ol-unsupported';\n/**\n * The CSS class for controls.\n *\n * @const\n * @type {string}\n */\n\nexport var CLASS_CONTROL = 'ol-control';\n/**\n * The CSS class that we'll give the DOM elements that are collapsed, i.e.\n * to those elements which usually can be expanded.\n *\n * @const\n * @type {string}\n */\n\nexport var CLASS_COLLAPSED = 'ol-collapsed';\n/**\n * Get the list of font families from a font spec.  Note that this doesn't work\n * for font families that have commas in them.\n * @param {string} The CSS font property.\n * @return {FontParameters} The font families (or null if the input spec is invalid).\n */\n\nexport var getFontParameters = function () {\n  /**\n   * @type {CSSStyleDeclaration}\n   */\n  var style;\n  /**\n   * @type {Object<string, FontParameters>}\n   */\n\n  var cache = {};\n  return function (font) {\n    if (!style) {\n      style = document.createElement('div').style;\n    }\n\n    if (!(font in cache)) {\n      style.font = font;\n      var family = style.fontFamily;\n      var fontWeight = style.fontWeight;\n      var fontStyle = style.fontStyle;\n      style.font = '';\n\n      if (!family) {\n        return null;\n      }\n\n      var families = family.split(/,\\s?/);\n      cache[font] = {\n        families: families,\n        weight: fontWeight,\n        style: fontStyle\n      };\n    }\n\n    return cache[font];\n  };\n}();","map":{"version":3,"sources":["src/css.js"],"names":[],"mappings":"AAAA;;;;AAIA;;;;;;;AAQA;;;;;;AAMA,OAAO,IAAM,YAAY,GAAG,WAArB;AAGP;;;;;;;AAMA,OAAO,IAAM,gBAAgB,GAAG,eAAzB;AAGP;;;;;;;AAMA,OAAO,IAAM,kBAAkB,GAAG,iBAA3B;AAGP;;;;;;;AAMA,OAAO,IAAM,iBAAiB,GAAG,gBAA1B;AAGP;;;;;;;AAMA,OAAO,IAAM,aAAa,GAAG,YAAtB;AAGP;;;;;;;;AAOA,OAAO,IAAM,eAAe,GAAG,cAAxB;AAGP;;;;;;;AAMA,OAAO,IAAM,iBAAiB,GAAI,YAAA;AAChC;;;AAGA,MAAI,KAAJ;AACA;;;;AAGA,MAAM,KAAK,GAAG,EAAd;AACA,SAAO,UAAS,IAAT,EAAa;AAClB,QAAI,CAAC,KAAL,EAAY;AACV,MAAA,KAAK,GAAG,QAAQ,CAAC,aAAT,CAAuB,KAAvB,EAA8B,KAAtC;AACD;;AACD,QAAI,EAAE,IAAI,IAAI,KAAV,CAAJ,EAAsB;AACpB,MAAA,KAAK,CAAC,IAAN,GAAa,IAAb;AACA,UAAM,MAAM,GAAG,KAAK,CAAC,UAArB;AACA,UAAM,UAAU,GAAG,KAAK,CAAC,UAAzB;AACA,UAAM,SAAS,GAAG,KAAK,CAAC,SAAxB;AACA,MAAA,KAAK,CAAC,IAAN,GAAa,EAAb;;AACA,UAAI,CAAC,MAAL,EAAa;AACX,eAAO,IAAP;AACD;;AACD,UAAM,QAAQ,GAAG,MAAM,CAAC,KAAP,CAAa,MAAb,CAAjB;AACA,MAAA,KAAK,CAAC,IAAD,CAAL,GAAc;AACZ,QAAA,QAAQ,EAAE,QADE;AAEZ,QAAA,MAAM,EAAE,UAFI;AAGZ,QAAA,KAAK,EAAE;AAHK,OAAd;AAKD;;AACD,WAAO,KAAK,CAAC,IAAD,CAAZ;AACD,GArBD;AAsBD,CA/BgC,EAA1B","sourceRoot":"","sourcesContent":["/**\n * @module ol/css\n */\n/**\n * @typedef {Object} FontParameters\n * @property {Array<string>} families\n * @property {string} style\n * @property {string} weight\n */\n/**\n * The CSS class for hidden feature.\n *\n * @const\n * @type {string}\n */\nexport var CLASS_HIDDEN = 'ol-hidden';\n/**\n * The CSS class that we'll give the DOM elements to have them selectable.\n *\n * @const\n * @type {string}\n */\nexport var CLASS_SELECTABLE = 'ol-selectable';\n/**\n * The CSS class that we'll give the DOM elements to have them unselectable.\n *\n * @const\n * @type {string}\n */\nexport var CLASS_UNSELECTABLE = 'ol-unselectable';\n/**\n * The CSS class for unsupported feature.\n *\n * @const\n * @type {string}\n */\nexport var CLASS_UNSUPPORTED = 'ol-unsupported';\n/**\n * The CSS class for controls.\n *\n * @const\n * @type {string}\n */\nexport var CLASS_CONTROL = 'ol-control';\n/**\n * The CSS class that we'll give the DOM elements that are collapsed, i.e.\n * to those elements which usually can be expanded.\n *\n * @const\n * @type {string}\n */\nexport var CLASS_COLLAPSED = 'ol-collapsed';\n/**\n * Get the list of font families from a font spec.  Note that this doesn't work\n * for font families that have commas in them.\n * @param {string} The CSS font property.\n * @return {FontParameters} The font families (or null if the input spec is invalid).\n */\nexport var getFontParameters = (function () {\n    /**\n     * @type {CSSStyleDeclaration}\n     */\n    var style;\n    /**\n     * @type {Object<string, FontParameters>}\n     */\n    var cache = {};\n    return function (font) {\n        if (!style) {\n            style = document.createElement('div').style;\n        }\n        if (!(font in cache)) {\n            style.font = font;\n            var family = style.fontFamily;\n            var fontWeight = style.fontWeight;\n            var fontStyle = style.fontStyle;\n            style.font = '';\n            if (!family) {\n                return null;\n            }\n            var families = family.split(/,\\s?/);\n            cache[font] = {\n                families: families,\n                weight: fontWeight,\n                style: fontStyle\n            };\n        }\n        return cache[font];\n    };\n})();\n//# sourceMappingURL=css.js.map"]},"metadata":{},"sourceType":"module"}