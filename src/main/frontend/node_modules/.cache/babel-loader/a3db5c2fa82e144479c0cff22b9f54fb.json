{"ast":null,"code":"/**\n * @module ol/source/CartoDB\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { assign } from '../obj.js';\nimport SourceState from './State.js';\nimport XYZ from './XYZ.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize] Tile cache size. The default depends on the screen size. Will increase if too small.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {import(\"../proj.js\").ProjectionLike} [projection='EPSG:3857'] Projection.\n * @property {number} [maxZoom=18] Max zoom.\n * @property {number} [minZoom] Minimum zoom.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {Object} [config] If using anonymous maps, the CartoDB config to use. See\n * http://docs.cartodb.com/cartodb-platform/maps-api/anonymous-maps/\n * for more detail.\n * If using named maps, a key-value lookup with the template parameters.\n * See http://docs.cartodb.com/cartodb-platform/maps-api/named-maps/\n * for more detail.\n * @property {string} [map] If using named maps, this will be the name of the template to load.\n * See http://docs.cartodb.com/cartodb-platform/maps-api/named-maps/\n * for more detail.\n * @property {string} account If using named maps, this will be the name of the template to load.\n */\n\n/**\n * @typedef {Object} CartoDBLayerInfo\n * @property {string} layergroupid The layer group ID\n * @property {{https: string}} cdn_url The CDN URL\n */\n\n/**\n * @classdesc\n * Layer source for the CartoDB Maps API.\n * @api\n */\n\nvar CartoDB =\n/** @class */\nfunction (_super) {\n  __extends(CartoDB, _super);\n  /**\n   * @param {Options} options CartoDB options.\n   */\n\n\n  function CartoDB(options) {\n    var _this = _super.call(this, {\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      maxZoom: options.maxZoom !== undefined ? options.maxZoom : 18,\n      minZoom: options.minZoom,\n      projection: options.projection,\n      wrapX: options.wrapX\n    }) || this;\n    /**\n     * @type {string}\n     * @private\n     */\n\n\n    _this.account_ = options.account;\n    /**\n     * @type {string}\n     * @private\n     */\n\n    _this.mapId_ = options.map || '';\n    /**\n     * @type {!Object}\n     * @private\n     */\n\n    _this.config_ = options.config || {};\n    /**\n     * @type {!Object<string, CartoDBLayerInfo>}\n     * @private\n     */\n\n    _this.templateCache_ = {};\n\n    _this.initializeMap_();\n\n    return _this;\n  }\n  /**\n   * Returns the current config.\n   * @return {!Object} The current configuration.\n   * @api\n   */\n\n\n  CartoDB.prototype.getConfig = function () {\n    return this.config_;\n  };\n  /**\n   * Updates the carto db config.\n   * @param {Object} config a key-value lookup. Values will replace current values\n   *     in the config.\n   * @api\n   */\n\n\n  CartoDB.prototype.updateConfig = function (config) {\n    assign(this.config_, config);\n    this.initializeMap_();\n  };\n  /**\n   * Sets the CartoDB config\n   * @param {Object} config In the case of anonymous maps, a CartoDB configuration\n   *     object.\n   * If using named maps, a key-value lookup with the template parameters.\n   * @api\n   */\n\n\n  CartoDB.prototype.setConfig = function (config) {\n    this.config_ = config || {};\n    this.initializeMap_();\n  };\n  /**\n   * Issue a request to initialize the CartoDB map.\n   * @private\n   */\n\n\n  CartoDB.prototype.initializeMap_ = function () {\n    var paramHash = JSON.stringify(this.config_);\n\n    if (this.templateCache_[paramHash]) {\n      this.applyTemplate_(this.templateCache_[paramHash]);\n      return;\n    }\n\n    var mapUrl = 'https://' + this.account_ + '.carto.com/api/v1/map';\n\n    if (this.mapId_) {\n      mapUrl += '/named/' + this.mapId_;\n    }\n\n    var client = new XMLHttpRequest();\n    client.addEventListener('load', this.handleInitResponse_.bind(this, paramHash));\n    client.addEventListener('error', this.handleInitError_.bind(this));\n    client.open('POST', mapUrl);\n    client.setRequestHeader('Content-type', 'application/json');\n    client.send(JSON.stringify(this.config_));\n  };\n  /**\n   * Handle map initialization response.\n   * @param {string} paramHash a hash representing the parameter set that was used\n   *     for the request\n   * @param {Event} event Event.\n   * @private\n   */\n\n\n  CartoDB.prototype.handleInitResponse_ = function (paramHash, event) {\n    var client =\n    /** @type {XMLHttpRequest} */\n    event.target; // status will be 0 for file:// urls\n\n    if (!client.status || client.status >= 200 && client.status < 300) {\n      var response = void 0;\n\n      try {\n        response =\n        /** @type {CartoDBLayerInfo} */\n        JSON.parse(client.responseText);\n      } catch (err) {\n        this.setState(SourceState.ERROR);\n        return;\n      }\n\n      this.applyTemplate_(response);\n      this.templateCache_[paramHash] = response;\n      this.setState(SourceState.READY);\n    } else {\n      this.setState(SourceState.ERROR);\n    }\n  };\n  /**\n   * @private\n   * @param {Event} event Event.\n   */\n\n\n  CartoDB.prototype.handleInitError_ = function (event) {\n    this.setState(SourceState.ERROR);\n  };\n  /**\n   * Apply the new tile urls returned by carto db\n   * @param {CartoDBLayerInfo} data Result of carto db call.\n   * @private\n   */\n\n\n  CartoDB.prototype.applyTemplate_ = function (data) {\n    var tilesUrl = 'https://' + data.cdn_url.https + '/' + this.account_ + '/api/v1/map/' + data.layergroupid + '/{z}/{x}/{y}.png';\n    this.setUrl(tilesUrl);\n  };\n\n  return CartoDB;\n}(XYZ);\n\nexport default CartoDB;","map":{"version":3,"sources":["../src/source/CartoDB.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @module ol/source/CartoDB\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { assign } from '../obj.js';\nimport SourceState from './State.js';\nimport XYZ from './XYZ.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize] Tile cache size. The default depends on the screen size. Will increase if too small.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {import(\"../proj.js\").ProjectionLike} [projection='EPSG:3857'] Projection.\n * @property {number} [maxZoom=18] Max zoom.\n * @property {number} [minZoom] Minimum zoom.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {Object} [config] If using anonymous maps, the CartoDB config to use. See\n * http://docs.cartodb.com/cartodb-platform/maps-api/anonymous-maps/\n * for more detail.\n * If using named maps, a key-value lookup with the template parameters.\n * See http://docs.cartodb.com/cartodb-platform/maps-api/named-maps/\n * for more detail.\n * @property {string} [map] If using named maps, this will be the name of the template to load.\n * See http://docs.cartodb.com/cartodb-platform/maps-api/named-maps/\n * for more detail.\n * @property {string} account If using named maps, this will be the name of the template to load.\n */\n/**\n * @typedef {Object} CartoDBLayerInfo\n * @property {string} layergroupid The layer group ID\n * @property {{https: string}} cdn_url The CDN URL\n */\n/**\n * @classdesc\n * Layer source for the CartoDB Maps API.\n * @api\n */\nvar CartoDB = /** @class */ (function (_super) {\n    __extends(CartoDB, _super);\n    /**\n     * @param {Options} options CartoDB options.\n     */\n    function CartoDB(options) {\n        var _this = _super.call(this, {\n            attributions: options.attributions,\n            cacheSize: options.cacheSize,\n            crossOrigin: options.crossOrigin,\n            maxZoom: options.maxZoom !== undefined ? options.maxZoom : 18,\n            minZoom: options.minZoom,\n            projection: options.projection,\n            wrapX: options.wrapX\n        }) || this;\n        /**\n         * @type {string}\n         * @private\n         */\n        _this.account_ = options.account;\n        /**\n         * @type {string}\n         * @private\n         */\n        _this.mapId_ = options.map || '';\n        /**\n         * @type {!Object}\n         * @private\n         */\n        _this.config_ = options.config || {};\n        /**\n         * @type {!Object<string, CartoDBLayerInfo>}\n         * @private\n         */\n        _this.templateCache_ = {};\n        _this.initializeMap_();\n        return _this;\n    }\n    /**\n     * Returns the current config.\n     * @return {!Object} The current configuration.\n     * @api\n     */\n    CartoDB.prototype.getConfig = function () {\n        return this.config_;\n    };\n    /**\n     * Updates the carto db config.\n     * @param {Object} config a key-value lookup. Values will replace current values\n     *     in the config.\n     * @api\n     */\n    CartoDB.prototype.updateConfig = function (config) {\n        assign(this.config_, config);\n        this.initializeMap_();\n    };\n    /**\n     * Sets the CartoDB config\n     * @param {Object} config In the case of anonymous maps, a CartoDB configuration\n     *     object.\n     * If using named maps, a key-value lookup with the template parameters.\n     * @api\n     */\n    CartoDB.prototype.setConfig = function (config) {\n        this.config_ = config || {};\n        this.initializeMap_();\n    };\n    /**\n     * Issue a request to initialize the CartoDB map.\n     * @private\n     */\n    CartoDB.prototype.initializeMap_ = function () {\n        var paramHash = JSON.stringify(this.config_);\n        if (this.templateCache_[paramHash]) {\n            this.applyTemplate_(this.templateCache_[paramHash]);\n            return;\n        }\n        var mapUrl = 'https://' + this.account_ + '.carto.com/api/v1/map';\n        if (this.mapId_) {\n            mapUrl += '/named/' + this.mapId_;\n        }\n        var client = new XMLHttpRequest();\n        client.addEventListener('load', this.handleInitResponse_.bind(this, paramHash));\n        client.addEventListener('error', this.handleInitError_.bind(this));\n        client.open('POST', mapUrl);\n        client.setRequestHeader('Content-type', 'application/json');\n        client.send(JSON.stringify(this.config_));\n    };\n    /**\n     * Handle map initialization response.\n     * @param {string} paramHash a hash representing the parameter set that was used\n     *     for the request\n     * @param {Event} event Event.\n     * @private\n     */\n    CartoDB.prototype.handleInitResponse_ = function (paramHash, event) {\n        var client = /** @type {XMLHttpRequest} */ (event.target);\n        // status will be 0 for file:// urls\n        if (!client.status || client.status >= 200 && client.status < 300) {\n            var response = void 0;\n            try {\n                response = /** @type {CartoDBLayerInfo} */ (JSON.parse(client.responseText));\n            }\n            catch (err) {\n                this.setState(SourceState.ERROR);\n                return;\n            }\n            this.applyTemplate_(response);\n            this.templateCache_[paramHash] = response;\n            this.setState(SourceState.READY);\n        }\n        else {\n            this.setState(SourceState.ERROR);\n        }\n    };\n    /**\n     * @private\n     * @param {Event} event Event.\n     */\n    CartoDB.prototype.handleInitError_ = function (event) {\n        this.setState(SourceState.ERROR);\n    };\n    /**\n     * Apply the new tile urls returned by carto db\n     * @param {CartoDBLayerInfo} data Result of carto db call.\n     * @private\n     */\n    CartoDB.prototype.applyTemplate_ = function (data) {\n        var tilesUrl = 'https://' + data.cdn_url.https + '/' + this.account_ +\n            '/api/v1/map/' + data.layergroupid + '/{z}/{x}/{y}.png';\n        this.setUrl(tilesUrl);\n    };\n    return CartoDB;\n}(XYZ));\nexport default CartoDB;\n//# sourceMappingURL=CartoDB.js.map"]},"metadata":{},"sourceType":"module"}