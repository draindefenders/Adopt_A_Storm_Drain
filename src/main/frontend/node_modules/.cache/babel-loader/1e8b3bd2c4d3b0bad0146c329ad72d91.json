{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/format/GML3\n */\n\n\nimport { extend } from '../array.js';\nimport { createOrUpdate } from '../extent.js';\nimport { transformExtentWithOptions, transformGeometryWithOptions } from './Feature.js';\nimport GMLBase, { GMLNS } from './GMLBase.js';\nimport { readNonNegativeIntegerString, writeStringTextNode } from './xsd.js';\nimport GeometryLayout from '../geom/GeometryLayout.js';\nimport LineString from '../geom/LineString.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Polygon from '../geom/Polygon.js';\nimport { assign } from '../obj.js';\nimport { get as getProjection } from '../proj.js';\nimport { createElementNS, getAllTextContent, makeArrayPusher, makeChildAppender, makeReplacer, makeSimpleNodeFactory, OBJECT_PROPERTY_NODE_FACTORY, parseNode, pushParseAndPop, pushSerializeAndPop, XML_SCHEMA_INSTANCE_URI } from '../xml.js';\n/**\n * @const\n * @type {string}\n * @private\n */\n\nvar schemaLocation = GMLNS + ' http://schemas.opengis.net/gml/3.1.1/profiles/gmlsfProfile/' + '1.0.0/gmlsf.xsd';\n/**\n * @const\n * @type {Object<string, string>}\n */\n\nvar MULTIGEOMETRY_TO_MEMBER_NODENAME = {\n  'MultiLineString': 'lineStringMember',\n  'MultiCurve': 'curveMember',\n  'MultiPolygon': 'polygonMember',\n  'MultiSurface': 'surfaceMember'\n};\n/**\n * @classdesc\n * Feature format for reading and writing data in the GML format\n * version 3.1.1.\n * Currently only supports GML 3.1.1 Simple Features profile.\n *\n * @api\n */\n\nvar GML3 =\n/** @class */\nfunction (_super) {\n  __extends(GML3, _super);\n  /**\n   * @param {import(\"./GMLBase.js\").Options=} opt_options Optional configuration object.\n   */\n\n\n  function GML3(opt_options) {\n    var _this = this;\n\n    var options =\n    /** @type {import(\"./GMLBase.js\").Options} */\n    opt_options ? opt_options : {};\n    _this = _super.call(this, options) || this;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    _this.surface_ = options.surface !== undefined ? options.surface : false;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    _this.curve_ = options.curve !== undefined ? options.curve : false;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    _this.multiCurve_ = options.multiCurve !== undefined ? options.multiCurve : true;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    _this.multiSurface_ = options.multiSurface !== undefined ? options.multiSurface : true;\n    /**\n     * @inheritDoc\n     */\n\n    _this.schemaLocation = options.schemaLocation ? options.schemaLocation : schemaLocation;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    _this.hasZ = options.hasZ !== undefined ? options.hasZ : false;\n    return _this;\n  }\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   * @return {MultiLineString|undefined} MultiLineString.\n   */\n\n\n  GML3.prototype.readMultiCurve_ = function (node, objectStack) {\n    /** @type {Array<LineString>} */\n    var lineStrings = pushParseAndPop([], this.MULTICURVE_PARSERS_, node, objectStack, this);\n\n    if (lineStrings) {\n      var multiLineString = new MultiLineString(lineStrings);\n      return multiLineString;\n    } else {\n      return undefined;\n    }\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   * @return {MultiPolygon|undefined} MultiPolygon.\n   */\n\n\n  GML3.prototype.readMultiSurface_ = function (node, objectStack) {\n    /** @type {Array<Polygon>} */\n    var polygons = pushParseAndPop([], this.MULTISURFACE_PARSERS_, node, objectStack, this);\n\n    if (polygons) {\n      return new MultiPolygon(polygons);\n    }\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   */\n\n\n  GML3.prototype.curveMemberParser_ = function (node, objectStack) {\n    parseNode(this.CURVEMEMBER_PARSERS_, node, objectStack, this);\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   */\n\n\n  GML3.prototype.surfaceMemberParser_ = function (node, objectStack) {\n    parseNode(this.SURFACEMEMBER_PARSERS_, node, objectStack, this);\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   * @return {Array<(Array<number>)>|undefined} flat coordinates.\n   */\n\n\n  GML3.prototype.readPatch_ = function (node, objectStack) {\n    return pushParseAndPop([null], this.PATCHES_PARSERS_, node, objectStack, this);\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   * @return {Array<number>|undefined} flat coordinates.\n   */\n\n\n  GML3.prototype.readSegment_ = function (node, objectStack) {\n    return pushParseAndPop([null], this.SEGMENTS_PARSERS_, node, objectStack, this);\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   * @return {Array<(Array<number>)>|undefined} flat coordinates.\n   */\n\n\n  GML3.prototype.readPolygonPatch_ = function (node, objectStack) {\n    return pushParseAndPop([null], this.FLAT_LINEAR_RINGS_PARSERS, node, objectStack, this);\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   * @return {Array<number>|undefined} flat coordinates.\n   */\n\n\n  GML3.prototype.readLineStringSegment_ = function (node, objectStack) {\n    return pushParseAndPop([null], this.GEOMETRY_FLAT_COORDINATES_PARSERS, node, objectStack, this);\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   */\n\n\n  GML3.prototype.interiorParser_ = function (node, objectStack) {\n    /** @type {Array<number>|undefined} */\n    var flatLinearRing = pushParseAndPop(undefined, this.RING_PARSERS, node, objectStack, this);\n\n    if (flatLinearRing) {\n      var flatLinearRings =\n      /** @type {Array<Array<number>>} */\n      objectStack[objectStack.length - 1];\n      flatLinearRings.push(flatLinearRing);\n    }\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   */\n\n\n  GML3.prototype.exteriorParser_ = function (node, objectStack) {\n    /** @type {Array<number>|undefined} */\n    var flatLinearRing = pushParseAndPop(undefined, this.RING_PARSERS, node, objectStack, this);\n\n    if (flatLinearRing) {\n      var flatLinearRings =\n      /** @type {Array<Array<number>>} */\n      objectStack[objectStack.length - 1];\n      flatLinearRings[0] = flatLinearRing;\n    }\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   * @return {Polygon|undefined} Polygon.\n   */\n\n\n  GML3.prototype.readSurface_ = function (node, objectStack) {\n    /** @type {Array<Array<number>>} */\n    var flatLinearRings = pushParseAndPop([null], this.SURFACE_PARSERS_, node, objectStack, this);\n\n    if (flatLinearRings && flatLinearRings[0]) {\n      var flatCoordinates = flatLinearRings[0];\n      var ends = [flatCoordinates.length];\n      var i = void 0,\n          ii = void 0;\n\n      for (i = 1, ii = flatLinearRings.length; i < ii; ++i) {\n        extend(flatCoordinates, flatLinearRings[i]);\n        ends.push(flatCoordinates.length);\n      }\n\n      return new Polygon(flatCoordinates, GeometryLayout.XYZ, ends);\n    } else {\n      return undefined;\n    }\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   * @return {LineString|undefined} LineString.\n   */\n\n\n  GML3.prototype.readCurve_ = function (node, objectStack) {\n    /** @type {Array<number>} */\n    var flatCoordinates = pushParseAndPop([null], this.CURVE_PARSERS_, node, objectStack, this);\n\n    if (flatCoordinates) {\n      var lineString = new LineString(flatCoordinates, GeometryLayout.XYZ);\n      return lineString;\n    } else {\n      return undefined;\n    }\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   * @return {import(\"../extent.js\").Extent|undefined} Envelope.\n   */\n\n\n  GML3.prototype.readEnvelope_ = function (node, objectStack) {\n    /** @type {Array<number>} */\n    var flatCoordinates = pushParseAndPop([null], this.ENVELOPE_PARSERS_, node, objectStack, this);\n    return createOrUpdate(flatCoordinates[1][0], flatCoordinates[1][1], flatCoordinates[2][0], flatCoordinates[2][1]);\n  };\n  /**\n   * @param {Node} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   * @return {Array<number>|undefined} Flat coordinates.\n   */\n\n\n  GML3.prototype.readFlatPos_ = function (node, objectStack) {\n    var s = getAllTextContent(node, false);\n    var re = /^\\s*([+\\-]?\\d*\\.?\\d+(?:[eE][+\\-]?\\d+)?)\\s*/;\n    /** @type {Array<number>} */\n\n    var flatCoordinates = [];\n    var m;\n\n    while (m = re.exec(s)) {\n      flatCoordinates.push(parseFloat(m[1]));\n      s = s.substr(m[0].length);\n    }\n\n    if (s !== '') {\n      return undefined;\n    }\n\n    var context = objectStack[0];\n    var containerSrs = context['srsName'];\n    var axisOrientation = 'enu';\n\n    if (containerSrs) {\n      var proj = getProjection(containerSrs);\n      axisOrientation = proj.getAxisOrientation();\n    }\n\n    if (axisOrientation === 'neu') {\n      var i = void 0,\n          ii = void 0;\n\n      for (i = 0, ii = flatCoordinates.length; i < ii; i += 3) {\n        var y = flatCoordinates[i];\n        var x = flatCoordinates[i + 1];\n        flatCoordinates[i] = x;\n        flatCoordinates[i + 1] = y;\n      }\n    }\n\n    var len = flatCoordinates.length;\n\n    if (len == 2) {\n      flatCoordinates.push(0);\n    }\n\n    if (len === 0) {\n      return undefined;\n    }\n\n    return flatCoordinates;\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   * @return {Array<number>|undefined} Flat coordinates.\n   */\n\n\n  GML3.prototype.readFlatPosList_ = function (node, objectStack) {\n    var s = getAllTextContent(node, false).replace(/^\\s*|\\s*$/g, '');\n    var context = objectStack[0];\n    var containerSrs = context['srsName'];\n    var contextDimension = context['srsDimension'];\n    var axisOrientation = 'enu';\n\n    if (containerSrs) {\n      var proj = getProjection(containerSrs);\n      axisOrientation = proj.getAxisOrientation();\n    }\n\n    var coords = s.split(/\\s+/); // The \"dimension\" attribute is from the GML 3.0.1 spec.\n\n    var dim = 2;\n\n    if (node.getAttribute('srsDimension')) {\n      dim = readNonNegativeIntegerString(node.getAttribute('srsDimension'));\n    } else if (node.getAttribute('dimension')) {\n      dim = readNonNegativeIntegerString(node.getAttribute('dimension'));\n    } else if (\n    /** @type {Element} */\n    node.parentNode.getAttribute('srsDimension')) {\n      dim = readNonNegativeIntegerString(\n      /** @type {Element} */\n      node.parentNode.getAttribute('srsDimension'));\n    } else if (contextDimension) {\n      dim = readNonNegativeIntegerString(contextDimension);\n    }\n\n    var x, y, z;\n    var flatCoordinates = [];\n\n    for (var i = 0, ii = coords.length; i < ii; i += dim) {\n      x = parseFloat(coords[i]);\n      y = parseFloat(coords[i + 1]);\n      z = dim === 3 ? parseFloat(coords[i + 2]) : 0;\n\n      if (axisOrientation.substr(0, 2) === 'en') {\n        flatCoordinates.push(x, y, z);\n      } else {\n        flatCoordinates.push(y, x, z);\n      }\n    }\n\n    return flatCoordinates;\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/Point.js\").default} value Point geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n\n\n  GML3.prototype.writePos_ = function (node, value, objectStack) {\n    var context = objectStack[objectStack.length - 1];\n    var hasZ = context['hasZ'];\n    var srsDimension = hasZ ? '3' : '2';\n    node.setAttribute('srsDimension', srsDimension);\n    var srsName = context['srsName'];\n    var axisOrientation = 'enu';\n\n    if (srsName) {\n      axisOrientation = getProjection(srsName).getAxisOrientation();\n    }\n\n    var point = value.getCoordinates();\n    var coords; // only 2d for simple features profile\n\n    if (axisOrientation.substr(0, 2) === 'en') {\n      coords = point[0] + ' ' + point[1];\n    } else {\n      coords = point[1] + ' ' + point[0];\n    }\n\n    if (hasZ) {\n      // For newly created points, Z can be undefined.\n      var z = point[2] || 0;\n      coords += ' ' + z;\n    }\n\n    writeStringTextNode(node, coords);\n  };\n  /**\n   * @param {Array<number>} point Point geometry.\n   * @param {string=} opt_srsName Optional srsName\n   * @param {boolean=} opt_hasZ whether the geometry has a Z coordinate (is 3D) or not.\n   * @return {string} The coords string.\n   * @private\n   */\n\n\n  GML3.prototype.getCoords_ = function (point, opt_srsName, opt_hasZ) {\n    var axisOrientation = 'enu';\n\n    if (opt_srsName) {\n      axisOrientation = getProjection(opt_srsName).getAxisOrientation();\n    }\n\n    var coords = axisOrientation.substr(0, 2) === 'en' ? point[0] + ' ' + point[1] : point[1] + ' ' + point[0];\n\n    if (opt_hasZ) {\n      // For newly created points, Z can be undefined.\n      var z = point[2] || 0;\n      coords += ' ' + z;\n    }\n\n    return coords;\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {LineString|import(\"../geom/LinearRing.js\").default} value Geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n\n\n  GML3.prototype.writePosList_ = function (node, value, objectStack) {\n    var context = objectStack[objectStack.length - 1];\n    var hasZ = context['hasZ'];\n    var srsDimension = hasZ ? '3' : '2';\n    node.setAttribute('srsDimension', srsDimension);\n    var srsName = context['srsName']; // only 2d for simple features profile\n\n    var points = value.getCoordinates();\n    var len = points.length;\n    var parts = new Array(len);\n    var point;\n\n    for (var i = 0; i < len; ++i) {\n      point = points[i];\n      parts[i] = this.getCoords_(point, srsName, hasZ);\n    }\n\n    writeStringTextNode(node, parts.join(' '));\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/Point.js\").default} geometry Point geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n\n\n  GML3.prototype.writePoint_ = function (node, geometry, objectStack) {\n    var context = objectStack[objectStack.length - 1];\n    var srsName = context['srsName'];\n\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n\n    var pos = createElementNS(node.namespaceURI, 'pos');\n    node.appendChild(pos);\n    this.writePos_(pos, geometry, objectStack);\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {Array<*>} objectStack Node stack.\n   */\n\n\n  GML3.prototype.writeEnvelope = function (node, extent, objectStack) {\n    var context = objectStack[objectStack.length - 1];\n    var srsName = context['srsName'];\n\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n\n    var keys = ['lowerCorner', 'upperCorner'];\n    var values = [extent[0] + ' ' + extent[1], extent[2] + ' ' + extent[3]];\n    pushSerializeAndPop(\n    /** @type {import(\"../xml.js\").NodeStackItem} */\n    {\n      node: node\n    }, this.ENVELOPE_SERIALIZERS_, OBJECT_PROPERTY_NODE_FACTORY, values, objectStack, keys, this);\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/LinearRing.js\").default} geometry LinearRing geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n\n\n  GML3.prototype.writeLinearRing_ = function (node, geometry, objectStack) {\n    var context = objectStack[objectStack.length - 1];\n    var srsName = context['srsName'];\n\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n\n    var posList = createElementNS(node.namespaceURI, 'posList');\n    node.appendChild(posList);\n    this.writePosList_(posList, geometry, objectStack);\n  };\n  /**\n   * @param {*} value Value.\n   * @param {Array<*>} objectStack Object stack.\n   * @param {string=} opt_nodeName Node name.\n   * @return {Node} Node.\n   * @private\n   */\n\n\n  GML3.prototype.RING_NODE_FACTORY_ = function (value, objectStack, opt_nodeName) {\n    var context = objectStack[objectStack.length - 1];\n    var parentNode = context.node;\n    var exteriorWritten = context['exteriorWritten'];\n\n    if (exteriorWritten === undefined) {\n      context['exteriorWritten'] = true;\n    }\n\n    return createElementNS(parentNode.namespaceURI, exteriorWritten !== undefined ? 'interior' : 'exterior');\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {Polygon} geometry Polygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n\n\n  GML3.prototype.writeSurfaceOrPolygon_ = function (node, geometry, objectStack) {\n    var context = objectStack[objectStack.length - 1];\n    var hasZ = context['hasZ'];\n    var srsName = context['srsName'];\n\n    if (node.nodeName !== 'PolygonPatch' && srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n\n    if (node.nodeName === 'Polygon' || node.nodeName === 'PolygonPatch') {\n      var rings = geometry.getLinearRings();\n      pushSerializeAndPop({\n        node: node,\n        hasZ: hasZ,\n        srsName: srsName\n      }, this.RING_SERIALIZERS_, this.RING_NODE_FACTORY_, rings, objectStack, undefined, this);\n    } else if (node.nodeName === 'Surface') {\n      var patches = createElementNS(node.namespaceURI, 'patches');\n      node.appendChild(patches);\n      this.writeSurfacePatches_(patches, geometry, objectStack);\n    }\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {LineString} geometry LineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n\n\n  GML3.prototype.writeCurveOrLineString_ = function (node, geometry, objectStack) {\n    var context = objectStack[objectStack.length - 1];\n    var srsName = context['srsName'];\n\n    if (node.nodeName !== 'LineStringSegment' && srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n\n    if (node.nodeName === 'LineString' || node.nodeName === 'LineStringSegment') {\n      var posList = createElementNS(node.namespaceURI, 'posList');\n      node.appendChild(posList);\n      this.writePosList_(posList, geometry, objectStack);\n    } else if (node.nodeName === 'Curve') {\n      var segments = createElementNS(node.namespaceURI, 'segments');\n      node.appendChild(segments);\n      this.writeCurveSegments_(segments, geometry, objectStack);\n    }\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {MultiPolygon} geometry MultiPolygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n\n\n  GML3.prototype.writeMultiSurfaceOrPolygon_ = function (node, geometry, objectStack) {\n    var context = objectStack[objectStack.length - 1];\n    var hasZ = context['hasZ'];\n    var srsName = context['srsName'];\n    var surface = context['surface'];\n\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n\n    var polygons = geometry.getPolygons();\n    pushSerializeAndPop({\n      node: node,\n      hasZ: hasZ,\n      srsName: srsName,\n      surface: surface\n    }, this.SURFACEORPOLYGONMEMBER_SERIALIZERS_, this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_, polygons, objectStack, undefined, this);\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/MultiPoint.js\").default} geometry MultiPoint geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n\n\n  GML3.prototype.writeMultiPoint_ = function (node, geometry, objectStack) {\n    var context = objectStack[objectStack.length - 1];\n    var srsName = context['srsName'];\n    var hasZ = context['hasZ'];\n\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n\n    var points = geometry.getPoints();\n    pushSerializeAndPop({\n      node: node,\n      hasZ: hasZ,\n      srsName: srsName\n    }, this.POINTMEMBER_SERIALIZERS_, makeSimpleNodeFactory('pointMember'), points, objectStack, undefined, this);\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {MultiLineString} geometry MultiLineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n\n\n  GML3.prototype.writeMultiCurveOrLineString_ = function (node, geometry, objectStack) {\n    var context = objectStack[objectStack.length - 1];\n    var hasZ = context['hasZ'];\n    var srsName = context['srsName'];\n    var curve = context['curve'];\n\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n\n    var lines = geometry.getLineStrings();\n    pushSerializeAndPop({\n      node: node,\n      hasZ: hasZ,\n      srsName: srsName,\n      curve: curve\n    }, this.LINESTRINGORCURVEMEMBER_SERIALIZERS_, this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_, lines, objectStack, undefined, this);\n  };\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"../geom/LinearRing.js\").default} ring LinearRing geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n\n\n  GML3.prototype.writeRing_ = function (node, ring, objectStack) {\n    var linearRing = createElementNS(node.namespaceURI, 'LinearRing');\n    node.appendChild(linearRing);\n    this.writeLinearRing_(linearRing, ring, objectStack);\n  };\n  /**\n   * @param {Node} node Node.\n   * @param {Polygon} polygon Polygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n\n\n  GML3.prototype.writeSurfaceOrPolygonMember_ = function (node, polygon, objectStack) {\n    var child = this.GEOMETRY_NODE_FACTORY_(polygon, objectStack);\n\n    if (child) {\n      node.appendChild(child);\n      this.writeSurfaceOrPolygon_(child, polygon, objectStack);\n    }\n  };\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"../geom/Point.js\").default} point Point geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n\n\n  GML3.prototype.writePointMember_ = function (node, point, objectStack) {\n    var child = createElementNS(node.namespaceURI, 'Point');\n    node.appendChild(child);\n    this.writePoint_(child, point, objectStack);\n  };\n  /**\n   * @param {Node} node Node.\n   * @param {LineString} line LineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n\n\n  GML3.prototype.writeLineStringOrCurveMember_ = function (node, line, objectStack) {\n    var child = this.GEOMETRY_NODE_FACTORY_(line, objectStack);\n\n    if (child) {\n      node.appendChild(child);\n      this.writeCurveOrLineString_(child, line, objectStack);\n    }\n  };\n  /**\n   * @param {Node} node Node.\n   * @param {Polygon} polygon Polygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n\n\n  GML3.prototype.writeSurfacePatches_ = function (node, polygon, objectStack) {\n    var child = createElementNS(node.namespaceURI, 'PolygonPatch');\n    node.appendChild(child);\n    this.writeSurfaceOrPolygon_(child, polygon, objectStack);\n  };\n  /**\n   * @param {Node} node Node.\n   * @param {LineString} line LineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n\n\n  GML3.prototype.writeCurveSegments_ = function (node, line, objectStack) {\n    var child = createElementNS(node.namespaceURI, 'LineStringSegment');\n    node.appendChild(child);\n    this.writeCurveOrLineString_(child, line, objectStack);\n  };\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"../geom/Geometry.js\").default|import(\"../extent.js\").Extent} geometry Geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n\n\n  GML3.prototype.writeGeometryElement = function (node, geometry, objectStack) {\n    var context =\n    /** @type {import(\"./Feature.js\").WriteOptions} */\n    objectStack[objectStack.length - 1];\n    var item = assign({}, context);\n    item['node'] = node;\n    var value;\n\n    if (Array.isArray(geometry)) {\n      value = transformExtentWithOptions(\n      /** @type {import(\"../extent.js\").Extent} */\n      geometry, context);\n    } else {\n      value = transformGeometryWithOptions(\n      /** @type {import(\"../geom/Geometry.js\").default} */\n      geometry, true, context);\n    }\n\n    pushSerializeAndPop(\n    /** @type {import(\"../xml.js\").NodeStackItem} */\n    item, this.GEOMETRY_SERIALIZERS_, this.GEOMETRY_NODE_FACTORY_, [value], objectStack, undefined, this);\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {Array<*>} objectStack Node stack.\n   */\n\n\n  GML3.prototype.writeFeatureElement = function (node, feature, objectStack) {\n    var fid = feature.getId();\n\n    if (fid) {\n      node.setAttribute('fid',\n      /** @type {string} */\n      fid);\n    }\n\n    var context =\n    /** @type {Object} */\n    objectStack[objectStack.length - 1];\n    var featureNS = context['featureNS'];\n    var geometryName = feature.getGeometryName();\n\n    if (!context.serializers) {\n      context.serializers = {};\n      context.serializers[featureNS] = {};\n    }\n\n    var properties = feature.getProperties();\n    var keys = [];\n    var values = [];\n\n    for (var key in properties) {\n      var value = properties[key];\n\n      if (value !== null) {\n        keys.push(key);\n        values.push(value);\n\n        if (key == geometryName || typeof\n        /** @type {?} */\n        value.getSimplifiedGeometry === 'function') {\n          if (!(key in context.serializers[featureNS])) {\n            context.serializers[featureNS][key] = makeChildAppender(this.writeGeometryElement, this);\n          }\n        } else {\n          if (!(key in context.serializers[featureNS])) {\n            context.serializers[featureNS][key] = makeChildAppender(writeStringTextNode);\n          }\n        }\n      }\n    }\n\n    var item = assign({}, context);\n    item.node = node;\n    pushSerializeAndPop(\n    /** @type {import(\"../xml.js\").NodeStackItem} */\n    item, context.serializers, makeSimpleNodeFactory(undefined, featureNS), values, objectStack, keys);\n  };\n  /**\n   * @param {Node} node Node.\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n\n\n  GML3.prototype.writeFeatureMembers_ = function (node, features, objectStack) {\n    var context =\n    /** @type {Object} */\n    objectStack[objectStack.length - 1];\n    var featureType = context['featureType'];\n    var featureNS = context['featureNS'];\n    /** @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>} */\n\n    var serializers = {};\n    serializers[featureNS] = {};\n    serializers[featureNS][featureType] = makeChildAppender(this.writeFeatureElement, this);\n    var item = assign({}, context);\n    item.node = node;\n    pushSerializeAndPop(\n    /** @type {import(\"../xml.js\").NodeStackItem} */\n    item, serializers, makeSimpleNodeFactory(featureType, featureNS), features, objectStack);\n  };\n  /**\n   * @const\n   * @param {*} value Value.\n   * @param {Array<*>} objectStack Object stack.\n   * @param {string=} opt_nodeName Node name.\n   * @return {Node|undefined} Node.\n   * @private\n   */\n\n\n  GML3.prototype.MULTIGEOMETRY_MEMBER_NODE_FACTORY_ = function (value, objectStack, opt_nodeName) {\n    var parentNode = objectStack[objectStack.length - 1].node;\n    return createElementNS(this.namespace, MULTIGEOMETRY_TO_MEMBER_NODENAME[parentNode.nodeName]);\n  };\n  /**\n   * @const\n   * @param {*} value Value.\n   * @param {Array<*>} objectStack Object stack.\n   * @param {string=} opt_nodeName Node name.\n   * @return {Element|undefined} Node.\n   * @private\n   */\n\n\n  GML3.prototype.GEOMETRY_NODE_FACTORY_ = function (value, objectStack, opt_nodeName) {\n    var context = objectStack[objectStack.length - 1];\n    var multiSurface = context['multiSurface'];\n    var surface = context['surface'];\n    var curve = context['curve'];\n    var multiCurve = context['multiCurve'];\n    var nodeName;\n\n    if (!Array.isArray(value)) {\n      nodeName =\n      /** @type {import(\"../geom/Geometry.js\").default} */\n      value.getType();\n\n      if (nodeName === 'MultiPolygon' && multiSurface === true) {\n        nodeName = 'MultiSurface';\n      } else if (nodeName === 'Polygon' && surface === true) {\n        nodeName = 'Surface';\n      } else if (nodeName === 'LineString' && curve === true) {\n        nodeName = 'Curve';\n      } else if (nodeName === 'MultiLineString' && multiCurve === true) {\n        nodeName = 'MultiCurve';\n      }\n    } else {\n      nodeName = 'Envelope';\n    }\n\n    return createElementNS(this.namespace, nodeName);\n  };\n  /**\n   * Encode a geometry in GML 3.1.1 Simple Features.\n   *\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions=} opt_options Options.\n   * @return {Node} Node.\n   * @override\n   * @api\n   */\n\n\n  GML3.prototype.writeGeometryNode = function (geometry, opt_options) {\n    opt_options = this.adaptOptions(opt_options);\n    var geom = createElementNS(this.namespace, 'geom');\n    var context = {\n      node: geom,\n      hasZ: this.hasZ,\n      srsName: this.srsName,\n      curve: this.curve_,\n      surface: this.surface_,\n      multiSurface: this.multiSurface_,\n      multiCurve: this.multiCurve_\n    };\n\n    if (opt_options) {\n      assign(context, opt_options);\n    }\n\n    this.writeGeometryElement(geom, geometry, [context]);\n    return geom;\n  };\n  /**\n   * Encode an array of features in the GML 3.1.1 format as an XML node.\n   *\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions=} opt_options Options.\n   * @return {Element} Node.\n   * @override\n   * @api\n   */\n\n\n  GML3.prototype.writeFeaturesNode = function (features, opt_options) {\n    opt_options = this.adaptOptions(opt_options);\n    var node = createElementNS(this.namespace, 'featureMembers');\n    node.setAttributeNS(XML_SCHEMA_INSTANCE_URI, 'xsi:schemaLocation', this.schemaLocation);\n    var context = {\n      srsName: this.srsName,\n      hasZ: this.hasZ,\n      curve: this.curve_,\n      surface: this.surface_,\n      multiSurface: this.multiSurface_,\n      multiCurve: this.multiCurve_,\n      featureNS: this.featureNS,\n      featureType: this.featureType\n    };\n\n    if (opt_options) {\n      assign(context, opt_options);\n    }\n\n    this.writeFeatureMembers_(node, features, [context]);\n    return node;\n  };\n\n  return GML3;\n}(GMLBase);\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @protected\n */\n\n\nGML3.prototype.GEOMETRY_FLAT_COORDINATES_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'pos': makeReplacer(GML3.prototype.readFlatPos_),\n    'posList': makeReplacer(GML3.prototype.readFlatPosList_)\n  }\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @protected\n */\n\nGML3.prototype.FLAT_LINEAR_RINGS_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'interior': GML3.prototype.interiorParser_,\n    'exterior': GML3.prototype.exteriorParser_\n  }\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @protected\n */\n\nGML3.prototype.GEOMETRY_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'Point': makeReplacer(GMLBase.prototype.readPoint),\n    'MultiPoint': makeReplacer(GMLBase.prototype.readMultiPoint),\n    'LineString': makeReplacer(GMLBase.prototype.readLineString),\n    'MultiLineString': makeReplacer(GMLBase.prototype.readMultiLineString),\n    'LinearRing': makeReplacer(GMLBase.prototype.readLinearRing),\n    'Polygon': makeReplacer(GMLBase.prototype.readPolygon),\n    'MultiPolygon': makeReplacer(GMLBase.prototype.readMultiPolygon),\n    'Surface': makeReplacer(GML3.prototype.readSurface_),\n    'MultiSurface': makeReplacer(GML3.prototype.readMultiSurface_),\n    'Curve': makeReplacer(GML3.prototype.readCurve_),\n    'MultiCurve': makeReplacer(GML3.prototype.readMultiCurve_),\n    'Envelope': makeReplacer(GML3.prototype.readEnvelope_)\n  }\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @private\n */\n\nGML3.prototype.MULTICURVE_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'curveMember': makeArrayPusher(GML3.prototype.curveMemberParser_),\n    'curveMembers': makeArrayPusher(GML3.prototype.curveMemberParser_)\n  }\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @private\n */\n\nGML3.prototype.MULTISURFACE_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'surfaceMember': makeArrayPusher(GML3.prototype.surfaceMemberParser_),\n    'surfaceMembers': makeArrayPusher(GML3.prototype.surfaceMemberParser_)\n  }\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @private\n */\n\nGML3.prototype.CURVEMEMBER_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'LineString': makeArrayPusher(GMLBase.prototype.readLineString),\n    'Curve': makeArrayPusher(GML3.prototype.readCurve_)\n  }\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @private\n */\n\nGML3.prototype.SURFACEMEMBER_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'Polygon': makeArrayPusher(GMLBase.prototype.readPolygon),\n    'Surface': makeArrayPusher(GML3.prototype.readSurface_)\n  }\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @private\n */\n\nGML3.prototype.SURFACE_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'patches': makeReplacer(GML3.prototype.readPatch_)\n  }\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @private\n */\n\nGML3.prototype.CURVE_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'segments': makeReplacer(GML3.prototype.readSegment_)\n  }\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @private\n */\n\nGML3.prototype.ENVELOPE_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'lowerCorner': makeArrayPusher(GML3.prototype.readFlatPosList_),\n    'upperCorner': makeArrayPusher(GML3.prototype.readFlatPosList_)\n  }\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @private\n */\n\nGML3.prototype.PATCHES_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'PolygonPatch': makeReplacer(GML3.prototype.readPolygonPatch_)\n  }\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @private\n */\n\nGML3.prototype.SEGMENTS_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'LineStringSegment': makeReplacer(GML3.prototype.readLineStringSegment_)\n  }\n};\n/**\n * Encode an array of features in GML 3.1.1 Simple Features.\n *\n * @function\n * @param {Array<import(\"../Feature.js\").default>} features Features.\n * @param {import(\"./Feature.js\").WriteOptions=} opt_options Options.\n * @return {string} Result.\n * @api\n */\n\nGML3.prototype.writeFeatures;\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n * @private\n */\n\nGML3.prototype.RING_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'exterior': makeChildAppender(GML3.prototype.writeRing_),\n    'interior': makeChildAppender(GML3.prototype.writeRing_)\n  }\n};\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n * @private\n */\n\nGML3.prototype.ENVELOPE_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'lowerCorner': makeChildAppender(writeStringTextNode),\n    'upperCorner': makeChildAppender(writeStringTextNode)\n  }\n};\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n * @private\n */\n\nGML3.prototype.SURFACEORPOLYGONMEMBER_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'surfaceMember': makeChildAppender(GML3.prototype.writeSurfaceOrPolygonMember_),\n    'polygonMember': makeChildAppender(GML3.prototype.writeSurfaceOrPolygonMember_)\n  }\n};\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n * @private\n */\n\nGML3.prototype.POINTMEMBER_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'pointMember': makeChildAppender(GML3.prototype.writePointMember_)\n  }\n};\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n * @private\n */\n\nGML3.prototype.LINESTRINGORCURVEMEMBER_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'lineStringMember': makeChildAppender(GML3.prototype.writeLineStringOrCurveMember_),\n    'curveMember': makeChildAppender(GML3.prototype.writeLineStringOrCurveMember_)\n  }\n};\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n * @private\n */\n\nGML3.prototype.GEOMETRY_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'Curve': makeChildAppender(GML3.prototype.writeCurveOrLineString_),\n    'MultiCurve': makeChildAppender(GML3.prototype.writeMultiCurveOrLineString_),\n    'Point': makeChildAppender(GML3.prototype.writePoint_),\n    'MultiPoint': makeChildAppender(GML3.prototype.writeMultiPoint_),\n    'LineString': makeChildAppender(GML3.prototype.writeCurveOrLineString_),\n    'MultiLineString': makeChildAppender(GML3.prototype.writeMultiCurveOrLineString_),\n    'LinearRing': makeChildAppender(GML3.prototype.writeLinearRing_),\n    'Polygon': makeChildAppender(GML3.prototype.writeSurfaceOrPolygon_),\n    'MultiPolygon': makeChildAppender(GML3.prototype.writeMultiSurfaceOrPolygon_),\n    'Surface': makeChildAppender(GML3.prototype.writeSurfaceOrPolygon_),\n    'MultiSurface': makeChildAppender(GML3.prototype.writeMultiSurfaceOrPolygon_),\n    'Envelope': makeChildAppender(GML3.prototype.writeEnvelope)\n  }\n};\nexport default GML3;","map":{"version":3,"sources":["../src/format/GML3.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/format/GML3\n */\nimport { extend } from '../array.js';\nimport { createOrUpdate } from '../extent.js';\nimport { transformExtentWithOptions, transformGeometryWithOptions } from './Feature.js';\nimport GMLBase, { GMLNS } from './GMLBase.js';\nimport { readNonNegativeIntegerString, writeStringTextNode } from './xsd.js';\nimport GeometryLayout from '../geom/GeometryLayout.js';\nimport LineString from '../geom/LineString.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Polygon from '../geom/Polygon.js';\nimport { assign } from '../obj.js';\nimport { get as getProjection } from '../proj.js';\nimport { createElementNS, getAllTextContent, makeArrayPusher, makeChildAppender, makeReplacer, makeSimpleNodeFactory, OBJECT_PROPERTY_NODE_FACTORY, parseNode, pushParseAndPop, pushSerializeAndPop, XML_SCHEMA_INSTANCE_URI } from '../xml.js';\n/**\n * @const\n * @type {string}\n * @private\n */\nvar schemaLocation = GMLNS +\n    ' http://schemas.opengis.net/gml/3.1.1/profiles/gmlsfProfile/' +\n    '1.0.0/gmlsf.xsd';\n/**\n * @const\n * @type {Object<string, string>}\n */\nvar MULTIGEOMETRY_TO_MEMBER_NODENAME = {\n    'MultiLineString': 'lineStringMember',\n    'MultiCurve': 'curveMember',\n    'MultiPolygon': 'polygonMember',\n    'MultiSurface': 'surfaceMember'\n};\n/**\n * @classdesc\n * Feature format for reading and writing data in the GML format\n * version 3.1.1.\n * Currently only supports GML 3.1.1 Simple Features profile.\n *\n * @api\n */\nvar GML3 = /** @class */ (function (_super) {\n    __extends(GML3, _super);\n    /**\n     * @param {import(\"./GMLBase.js\").Options=} opt_options Optional configuration object.\n     */\n    function GML3(opt_options) {\n        var _this = this;\n        var options = /** @type {import(\"./GMLBase.js\").Options} */ (opt_options ? opt_options : {});\n        _this = _super.call(this, options) || this;\n        /**\n         * @private\n         * @type {boolean}\n         */\n        _this.surface_ = options.surface !== undefined ? options.surface : false;\n        /**\n         * @private\n         * @type {boolean}\n         */\n        _this.curve_ = options.curve !== undefined ? options.curve : false;\n        /**\n         * @private\n         * @type {boolean}\n         */\n        _this.multiCurve_ = options.multiCurve !== undefined ?\n            options.multiCurve : true;\n        /**\n         * @private\n         * @type {boolean}\n         */\n        _this.multiSurface_ = options.multiSurface !== undefined ?\n            options.multiSurface : true;\n        /**\n         * @inheritDoc\n         */\n        _this.schemaLocation = options.schemaLocation ?\n            options.schemaLocation : schemaLocation;\n        /**\n         * @private\n         * @type {boolean}\n         */\n        _this.hasZ = options.hasZ !== undefined ?\n            options.hasZ : false;\n        return _this;\n    }\n    /**\n     * @param {Element} node Node.\n     * @param {Array<*>} objectStack Object stack.\n     * @private\n     * @return {MultiLineString|undefined} MultiLineString.\n     */\n    GML3.prototype.readMultiCurve_ = function (node, objectStack) {\n        /** @type {Array<LineString>} */\n        var lineStrings = pushParseAndPop([], this.MULTICURVE_PARSERS_, node, objectStack, this);\n        if (lineStrings) {\n            var multiLineString = new MultiLineString(lineStrings);\n            return multiLineString;\n        }\n        else {\n            return undefined;\n        }\n    };\n    /**\n     * @param {Element} node Node.\n     * @param {Array<*>} objectStack Object stack.\n     * @private\n     * @return {MultiPolygon|undefined} MultiPolygon.\n     */\n    GML3.prototype.readMultiSurface_ = function (node, objectStack) {\n        /** @type {Array<Polygon>} */\n        var polygons = pushParseAndPop([], this.MULTISURFACE_PARSERS_, node, objectStack, this);\n        if (polygons) {\n            return new MultiPolygon(polygons);\n        }\n    };\n    /**\n     * @param {Element} node Node.\n     * @param {Array<*>} objectStack Object stack.\n     * @private\n     */\n    GML3.prototype.curveMemberParser_ = function (node, objectStack) {\n        parseNode(this.CURVEMEMBER_PARSERS_, node, objectStack, this);\n    };\n    /**\n     * @param {Element} node Node.\n     * @param {Array<*>} objectStack Object stack.\n     * @private\n     */\n    GML3.prototype.surfaceMemberParser_ = function (node, objectStack) {\n        parseNode(this.SURFACEMEMBER_PARSERS_, node, objectStack, this);\n    };\n    /**\n     * @param {Element} node Node.\n     * @param {Array<*>} objectStack Object stack.\n     * @private\n     * @return {Array<(Array<number>)>|undefined} flat coordinates.\n     */\n    GML3.prototype.readPatch_ = function (node, objectStack) {\n        return pushParseAndPop([null], this.PATCHES_PARSERS_, node, objectStack, this);\n    };\n    /**\n     * @param {Element} node Node.\n     * @param {Array<*>} objectStack Object stack.\n     * @private\n     * @return {Array<number>|undefined} flat coordinates.\n     */\n    GML3.prototype.readSegment_ = function (node, objectStack) {\n        return pushParseAndPop([null], this.SEGMENTS_PARSERS_, node, objectStack, this);\n    };\n    /**\n     * @param {Element} node Node.\n     * @param {Array<*>} objectStack Object stack.\n     * @private\n     * @return {Array<(Array<number>)>|undefined} flat coordinates.\n     */\n    GML3.prototype.readPolygonPatch_ = function (node, objectStack) {\n        return pushParseAndPop([null], this.FLAT_LINEAR_RINGS_PARSERS, node, objectStack, this);\n    };\n    /**\n     * @param {Element} node Node.\n     * @param {Array<*>} objectStack Object stack.\n     * @private\n     * @return {Array<number>|undefined} flat coordinates.\n     */\n    GML3.prototype.readLineStringSegment_ = function (node, objectStack) {\n        return pushParseAndPop([null], this.GEOMETRY_FLAT_COORDINATES_PARSERS, node, objectStack, this);\n    };\n    /**\n     * @param {Element} node Node.\n     * @param {Array<*>} objectStack Object stack.\n     * @private\n     */\n    GML3.prototype.interiorParser_ = function (node, objectStack) {\n        /** @type {Array<number>|undefined} */\n        var flatLinearRing = pushParseAndPop(undefined, this.RING_PARSERS, node, objectStack, this);\n        if (flatLinearRing) {\n            var flatLinearRings = /** @type {Array<Array<number>>} */ (objectStack[objectStack.length - 1]);\n            flatLinearRings.push(flatLinearRing);\n        }\n    };\n    /**\n     * @param {Element} node Node.\n     * @param {Array<*>} objectStack Object stack.\n     * @private\n     */\n    GML3.prototype.exteriorParser_ = function (node, objectStack) {\n        /** @type {Array<number>|undefined} */\n        var flatLinearRing = pushParseAndPop(undefined, this.RING_PARSERS, node, objectStack, this);\n        if (flatLinearRing) {\n            var flatLinearRings = /** @type {Array<Array<number>>} */ (objectStack[objectStack.length - 1]);\n            flatLinearRings[0] = flatLinearRing;\n        }\n    };\n    /**\n     * @param {Element} node Node.\n     * @param {Array<*>} objectStack Object stack.\n     * @private\n     * @return {Polygon|undefined} Polygon.\n     */\n    GML3.prototype.readSurface_ = function (node, objectStack) {\n        /** @type {Array<Array<number>>} */\n        var flatLinearRings = pushParseAndPop([null], this.SURFACE_PARSERS_, node, objectStack, this);\n        if (flatLinearRings && flatLinearRings[0]) {\n            var flatCoordinates = flatLinearRings[0];\n            var ends = [flatCoordinates.length];\n            var i = void 0, ii = void 0;\n            for (i = 1, ii = flatLinearRings.length; i < ii; ++i) {\n                extend(flatCoordinates, flatLinearRings[i]);\n                ends.push(flatCoordinates.length);\n            }\n            return new Polygon(flatCoordinates, GeometryLayout.XYZ, ends);\n        }\n        else {\n            return undefined;\n        }\n    };\n    /**\n     * @param {Element} node Node.\n     * @param {Array<*>} objectStack Object stack.\n     * @private\n     * @return {LineString|undefined} LineString.\n     */\n    GML3.prototype.readCurve_ = function (node, objectStack) {\n        /** @type {Array<number>} */\n        var flatCoordinates = pushParseAndPop([null], this.CURVE_PARSERS_, node, objectStack, this);\n        if (flatCoordinates) {\n            var lineString = new LineString(flatCoordinates, GeometryLayout.XYZ);\n            return lineString;\n        }\n        else {\n            return undefined;\n        }\n    };\n    /**\n     * @param {Element} node Node.\n     * @param {Array<*>} objectStack Object stack.\n     * @private\n     * @return {import(\"../extent.js\").Extent|undefined} Envelope.\n     */\n    GML3.prototype.readEnvelope_ = function (node, objectStack) {\n        /** @type {Array<number>} */\n        var flatCoordinates = pushParseAndPop([null], this.ENVELOPE_PARSERS_, node, objectStack, this);\n        return createOrUpdate(flatCoordinates[1][0], flatCoordinates[1][1], flatCoordinates[2][0], flatCoordinates[2][1]);\n    };\n    /**\n     * @param {Node} node Node.\n     * @param {Array<*>} objectStack Object stack.\n     * @private\n     * @return {Array<number>|undefined} Flat coordinates.\n     */\n    GML3.prototype.readFlatPos_ = function (node, objectStack) {\n        var s = getAllTextContent(node, false);\n        var re = /^\\s*([+\\-]?\\d*\\.?\\d+(?:[eE][+\\-]?\\d+)?)\\s*/;\n        /** @type {Array<number>} */\n        var flatCoordinates = [];\n        var m;\n        while ((m = re.exec(s))) {\n            flatCoordinates.push(parseFloat(m[1]));\n            s = s.substr(m[0].length);\n        }\n        if (s !== '') {\n            return undefined;\n        }\n        var context = objectStack[0];\n        var containerSrs = context['srsName'];\n        var axisOrientation = 'enu';\n        if (containerSrs) {\n            var proj = getProjection(containerSrs);\n            axisOrientation = proj.getAxisOrientation();\n        }\n        if (axisOrientation === 'neu') {\n            var i = void 0, ii = void 0;\n            for (i = 0, ii = flatCoordinates.length; i < ii; i += 3) {\n                var y = flatCoordinates[i];\n                var x = flatCoordinates[i + 1];\n                flatCoordinates[i] = x;\n                flatCoordinates[i + 1] = y;\n            }\n        }\n        var len = flatCoordinates.length;\n        if (len == 2) {\n            flatCoordinates.push(0);\n        }\n        if (len === 0) {\n            return undefined;\n        }\n        return flatCoordinates;\n    };\n    /**\n     * @param {Element} node Node.\n     * @param {Array<*>} objectStack Object stack.\n     * @private\n     * @return {Array<number>|undefined} Flat coordinates.\n     */\n    GML3.prototype.readFlatPosList_ = function (node, objectStack) {\n        var s = getAllTextContent(node, false).replace(/^\\s*|\\s*$/g, '');\n        var context = objectStack[0];\n        var containerSrs = context['srsName'];\n        var contextDimension = context['srsDimension'];\n        var axisOrientation = 'enu';\n        if (containerSrs) {\n            var proj = getProjection(containerSrs);\n            axisOrientation = proj.getAxisOrientation();\n        }\n        var coords = s.split(/\\s+/);\n        // The \"dimension\" attribute is from the GML 3.0.1 spec.\n        var dim = 2;\n        if (node.getAttribute('srsDimension')) {\n            dim = readNonNegativeIntegerString(node.getAttribute('srsDimension'));\n        }\n        else if (node.getAttribute('dimension')) {\n            dim = readNonNegativeIntegerString(node.getAttribute('dimension'));\n        }\n        else if ( /** @type {Element} */(node.parentNode).getAttribute('srsDimension')) {\n            dim = readNonNegativeIntegerString(\n            /** @type {Element} */ (node.parentNode).getAttribute('srsDimension'));\n        }\n        else if (contextDimension) {\n            dim = readNonNegativeIntegerString(contextDimension);\n        }\n        var x, y, z;\n        var flatCoordinates = [];\n        for (var i = 0, ii = coords.length; i < ii; i += dim) {\n            x = parseFloat(coords[i]);\n            y = parseFloat(coords[i + 1]);\n            z = (dim === 3) ? parseFloat(coords[i + 2]) : 0;\n            if (axisOrientation.substr(0, 2) === 'en') {\n                flatCoordinates.push(x, y, z);\n            }\n            else {\n                flatCoordinates.push(y, x, z);\n            }\n        }\n        return flatCoordinates;\n    };\n    /**\n     * @param {Element} node Node.\n     * @param {import(\"../geom/Point.js\").default} value Point geometry.\n     * @param {Array<*>} objectStack Node stack.\n     * @private\n     */\n    GML3.prototype.writePos_ = function (node, value, objectStack) {\n        var context = objectStack[objectStack.length - 1];\n        var hasZ = context['hasZ'];\n        var srsDimension = hasZ ? '3' : '2';\n        node.setAttribute('srsDimension', srsDimension);\n        var srsName = context['srsName'];\n        var axisOrientation = 'enu';\n        if (srsName) {\n            axisOrientation = getProjection(srsName).getAxisOrientation();\n        }\n        var point = value.getCoordinates();\n        var coords;\n        // only 2d for simple features profile\n        if (axisOrientation.substr(0, 2) === 'en') {\n            coords = (point[0] + ' ' + point[1]);\n        }\n        else {\n            coords = (point[1] + ' ' + point[0]);\n        }\n        if (hasZ) {\n            // For newly created points, Z can be undefined.\n            var z = point[2] || 0;\n            coords += ' ' + z;\n        }\n        writeStringTextNode(node, coords);\n    };\n    /**\n     * @param {Array<number>} point Point geometry.\n     * @param {string=} opt_srsName Optional srsName\n     * @param {boolean=} opt_hasZ whether the geometry has a Z coordinate (is 3D) or not.\n     * @return {string} The coords string.\n     * @private\n     */\n    GML3.prototype.getCoords_ = function (point, opt_srsName, opt_hasZ) {\n        var axisOrientation = 'enu';\n        if (opt_srsName) {\n            axisOrientation = getProjection(opt_srsName).getAxisOrientation();\n        }\n        var coords = ((axisOrientation.substr(0, 2) === 'en') ?\n            point[0] + ' ' + point[1] :\n            point[1] + ' ' + point[0]);\n        if (opt_hasZ) {\n            // For newly created points, Z can be undefined.\n            var z = point[2] || 0;\n            coords += ' ' + z;\n        }\n        return coords;\n    };\n    /**\n     * @param {Element} node Node.\n     * @param {LineString|import(\"../geom/LinearRing.js\").default} value Geometry.\n     * @param {Array<*>} objectStack Node stack.\n     * @private\n     */\n    GML3.prototype.writePosList_ = function (node, value, objectStack) {\n        var context = objectStack[objectStack.length - 1];\n        var hasZ = context['hasZ'];\n        var srsDimension = hasZ ? '3' : '2';\n        node.setAttribute('srsDimension', srsDimension);\n        var srsName = context['srsName'];\n        // only 2d for simple features profile\n        var points = value.getCoordinates();\n        var len = points.length;\n        var parts = new Array(len);\n        var point;\n        for (var i = 0; i < len; ++i) {\n            point = points[i];\n            parts[i] = this.getCoords_(point, srsName, hasZ);\n        }\n        writeStringTextNode(node, parts.join(' '));\n    };\n    /**\n     * @param {Element} node Node.\n     * @param {import(\"../geom/Point.js\").default} geometry Point geometry.\n     * @param {Array<*>} objectStack Node stack.\n     * @private\n     */\n    GML3.prototype.writePoint_ = function (node, geometry, objectStack) {\n        var context = objectStack[objectStack.length - 1];\n        var srsName = context['srsName'];\n        if (srsName) {\n            node.setAttribute('srsName', srsName);\n        }\n        var pos = createElementNS(node.namespaceURI, 'pos');\n        node.appendChild(pos);\n        this.writePos_(pos, geometry, objectStack);\n    };\n    /**\n     * @param {Element} node Node.\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @param {Array<*>} objectStack Node stack.\n     */\n    GML3.prototype.writeEnvelope = function (node, extent, objectStack) {\n        var context = objectStack[objectStack.length - 1];\n        var srsName = context['srsName'];\n        if (srsName) {\n            node.setAttribute('srsName', srsName);\n        }\n        var keys = ['lowerCorner', 'upperCorner'];\n        var values = [extent[0] + ' ' + extent[1], extent[2] + ' ' + extent[3]];\n        pushSerializeAndPop(/** @type {import(\"../xml.js\").NodeStackItem} */ ({ node: node }), this.ENVELOPE_SERIALIZERS_, OBJECT_PROPERTY_NODE_FACTORY, values, objectStack, keys, this);\n    };\n    /**\n     * @param {Element} node Node.\n     * @param {import(\"../geom/LinearRing.js\").default} geometry LinearRing geometry.\n     * @param {Array<*>} objectStack Node stack.\n     * @private\n     */\n    GML3.prototype.writeLinearRing_ = function (node, geometry, objectStack) {\n        var context = objectStack[objectStack.length - 1];\n        var srsName = context['srsName'];\n        if (srsName) {\n            node.setAttribute('srsName', srsName);\n        }\n        var posList = createElementNS(node.namespaceURI, 'posList');\n        node.appendChild(posList);\n        this.writePosList_(posList, geometry, objectStack);\n    };\n    /**\n     * @param {*} value Value.\n     * @param {Array<*>} objectStack Object stack.\n     * @param {string=} opt_nodeName Node name.\n     * @return {Node} Node.\n     * @private\n     */\n    GML3.prototype.RING_NODE_FACTORY_ = function (value, objectStack, opt_nodeName) {\n        var context = objectStack[objectStack.length - 1];\n        var parentNode = context.node;\n        var exteriorWritten = context['exteriorWritten'];\n        if (exteriorWritten === undefined) {\n            context['exteriorWritten'] = true;\n        }\n        return createElementNS(parentNode.namespaceURI, exteriorWritten !== undefined ? 'interior' : 'exterior');\n    };\n    /**\n     * @param {Element} node Node.\n     * @param {Polygon} geometry Polygon geometry.\n     * @param {Array<*>} objectStack Node stack.\n     * @private\n     */\n    GML3.prototype.writeSurfaceOrPolygon_ = function (node, geometry, objectStack) {\n        var context = objectStack[objectStack.length - 1];\n        var hasZ = context['hasZ'];\n        var srsName = context['srsName'];\n        if (node.nodeName !== 'PolygonPatch' && srsName) {\n            node.setAttribute('srsName', srsName);\n        }\n        if (node.nodeName === 'Polygon' || node.nodeName === 'PolygonPatch') {\n            var rings = geometry.getLinearRings();\n            pushSerializeAndPop({ node: node, hasZ: hasZ, srsName: srsName }, this.RING_SERIALIZERS_, this.RING_NODE_FACTORY_, rings, objectStack, undefined, this);\n        }\n        else if (node.nodeName === 'Surface') {\n            var patches = createElementNS(node.namespaceURI, 'patches');\n            node.appendChild(patches);\n            this.writeSurfacePatches_(patches, geometry, objectStack);\n        }\n    };\n    /**\n     * @param {Element} node Node.\n     * @param {LineString} geometry LineString geometry.\n     * @param {Array<*>} objectStack Node stack.\n     * @private\n     */\n    GML3.prototype.writeCurveOrLineString_ = function (node, geometry, objectStack) {\n        var context = objectStack[objectStack.length - 1];\n        var srsName = context['srsName'];\n        if (node.nodeName !== 'LineStringSegment' && srsName) {\n            node.setAttribute('srsName', srsName);\n        }\n        if (node.nodeName === 'LineString' ||\n            node.nodeName === 'LineStringSegment') {\n            var posList = createElementNS(node.namespaceURI, 'posList');\n            node.appendChild(posList);\n            this.writePosList_(posList, geometry, objectStack);\n        }\n        else if (node.nodeName === 'Curve') {\n            var segments = createElementNS(node.namespaceURI, 'segments');\n            node.appendChild(segments);\n            this.writeCurveSegments_(segments, geometry, objectStack);\n        }\n    };\n    /**\n     * @param {Element} node Node.\n     * @param {MultiPolygon} geometry MultiPolygon geometry.\n     * @param {Array<*>} objectStack Node stack.\n     * @private\n     */\n    GML3.prototype.writeMultiSurfaceOrPolygon_ = function (node, geometry, objectStack) {\n        var context = objectStack[objectStack.length - 1];\n        var hasZ = context['hasZ'];\n        var srsName = context['srsName'];\n        var surface = context['surface'];\n        if (srsName) {\n            node.setAttribute('srsName', srsName);\n        }\n        var polygons = geometry.getPolygons();\n        pushSerializeAndPop({ node: node, hasZ: hasZ, srsName: srsName, surface: surface }, this.SURFACEORPOLYGONMEMBER_SERIALIZERS_, this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_, polygons, objectStack, undefined, this);\n    };\n    /**\n     * @param {Element} node Node.\n     * @param {import(\"../geom/MultiPoint.js\").default} geometry MultiPoint geometry.\n     * @param {Array<*>} objectStack Node stack.\n     * @private\n     */\n    GML3.prototype.writeMultiPoint_ = function (node, geometry, objectStack) {\n        var context = objectStack[objectStack.length - 1];\n        var srsName = context['srsName'];\n        var hasZ = context['hasZ'];\n        if (srsName) {\n            node.setAttribute('srsName', srsName);\n        }\n        var points = geometry.getPoints();\n        pushSerializeAndPop({ node: node, hasZ: hasZ, srsName: srsName }, this.POINTMEMBER_SERIALIZERS_, makeSimpleNodeFactory('pointMember'), points, objectStack, undefined, this);\n    };\n    /**\n     * @param {Element} node Node.\n     * @param {MultiLineString} geometry MultiLineString geometry.\n     * @param {Array<*>} objectStack Node stack.\n     * @private\n     */\n    GML3.prototype.writeMultiCurveOrLineString_ = function (node, geometry, objectStack) {\n        var context = objectStack[objectStack.length - 1];\n        var hasZ = context['hasZ'];\n        var srsName = context['srsName'];\n        var curve = context['curve'];\n        if (srsName) {\n            node.setAttribute('srsName', srsName);\n        }\n        var lines = geometry.getLineStrings();\n        pushSerializeAndPop({ node: node, hasZ: hasZ, srsName: srsName, curve: curve }, this.LINESTRINGORCURVEMEMBER_SERIALIZERS_, this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_, lines, objectStack, undefined, this);\n    };\n    /**\n     * @param {Node} node Node.\n     * @param {import(\"../geom/LinearRing.js\").default} ring LinearRing geometry.\n     * @param {Array<*>} objectStack Node stack.\n     * @private\n     */\n    GML3.prototype.writeRing_ = function (node, ring, objectStack) {\n        var linearRing = createElementNS(node.namespaceURI, 'LinearRing');\n        node.appendChild(linearRing);\n        this.writeLinearRing_(linearRing, ring, objectStack);\n    };\n    /**\n     * @param {Node} node Node.\n     * @param {Polygon} polygon Polygon geometry.\n     * @param {Array<*>} objectStack Node stack.\n     * @private\n     */\n    GML3.prototype.writeSurfaceOrPolygonMember_ = function (node, polygon, objectStack) {\n        var child = this.GEOMETRY_NODE_FACTORY_(polygon, objectStack);\n        if (child) {\n            node.appendChild(child);\n            this.writeSurfaceOrPolygon_(child, polygon, objectStack);\n        }\n    };\n    /**\n     * @param {Node} node Node.\n     * @param {import(\"../geom/Point.js\").default} point Point geometry.\n     * @param {Array<*>} objectStack Node stack.\n     * @private\n     */\n    GML3.prototype.writePointMember_ = function (node, point, objectStack) {\n        var child = createElementNS(node.namespaceURI, 'Point');\n        node.appendChild(child);\n        this.writePoint_(child, point, objectStack);\n    };\n    /**\n     * @param {Node} node Node.\n     * @param {LineString} line LineString geometry.\n     * @param {Array<*>} objectStack Node stack.\n     * @private\n     */\n    GML3.prototype.writeLineStringOrCurveMember_ = function (node, line, objectStack) {\n        var child = this.GEOMETRY_NODE_FACTORY_(line, objectStack);\n        if (child) {\n            node.appendChild(child);\n            this.writeCurveOrLineString_(child, line, objectStack);\n        }\n    };\n    /**\n     * @param {Node} node Node.\n     * @param {Polygon} polygon Polygon geometry.\n     * @param {Array<*>} objectStack Node stack.\n     * @private\n     */\n    GML3.prototype.writeSurfacePatches_ = function (node, polygon, objectStack) {\n        var child = createElementNS(node.namespaceURI, 'PolygonPatch');\n        node.appendChild(child);\n        this.writeSurfaceOrPolygon_(child, polygon, objectStack);\n    };\n    /**\n     * @param {Node} node Node.\n     * @param {LineString} line LineString geometry.\n     * @param {Array<*>} objectStack Node stack.\n     * @private\n     */\n    GML3.prototype.writeCurveSegments_ = function (node, line, objectStack) {\n        var child = createElementNS(node.namespaceURI, 'LineStringSegment');\n        node.appendChild(child);\n        this.writeCurveOrLineString_(child, line, objectStack);\n    };\n    /**\n     * @param {Node} node Node.\n     * @param {import(\"../geom/Geometry.js\").default|import(\"../extent.js\").Extent} geometry Geometry.\n     * @param {Array<*>} objectStack Node stack.\n     */\n    GML3.prototype.writeGeometryElement = function (node, geometry, objectStack) {\n        var context = /** @type {import(\"./Feature.js\").WriteOptions} */ (objectStack[objectStack.length - 1]);\n        var item = assign({}, context);\n        item['node'] = node;\n        var value;\n        if (Array.isArray(geometry)) {\n            value = transformExtentWithOptions(/** @type {import(\"../extent.js\").Extent} */ (geometry), context);\n        }\n        else {\n            value = transformGeometryWithOptions(/** @type {import(\"../geom/Geometry.js\").default} */ (geometry), true, context);\n        }\n        pushSerializeAndPop(/** @type {import(\"../xml.js\").NodeStackItem} */ (item), this.GEOMETRY_SERIALIZERS_, this.GEOMETRY_NODE_FACTORY_, [value], objectStack, undefined, this);\n    };\n    /**\n     * @param {Element} node Node.\n     * @param {import(\"../Feature.js\").default} feature Feature.\n     * @param {Array<*>} objectStack Node stack.\n     */\n    GML3.prototype.writeFeatureElement = function (node, feature, objectStack) {\n        var fid = feature.getId();\n        if (fid) {\n            node.setAttribute('fid', /** @type {string} */ (fid));\n        }\n        var context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n        var featureNS = context['featureNS'];\n        var geometryName = feature.getGeometryName();\n        if (!context.serializers) {\n            context.serializers = {};\n            context.serializers[featureNS] = {};\n        }\n        var properties = feature.getProperties();\n        var keys = [];\n        var values = [];\n        for (var key in properties) {\n            var value = properties[key];\n            if (value !== null) {\n                keys.push(key);\n                values.push(value);\n                if (key == geometryName || typeof /** @type {?} */ (value).getSimplifiedGeometry === 'function') {\n                    if (!(key in context.serializers[featureNS])) {\n                        context.serializers[featureNS][key] = makeChildAppender(this.writeGeometryElement, this);\n                    }\n                }\n                else {\n                    if (!(key in context.serializers[featureNS])) {\n                        context.serializers[featureNS][key] = makeChildAppender(writeStringTextNode);\n                    }\n                }\n            }\n        }\n        var item = assign({}, context);\n        item.node = node;\n        pushSerializeAndPop(/** @type {import(\"../xml.js\").NodeStackItem} */ (item), context.serializers, makeSimpleNodeFactory(undefined, featureNS), values, objectStack, keys);\n    };\n    /**\n     * @param {Node} node Node.\n     * @param {Array<import(\"../Feature.js\").default>} features Features.\n     * @param {Array<*>} objectStack Node stack.\n     * @private\n     */\n    GML3.prototype.writeFeatureMembers_ = function (node, features, objectStack) {\n        var context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n        var featureType = context['featureType'];\n        var featureNS = context['featureNS'];\n        /** @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>} */\n        var serializers = {};\n        serializers[featureNS] = {};\n        serializers[featureNS][featureType] = makeChildAppender(this.writeFeatureElement, this);\n        var item = assign({}, context);\n        item.node = node;\n        pushSerializeAndPop(/** @type {import(\"../xml.js\").NodeStackItem} */ (item), serializers, makeSimpleNodeFactory(featureType, featureNS), features, objectStack);\n    };\n    /**\n     * @const\n     * @param {*} value Value.\n     * @param {Array<*>} objectStack Object stack.\n     * @param {string=} opt_nodeName Node name.\n     * @return {Node|undefined} Node.\n     * @private\n     */\n    GML3.prototype.MULTIGEOMETRY_MEMBER_NODE_FACTORY_ = function (value, objectStack, opt_nodeName) {\n        var parentNode = objectStack[objectStack.length - 1].node;\n        return createElementNS(this.namespace, MULTIGEOMETRY_TO_MEMBER_NODENAME[parentNode.nodeName]);\n    };\n    /**\n     * @const\n     * @param {*} value Value.\n     * @param {Array<*>} objectStack Object stack.\n     * @param {string=} opt_nodeName Node name.\n     * @return {Element|undefined} Node.\n     * @private\n     */\n    GML3.prototype.GEOMETRY_NODE_FACTORY_ = function (value, objectStack, opt_nodeName) {\n        var context = objectStack[objectStack.length - 1];\n        var multiSurface = context['multiSurface'];\n        var surface = context['surface'];\n        var curve = context['curve'];\n        var multiCurve = context['multiCurve'];\n        var nodeName;\n        if (!Array.isArray(value)) {\n            nodeName = /** @type {import(\"../geom/Geometry.js\").default} */ (value).getType();\n            if (nodeName === 'MultiPolygon' && multiSurface === true) {\n                nodeName = 'MultiSurface';\n            }\n            else if (nodeName === 'Polygon' && surface === true) {\n                nodeName = 'Surface';\n            }\n            else if (nodeName === 'LineString' && curve === true) {\n                nodeName = 'Curve';\n            }\n            else if (nodeName === 'MultiLineString' && multiCurve === true) {\n                nodeName = 'MultiCurve';\n            }\n        }\n        else {\n            nodeName = 'Envelope';\n        }\n        return createElementNS(this.namespace, nodeName);\n    };\n    /**\n     * Encode a geometry in GML 3.1.1 Simple Features.\n     *\n     * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n     * @param {import(\"./Feature.js\").WriteOptions=} opt_options Options.\n     * @return {Node} Node.\n     * @override\n     * @api\n     */\n    GML3.prototype.writeGeometryNode = function (geometry, opt_options) {\n        opt_options = this.adaptOptions(opt_options);\n        var geom = createElementNS(this.namespace, 'geom');\n        var context = { node: geom, hasZ: this.hasZ, srsName: this.srsName,\n            curve: this.curve_, surface: this.surface_,\n            multiSurface: this.multiSurface_, multiCurve: this.multiCurve_ };\n        if (opt_options) {\n            assign(context, opt_options);\n        }\n        this.writeGeometryElement(geom, geometry, [context]);\n        return geom;\n    };\n    /**\n     * Encode an array of features in the GML 3.1.1 format as an XML node.\n     *\n     * @param {Array<import(\"../Feature.js\").default>} features Features.\n     * @param {import(\"./Feature.js\").WriteOptions=} opt_options Options.\n     * @return {Element} Node.\n     * @override\n     * @api\n     */\n    GML3.prototype.writeFeaturesNode = function (features, opt_options) {\n        opt_options = this.adaptOptions(opt_options);\n        var node = createElementNS(this.namespace, 'featureMembers');\n        node.setAttributeNS(XML_SCHEMA_INSTANCE_URI, 'xsi:schemaLocation', this.schemaLocation);\n        var context = {\n            srsName: this.srsName,\n            hasZ: this.hasZ,\n            curve: this.curve_,\n            surface: this.surface_,\n            multiSurface: this.multiSurface_,\n            multiCurve: this.multiCurve_,\n            featureNS: this.featureNS,\n            featureType: this.featureType\n        };\n        if (opt_options) {\n            assign(context, opt_options);\n        }\n        this.writeFeatureMembers_(node, features, [context]);\n        return node;\n    };\n    return GML3;\n}(GMLBase));\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @protected\n */\nGML3.prototype.GEOMETRY_FLAT_COORDINATES_PARSERS = {\n    'http://www.opengis.net/gml': {\n        'pos': makeReplacer(GML3.prototype.readFlatPos_),\n        'posList': makeReplacer(GML3.prototype.readFlatPosList_)\n    }\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @protected\n */\nGML3.prototype.FLAT_LINEAR_RINGS_PARSERS = {\n    'http://www.opengis.net/gml': {\n        'interior': GML3.prototype.interiorParser_,\n        'exterior': GML3.prototype.exteriorParser_\n    }\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @protected\n */\nGML3.prototype.GEOMETRY_PARSERS = {\n    'http://www.opengis.net/gml': {\n        'Point': makeReplacer(GMLBase.prototype.readPoint),\n        'MultiPoint': makeReplacer(GMLBase.prototype.readMultiPoint),\n        'LineString': makeReplacer(GMLBase.prototype.readLineString),\n        'MultiLineString': makeReplacer(GMLBase.prototype.readMultiLineString),\n        'LinearRing': makeReplacer(GMLBase.prototype.readLinearRing),\n        'Polygon': makeReplacer(GMLBase.prototype.readPolygon),\n        'MultiPolygon': makeReplacer(GMLBase.prototype.readMultiPolygon),\n        'Surface': makeReplacer(GML3.prototype.readSurface_),\n        'MultiSurface': makeReplacer(GML3.prototype.readMultiSurface_),\n        'Curve': makeReplacer(GML3.prototype.readCurve_),\n        'MultiCurve': makeReplacer(GML3.prototype.readMultiCurve_),\n        'Envelope': makeReplacer(GML3.prototype.readEnvelope_)\n    }\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @private\n */\nGML3.prototype.MULTICURVE_PARSERS_ = {\n    'http://www.opengis.net/gml': {\n        'curveMember': makeArrayPusher(GML3.prototype.curveMemberParser_),\n        'curveMembers': makeArrayPusher(GML3.prototype.curveMemberParser_)\n    }\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @private\n */\nGML3.prototype.MULTISURFACE_PARSERS_ = {\n    'http://www.opengis.net/gml': {\n        'surfaceMember': makeArrayPusher(GML3.prototype.surfaceMemberParser_),\n        'surfaceMembers': makeArrayPusher(GML3.prototype.surfaceMemberParser_)\n    }\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @private\n */\nGML3.prototype.CURVEMEMBER_PARSERS_ = {\n    'http://www.opengis.net/gml': {\n        'LineString': makeArrayPusher(GMLBase.prototype.readLineString),\n        'Curve': makeArrayPusher(GML3.prototype.readCurve_)\n    }\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @private\n */\nGML3.prototype.SURFACEMEMBER_PARSERS_ = {\n    'http://www.opengis.net/gml': {\n        'Polygon': makeArrayPusher(GMLBase.prototype.readPolygon),\n        'Surface': makeArrayPusher(GML3.prototype.readSurface_)\n    }\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @private\n */\nGML3.prototype.SURFACE_PARSERS_ = {\n    'http://www.opengis.net/gml': {\n        'patches': makeReplacer(GML3.prototype.readPatch_)\n    }\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @private\n */\nGML3.prototype.CURVE_PARSERS_ = {\n    'http://www.opengis.net/gml': {\n        'segments': makeReplacer(GML3.prototype.readSegment_)\n    }\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @private\n */\nGML3.prototype.ENVELOPE_PARSERS_ = {\n    'http://www.opengis.net/gml': {\n        'lowerCorner': makeArrayPusher(GML3.prototype.readFlatPosList_),\n        'upperCorner': makeArrayPusher(GML3.prototype.readFlatPosList_)\n    }\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @private\n */\nGML3.prototype.PATCHES_PARSERS_ = {\n    'http://www.opengis.net/gml': {\n        'PolygonPatch': makeReplacer(GML3.prototype.readPolygonPatch_)\n    }\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @private\n */\nGML3.prototype.SEGMENTS_PARSERS_ = {\n    'http://www.opengis.net/gml': {\n        'LineStringSegment': makeReplacer(GML3.prototype.readLineStringSegment_)\n    }\n};\n/**\n * Encode an array of features in GML 3.1.1 Simple Features.\n *\n * @function\n * @param {Array<import(\"../Feature.js\").default>} features Features.\n * @param {import(\"./Feature.js\").WriteOptions=} opt_options Options.\n * @return {string} Result.\n * @api\n */\nGML3.prototype.writeFeatures;\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n * @private\n */\nGML3.prototype.RING_SERIALIZERS_ = {\n    'http://www.opengis.net/gml': {\n        'exterior': makeChildAppender(GML3.prototype.writeRing_),\n        'interior': makeChildAppender(GML3.prototype.writeRing_)\n    }\n};\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n * @private\n */\nGML3.prototype.ENVELOPE_SERIALIZERS_ = {\n    'http://www.opengis.net/gml': {\n        'lowerCorner': makeChildAppender(writeStringTextNode),\n        'upperCorner': makeChildAppender(writeStringTextNode)\n    }\n};\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n * @private\n */\nGML3.prototype.SURFACEORPOLYGONMEMBER_SERIALIZERS_ = {\n    'http://www.opengis.net/gml': {\n        'surfaceMember': makeChildAppender(GML3.prototype.writeSurfaceOrPolygonMember_),\n        'polygonMember': makeChildAppender(GML3.prototype.writeSurfaceOrPolygonMember_)\n    }\n};\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n * @private\n */\nGML3.prototype.POINTMEMBER_SERIALIZERS_ = {\n    'http://www.opengis.net/gml': {\n        'pointMember': makeChildAppender(GML3.prototype.writePointMember_)\n    }\n};\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n * @private\n */\nGML3.prototype.LINESTRINGORCURVEMEMBER_SERIALIZERS_ = {\n    'http://www.opengis.net/gml': {\n        'lineStringMember': makeChildAppender(GML3.prototype.writeLineStringOrCurveMember_),\n        'curveMember': makeChildAppender(GML3.prototype.writeLineStringOrCurveMember_)\n    }\n};\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n * @private\n */\nGML3.prototype.GEOMETRY_SERIALIZERS_ = {\n    'http://www.opengis.net/gml': {\n        'Curve': makeChildAppender(GML3.prototype.writeCurveOrLineString_),\n        'MultiCurve': makeChildAppender(GML3.prototype.writeMultiCurveOrLineString_),\n        'Point': makeChildAppender(GML3.prototype.writePoint_),\n        'MultiPoint': makeChildAppender(GML3.prototype.writeMultiPoint_),\n        'LineString': makeChildAppender(GML3.prototype.writeCurveOrLineString_),\n        'MultiLineString': makeChildAppender(GML3.prototype.writeMultiCurveOrLineString_),\n        'LinearRing': makeChildAppender(GML3.prototype.writeLinearRing_),\n        'Polygon': makeChildAppender(GML3.prototype.writeSurfaceOrPolygon_),\n        'MultiPolygon': makeChildAppender(GML3.prototype.writeMultiSurfaceOrPolygon_),\n        'Surface': makeChildAppender(GML3.prototype.writeSurfaceOrPolygon_),\n        'MultiSurface': makeChildAppender(GML3.prototype.writeMultiSurfaceOrPolygon_),\n        'Envelope': makeChildAppender(GML3.prototype.writeEnvelope)\n    }\n};\nexport default GML3;\n//# sourceMappingURL=GML3.js.map"]},"metadata":{},"sourceType":"module"}