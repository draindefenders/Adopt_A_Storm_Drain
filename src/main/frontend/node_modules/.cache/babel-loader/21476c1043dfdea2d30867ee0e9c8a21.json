{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/control/OverviewMap\n */\n\n\nimport PluggableMap from '../PluggableMap.js';\nimport CompositeMapRenderer from '../renderer/Composite.js';\nimport MapEventType from '../MapEventType.js';\nimport MapProperty from '../MapProperty.js';\nimport { getChangeEventType } from '../Object.js';\nimport ObjectEventType from '../ObjectEventType.js';\nimport Overlay from '../Overlay.js';\nimport OverlayPositioning from '../OverlayPositioning.js';\nimport ViewProperty from '../ViewProperty.js';\nimport Control from './Control.js';\nimport { fromExtent as polygonFromExtent } from '../geom/Polygon.js';\nimport { CLASS_CONTROL, CLASS_UNSELECTABLE, CLASS_COLLAPSED } from '../css.js';\nimport { replaceNode } from '../dom.js';\nimport { listen, listenOnce } from '../events.js';\nimport EventType from '../events/EventType.js';\nimport { containsExtent, equals as equalsExtent, getBottomRight, getTopLeft, scaleFromCenter } from '../extent.js';\n/**\n * Maximum width and/or height extent ratio that determines when the overview\n * map should be zoomed out.\n * @type {number}\n */\n\nvar MAX_RATIO = 0.75;\n/**\n * Minimum width and/or height extent ratio that determines when the overview\n * map should be zoomed in.\n * @type {number}\n */\n\nvar MIN_RATIO = 0.1;\n\nvar ControlledMap =\n/** @class */\nfunction (_super) {\n  __extends(ControlledMap, _super);\n\n  function ControlledMap() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  ControlledMap.prototype.createRenderer = function () {\n    return new CompositeMapRenderer(this);\n  };\n\n  return ControlledMap;\n}(PluggableMap);\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-overviewmap'] CSS class name.\n * @property {boolean} [collapsed=true] Whether the control should start collapsed or not (expanded).\n * @property {string|HTMLElement} [collapseLabel='«'] Text label to use for the\n * expanded overviewmap button. Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {boolean} [collapsible=true] Whether the control can be collapsed or not.\n * @property {string|HTMLElement} [label='»'] Text label to use for the collapsed\n * overviewmap button. Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {Array<import(\"../layer/Layer.js\").default>|import(\"../Collection.js\").default<import(\"../layer/Layer.js\").default>} [layers]\n * Layers for the overview map.\n * @property {function(import(\"../MapEvent.js\").default)} [render] Function called when the control\n * should be re-rendered. This is called in a `requestAnimationFrame` callback.\n * @property {boolean} [rotateWithView=false] Whether the control view should rotate with the main map view.\n * @property {HTMLElement|string} [target] Specify a target if you want the control\n * to be rendered outside of the map's viewport.\n * @property {string} [tipLabel='Overview map'] Text label to use for the button tip.\n * @property {import(\"../View.js\").default} [view] Custom view for the overview map. If not provided,\n * a default view with an EPSG:3857 projection will be used.\n */\n\n/**\n * Create a new control with a map acting as an overview map for another\n * defined map.\n *\n * @api\n */\n\n\nvar OverviewMap =\n/** @class */\nfunction (_super) {\n  __extends(OverviewMap, _super);\n  /**\n   * @param {Options=} opt_options OverviewMap options.\n   */\n\n\n  function OverviewMap(opt_options) {\n    var _this = this;\n\n    var options = opt_options ? opt_options : {};\n    _this = _super.call(this, {\n      element: document.createElement('div'),\n      render: options.render || render,\n      target: options.target\n    }) || this;\n    /**\n     * @private\n     */\n\n    _this.boundHandleRotationChanged_ = _this.handleRotationChanged_.bind(_this);\n    /**\n     * @type {boolean}\n     * @private\n     */\n\n    _this.collapsed_ = options.collapsed !== undefined ? options.collapsed : true;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    _this.collapsible_ = options.collapsible !== undefined ? options.collapsible : true;\n\n    if (!_this.collapsible_) {\n      _this.collapsed_ = false;\n    }\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n\n    _this.rotateWithView_ = options.rotateWithView !== undefined ? options.rotateWithView : false;\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent|undefined}\n     */\n\n    _this.viewExtent_ = undefined;\n    var className = options.className !== undefined ? options.className : 'ol-overviewmap';\n    var tipLabel = options.tipLabel !== undefined ? options.tipLabel : 'Overview map';\n    var collapseLabel = options.collapseLabel !== undefined ? options.collapseLabel : '\\u00AB';\n\n    if (typeof collapseLabel === 'string') {\n      /**\n       * @private\n       * @type {HTMLElement}\n       */\n      _this.collapseLabel_ = document.createElement('span');\n      _this.collapseLabel_.textContent = collapseLabel;\n    } else {\n      _this.collapseLabel_ = collapseLabel;\n    }\n\n    var label = options.label !== undefined ? options.label : '\\u00BB';\n\n    if (typeof label === 'string') {\n      /**\n       * @private\n       * @type {HTMLElement}\n       */\n      _this.label_ = document.createElement('span');\n      _this.label_.textContent = label;\n    } else {\n      _this.label_ = label;\n    }\n\n    var activeLabel = _this.collapsible_ && !_this.collapsed_ ? _this.collapseLabel_ : _this.label_;\n    var button = document.createElement('button');\n    button.setAttribute('type', 'button');\n    button.title = tipLabel;\n    button.appendChild(activeLabel);\n    button.addEventListener(EventType.CLICK, _this.handleClick_.bind(_this), false);\n    /**\n     * @type {HTMLElement}\n     * @private\n     */\n\n    _this.ovmapDiv_ = document.createElement('div');\n    _this.ovmapDiv_.className = 'ol-overviewmap-map';\n    /**\n     * @type {ControlledMap}\n     * @private\n     */\n\n    _this.ovmap_ = new ControlledMap({\n      view: options.view\n    });\n    var ovmap = _this.ovmap_;\n\n    if (options.layers) {\n      options.layers.forEach(function (layer) {\n        ovmap.addLayer(layer);\n      });\n    }\n\n    var box = document.createElement('div');\n    box.className = 'ol-overviewmap-box';\n    box.style.boxSizing = 'border-box';\n    /**\n     * @type {import(\"../Overlay.js\").default}\n     * @private\n     */\n\n    _this.boxOverlay_ = new Overlay({\n      position: [0, 0],\n      positioning: OverlayPositioning.CENTER_CENTER,\n      element: box\n    });\n\n    _this.ovmap_.addOverlay(_this.boxOverlay_);\n\n    var cssClasses = className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL + (_this.collapsed_ && _this.collapsible_ ? ' ' + CLASS_COLLAPSED : '') + (_this.collapsible_ ? '' : ' ol-uncollapsible');\n    var element = _this.element;\n    element.className = cssClasses;\n    element.appendChild(_this.ovmapDiv_);\n    element.appendChild(button);\n    /* Interactive map */\n\n    var scope = _this;\n    var overlay = _this.boxOverlay_;\n\n    var overlayBox = _this.boxOverlay_.getElement();\n    /* Functions definition */\n\n\n    var computeDesiredMousePosition = function (mousePosition) {\n      return {\n        clientX: mousePosition.clientX,\n        clientY: mousePosition.clientY\n      };\n    };\n\n    var move = function (event) {\n      var position =\n      /** @type {?} */\n      computeDesiredMousePosition(event);\n      var coordinates = ovmap.getEventCoordinateInternal(\n      /** @type {Event} */\n      position);\n      overlay.setPosition(coordinates);\n    };\n\n    var endMoving = function (event) {\n      var coordinates = ovmap.getEventCoordinateInternal(event);\n      scope.getMap().getView().setCenterInternal(coordinates);\n      window.removeEventListener('mousemove', move);\n      window.removeEventListener('mouseup', endMoving);\n    };\n    /* Binding */\n\n\n    overlayBox.addEventListener('mousedown', function () {\n      window.addEventListener('mousemove', move);\n      window.addEventListener('mouseup', endMoving);\n    });\n    return _this;\n  }\n  /**\n   * @inheritDoc\n   * @api\n   */\n\n\n  OverviewMap.prototype.setMap = function (map) {\n    var oldMap = this.getMap();\n\n    if (map === oldMap) {\n      return;\n    }\n\n    if (oldMap) {\n      var oldView = oldMap.getView();\n\n      if (oldView) {\n        this.unbindView_(oldView);\n      }\n\n      this.ovmap_.setTarget(null);\n    }\n\n    _super.prototype.setMap.call(this, map);\n\n    if (map) {\n      this.ovmap_.setTarget(this.ovmapDiv_);\n      this.listenerKeys.push(listen(map, ObjectEventType.PROPERTYCHANGE, this.handleMapPropertyChange_, this));\n      var view = map.getView();\n\n      if (view) {\n        this.bindView_(view);\n\n        if (view.isDef()) {\n          this.ovmap_.updateSize();\n          this.resetExtent_();\n        }\n      }\n    }\n  };\n  /**\n   * Handle map property changes.  This only deals with changes to the map's view.\n   * @param {import(\"../Object.js\").ObjectEvent} event The propertychange event.\n   * @private\n   */\n\n\n  OverviewMap.prototype.handleMapPropertyChange_ = function (event) {\n    if (event.key === MapProperty.VIEW) {\n      var oldView =\n      /** @type {import(\"../View.js\").default} */\n      event.oldValue;\n\n      if (oldView) {\n        this.unbindView_(oldView);\n      }\n\n      var newView = this.getMap().getView();\n      this.bindView_(newView);\n    }\n  };\n  /**\n   * Register listeners for view property changes.\n   * @param {import(\"../View.js\").default} view The view.\n   * @private\n   */\n\n\n  OverviewMap.prototype.bindView_ = function (view) {\n    view.addEventListener(getChangeEventType(ViewProperty.ROTATION), this.boundHandleRotationChanged_); // Sync once with the new view\n\n    this.handleRotationChanged_();\n  };\n  /**\n   * Unregister listeners for view property changes.\n   * @param {import(\"../View.js\").default} view The view.\n   * @private\n   */\n\n\n  OverviewMap.prototype.unbindView_ = function (view) {\n    view.removeEventListener(getChangeEventType(ViewProperty.ROTATION), this.boundHandleRotationChanged_);\n  };\n  /**\n   * Handle rotation changes to the main map.\n   * @private\n   */\n\n\n  OverviewMap.prototype.handleRotationChanged_ = function () {\n    if (this.rotateWithView_) {\n      this.ovmap_.getView().setRotation(this.getMap().getView().getRotation());\n    }\n  };\n  /**\n   * Reset the overview map extent if the box size (width or\n   * height) is less than the size of the overview map size times minRatio\n   * or is greater than the size of the overview size times maxRatio.\n   *\n   * If the map extent was not reset, the box size can fits in the defined\n   * ratio sizes. This method then checks if is contained inside the overview\n   * map current extent. If not, recenter the overview map to the current\n   * main map center location.\n   * @private\n   */\n\n\n  OverviewMap.prototype.validateExtent_ = function () {\n    var map = this.getMap();\n    var ovmap = this.ovmap_;\n\n    if (!map.isRendered() || !ovmap.isRendered()) {\n      return;\n    }\n\n    var mapSize =\n    /** @type {import(\"../size.js\").Size} */\n    map.getSize();\n    var view = map.getView();\n    var extent = view.calculateExtentInternal(mapSize);\n\n    if (this.viewExtent_ && equalsExtent(extent, this.viewExtent_)) {\n      // repeats of the same extent may indicate constraint conflicts leading to an endless cycle\n      return;\n    }\n\n    this.viewExtent_ = extent;\n    var ovmapSize =\n    /** @type {import(\"../size.js\").Size} */\n    ovmap.getSize();\n    var ovview = ovmap.getView();\n    var ovextent = ovview.calculateExtentInternal(ovmapSize);\n    var topLeftPixel = ovmap.getPixelFromCoordinateInternal(getTopLeft(extent));\n    var bottomRightPixel = ovmap.getPixelFromCoordinateInternal(getBottomRight(extent));\n    var boxWidth = Math.abs(topLeftPixel[0] - bottomRightPixel[0]);\n    var boxHeight = Math.abs(topLeftPixel[1] - bottomRightPixel[1]);\n    var ovmapWidth = ovmapSize[0];\n    var ovmapHeight = ovmapSize[1];\n\n    if (boxWidth < ovmapWidth * MIN_RATIO || boxHeight < ovmapHeight * MIN_RATIO || boxWidth > ovmapWidth * MAX_RATIO || boxHeight > ovmapHeight * MAX_RATIO) {\n      this.resetExtent_();\n    } else if (!containsExtent(ovextent, extent)) {\n      this.recenter_();\n    }\n  };\n  /**\n   * Reset the overview map extent to half calculated min and max ratio times\n   * the extent of the main map.\n   * @private\n   */\n\n\n  OverviewMap.prototype.resetExtent_ = function () {\n    if (MAX_RATIO === 0 || MIN_RATIO === 0) {\n      return;\n    }\n\n    var map = this.getMap();\n    var ovmap = this.ovmap_;\n    var mapSize =\n    /** @type {import(\"../size.js\").Size} */\n    map.getSize();\n    var view = map.getView();\n    var extent = view.calculateExtentInternal(mapSize);\n    var ovview = ovmap.getView(); // get how many times the current map overview could hold different\n    // box sizes using the min and max ratio, pick the step in the middle used\n    // to calculate the extent from the main map to set it to the overview map,\n\n    var steps = Math.log(MAX_RATIO / MIN_RATIO) / Math.LN2;\n    var ratio = 1 / (Math.pow(2, steps / 2) * MIN_RATIO);\n    scaleFromCenter(extent, ratio);\n    ovview.fitInternal(polygonFromExtent(extent));\n  };\n  /**\n   * Set the center of the overview map to the map center without changing its\n   * resolution.\n   * @private\n   */\n\n\n  OverviewMap.prototype.recenter_ = function () {\n    var map = this.getMap();\n    var ovmap = this.ovmap_;\n    var view = map.getView();\n    var ovview = ovmap.getView();\n    ovview.setCenterInternal(view.getCenterInternal());\n  };\n  /**\n   * Update the box using the main map extent\n   * @private\n   */\n\n\n  OverviewMap.prototype.updateBox_ = function () {\n    var map = this.getMap();\n    var ovmap = this.ovmap_;\n\n    if (!map.isRendered() || !ovmap.isRendered()) {\n      return;\n    }\n\n    var mapSize =\n    /** @type {import(\"../size.js\").Size} */\n    map.getSize();\n    var view = map.getView();\n    var ovview = ovmap.getView();\n    var rotation = this.rotateWithView_ ? 0 : -view.getRotation();\n    var overlay = this.boxOverlay_;\n    var box = this.boxOverlay_.getElement();\n    var center = view.getCenterInternal();\n    var resolution = view.getResolution();\n    var ovresolution = ovview.getResolution();\n    var width = mapSize[0] * resolution / ovresolution;\n    var height = mapSize[1] * resolution / ovresolution; // set position using center coordinates\n\n    overlay.setPosition(center); // set box size calculated from map extent size and overview map resolution\n\n    if (box) {\n      box.style.width = width + 'px';\n      box.style.height = height + 'px';\n      var transform = 'rotate(' + rotation + 'rad)';\n      box.style.transform = transform;\n    }\n  };\n  /**\n   * @param {MouseEvent} event The event to handle\n   * @private\n   */\n\n\n  OverviewMap.prototype.handleClick_ = function (event) {\n    event.preventDefault();\n    this.handleToggle_();\n  };\n  /**\n   * @private\n   */\n\n\n  OverviewMap.prototype.handleToggle_ = function () {\n    this.element.classList.toggle(CLASS_COLLAPSED);\n\n    if (this.collapsed_) {\n      replaceNode(this.collapseLabel_, this.label_);\n    } else {\n      replaceNode(this.label_, this.collapseLabel_);\n    }\n\n    this.collapsed_ = !this.collapsed_; // manage overview map if it had not been rendered before and control\n    // is expanded\n\n    var ovmap = this.ovmap_;\n\n    if (!this.collapsed_) {\n      if (ovmap.isRendered()) {\n        this.viewExtent_ = undefined;\n        ovmap.render();\n        return;\n      }\n\n      ovmap.updateSize();\n      this.resetExtent_();\n      listenOnce(ovmap, MapEventType.POSTRENDER, function (event) {\n        this.updateBox_();\n      }, this);\n    }\n  };\n  /**\n   * Return `true` if the overview map is collapsible, `false` otherwise.\n   * @return {boolean} True if the widget is collapsible.\n   * @api\n   */\n\n\n  OverviewMap.prototype.getCollapsible = function () {\n    return this.collapsible_;\n  };\n  /**\n   * Set whether the overview map should be collapsible.\n   * @param {boolean} collapsible True if the widget is collapsible.\n   * @api\n   */\n\n\n  OverviewMap.prototype.setCollapsible = function (collapsible) {\n    if (this.collapsible_ === collapsible) {\n      return;\n    }\n\n    this.collapsible_ = collapsible;\n    this.element.classList.toggle('ol-uncollapsible');\n\n    if (!collapsible && this.collapsed_) {\n      this.handleToggle_();\n    }\n  };\n  /**\n   * Collapse or expand the overview map according to the passed parameter. Will\n   * not do anything if the overview map isn't collapsible or if the current\n   * collapsed state is already the one requested.\n   * @param {boolean} collapsed True if the widget is collapsed.\n   * @api\n   */\n\n\n  OverviewMap.prototype.setCollapsed = function (collapsed) {\n    if (!this.collapsible_ || this.collapsed_ === collapsed) {\n      return;\n    }\n\n    this.handleToggle_();\n  };\n  /**\n   * Determine if the overview map is collapsed.\n   * @return {boolean} The overview map is collapsed.\n   * @api\n   */\n\n\n  OverviewMap.prototype.getCollapsed = function () {\n    return this.collapsed_;\n  };\n  /**\n   * Return `true` if the overview map view can rotate, `false` otherwise.\n   * @return {boolean} True if the control view can rotate.\n   * @api\n   */\n\n\n  OverviewMap.prototype.getRotateWithView = function () {\n    return this.rotateWithView_;\n  };\n  /**\n   * Set whether the overview map view should rotate with the main map view.\n   * @param {boolean} rotateWithView True if the control view should rotate.\n   * @api\n   */\n\n\n  OverviewMap.prototype.setRotateWithView = function (rotateWithView) {\n    if (this.rotateWithView_ === rotateWithView) {\n      return;\n    }\n\n    this.rotateWithView_ = rotateWithView;\n\n    if (this.getMap().getView().getRotation() !== 0) {\n      if (this.rotateWithView_) {\n        this.handleRotationChanged_();\n      } else {\n        this.ovmap_.getView().setRotation(0);\n      }\n\n      this.viewExtent_ = undefined;\n      this.validateExtent_();\n      this.updateBox_();\n    }\n  };\n  /**\n   * Return the overview map.\n   * @return {import(\"../PluggableMap.js\").default} Overview map.\n   * @api\n   */\n\n\n  OverviewMap.prototype.getOverviewMap = function () {\n    return this.ovmap_;\n  };\n\n  return OverviewMap;\n}(Control);\n/**\n * Update the overview map element.\n * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n * @this {OverviewMap}\n */\n\n\nexport function render(mapEvent) {\n  this.validateExtent_();\n  this.updateBox_();\n}\nexport default OverviewMap;","map":{"version":3,"sources":["../src/control/OverviewMap.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/control/OverviewMap\n */\nimport PluggableMap from '../PluggableMap.js';\nimport CompositeMapRenderer from '../renderer/Composite.js';\nimport MapEventType from '../MapEventType.js';\nimport MapProperty from '../MapProperty.js';\nimport { getChangeEventType } from '../Object.js';\nimport ObjectEventType from '../ObjectEventType.js';\nimport Overlay from '../Overlay.js';\nimport OverlayPositioning from '../OverlayPositioning.js';\nimport ViewProperty from '../ViewProperty.js';\nimport Control from './Control.js';\nimport { fromExtent as polygonFromExtent } from '../geom/Polygon.js';\nimport { CLASS_CONTROL, CLASS_UNSELECTABLE, CLASS_COLLAPSED } from '../css.js';\nimport { replaceNode } from '../dom.js';\nimport { listen, listenOnce } from '../events.js';\nimport EventType from '../events/EventType.js';\nimport { containsExtent, equals as equalsExtent, getBottomRight, getTopLeft, scaleFromCenter } from '../extent.js';\n/**\n * Maximum width and/or height extent ratio that determines when the overview\n * map should be zoomed out.\n * @type {number}\n */\nvar MAX_RATIO = 0.75;\n/**\n * Minimum width and/or height extent ratio that determines when the overview\n * map should be zoomed in.\n * @type {number}\n */\nvar MIN_RATIO = 0.1;\nvar ControlledMap = /** @class */ (function (_super) {\n    __extends(ControlledMap, _super);\n    function ControlledMap() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    ControlledMap.prototype.createRenderer = function () {\n        return new CompositeMapRenderer(this);\n    };\n    return ControlledMap;\n}(PluggableMap));\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-overviewmap'] CSS class name.\n * @property {boolean} [collapsed=true] Whether the control should start collapsed or not (expanded).\n * @property {string|HTMLElement} [collapseLabel='«'] Text label to use for the\n * expanded overviewmap button. Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {boolean} [collapsible=true] Whether the control can be collapsed or not.\n * @property {string|HTMLElement} [label='»'] Text label to use for the collapsed\n * overviewmap button. Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {Array<import(\"../layer/Layer.js\").default>|import(\"../Collection.js\").default<import(\"../layer/Layer.js\").default>} [layers]\n * Layers for the overview map.\n * @property {function(import(\"../MapEvent.js\").default)} [render] Function called when the control\n * should be re-rendered. This is called in a `requestAnimationFrame` callback.\n * @property {boolean} [rotateWithView=false] Whether the control view should rotate with the main map view.\n * @property {HTMLElement|string} [target] Specify a target if you want the control\n * to be rendered outside of the map's viewport.\n * @property {string} [tipLabel='Overview map'] Text label to use for the button tip.\n * @property {import(\"../View.js\").default} [view] Custom view for the overview map. If not provided,\n * a default view with an EPSG:3857 projection will be used.\n */\n/**\n * Create a new control with a map acting as an overview map for another\n * defined map.\n *\n * @api\n */\nvar OverviewMap = /** @class */ (function (_super) {\n    __extends(OverviewMap, _super);\n    /**\n     * @param {Options=} opt_options OverviewMap options.\n     */\n    function OverviewMap(opt_options) {\n        var _this = this;\n        var options = opt_options ? opt_options : {};\n        _this = _super.call(this, {\n            element: document.createElement('div'),\n            render: options.render || render,\n            target: options.target\n        }) || this;\n        /**\n         * @private\n         */\n        _this.boundHandleRotationChanged_ = _this.handleRotationChanged_.bind(_this);\n        /**\n         * @type {boolean}\n         * @private\n         */\n        _this.collapsed_ = options.collapsed !== undefined ? options.collapsed : true;\n        /**\n         * @private\n         * @type {boolean}\n         */\n        _this.collapsible_ = options.collapsible !== undefined ?\n            options.collapsible : true;\n        if (!_this.collapsible_) {\n            _this.collapsed_ = false;\n        }\n        /**\n         * @private\n         * @type {boolean}\n         */\n        _this.rotateWithView_ = options.rotateWithView !== undefined ?\n            options.rotateWithView : false;\n        /**\n         * @private\n         * @type {import(\"../extent.js\").Extent|undefined}\n         */\n        _this.viewExtent_ = undefined;\n        var className = options.className !== undefined ? options.className : 'ol-overviewmap';\n        var tipLabel = options.tipLabel !== undefined ? options.tipLabel : 'Overview map';\n        var collapseLabel = options.collapseLabel !== undefined ? options.collapseLabel : '\\u00AB';\n        if (typeof collapseLabel === 'string') {\n            /**\n             * @private\n             * @type {HTMLElement}\n             */\n            _this.collapseLabel_ = document.createElement('span');\n            _this.collapseLabel_.textContent = collapseLabel;\n        }\n        else {\n            _this.collapseLabel_ = collapseLabel;\n        }\n        var label = options.label !== undefined ? options.label : '\\u00BB';\n        if (typeof label === 'string') {\n            /**\n             * @private\n             * @type {HTMLElement}\n             */\n            _this.label_ = document.createElement('span');\n            _this.label_.textContent = label;\n        }\n        else {\n            _this.label_ = label;\n        }\n        var activeLabel = (_this.collapsible_ && !_this.collapsed_) ?\n            _this.collapseLabel_ : _this.label_;\n        var button = document.createElement('button');\n        button.setAttribute('type', 'button');\n        button.title = tipLabel;\n        button.appendChild(activeLabel);\n        button.addEventListener(EventType.CLICK, _this.handleClick_.bind(_this), false);\n        /**\n         * @type {HTMLElement}\n         * @private\n         */\n        _this.ovmapDiv_ = document.createElement('div');\n        _this.ovmapDiv_.className = 'ol-overviewmap-map';\n        /**\n         * @type {ControlledMap}\n         * @private\n         */\n        _this.ovmap_ = new ControlledMap({\n            view: options.view\n        });\n        var ovmap = _this.ovmap_;\n        if (options.layers) {\n            options.layers.forEach(function (layer) {\n                ovmap.addLayer(layer);\n            });\n        }\n        var box = document.createElement('div');\n        box.className = 'ol-overviewmap-box';\n        box.style.boxSizing = 'border-box';\n        /**\n         * @type {import(\"../Overlay.js\").default}\n         * @private\n         */\n        _this.boxOverlay_ = new Overlay({\n            position: [0, 0],\n            positioning: OverlayPositioning.CENTER_CENTER,\n            element: box\n        });\n        _this.ovmap_.addOverlay(_this.boxOverlay_);\n        var cssClasses = className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL +\n            (_this.collapsed_ && _this.collapsible_ ? ' ' + CLASS_COLLAPSED : '') +\n            (_this.collapsible_ ? '' : ' ol-uncollapsible');\n        var element = _this.element;\n        element.className = cssClasses;\n        element.appendChild(_this.ovmapDiv_);\n        element.appendChild(button);\n        /* Interactive map */\n        var scope = _this;\n        var overlay = _this.boxOverlay_;\n        var overlayBox = _this.boxOverlay_.getElement();\n        /* Functions definition */\n        var computeDesiredMousePosition = function (mousePosition) {\n            return {\n                clientX: mousePosition.clientX,\n                clientY: mousePosition.clientY\n            };\n        };\n        var move = function (event) {\n            var position = /** @type {?} */ (computeDesiredMousePosition(event));\n            var coordinates = ovmap.getEventCoordinateInternal(/** @type {Event} */ (position));\n            overlay.setPosition(coordinates);\n        };\n        var endMoving = function (event) {\n            var coordinates = ovmap.getEventCoordinateInternal(event);\n            scope.getMap().getView().setCenterInternal(coordinates);\n            window.removeEventListener('mousemove', move);\n            window.removeEventListener('mouseup', endMoving);\n        };\n        /* Binding */\n        overlayBox.addEventListener('mousedown', function () {\n            window.addEventListener('mousemove', move);\n            window.addEventListener('mouseup', endMoving);\n        });\n        return _this;\n    }\n    /**\n     * @inheritDoc\n     * @api\n     */\n    OverviewMap.prototype.setMap = function (map) {\n        var oldMap = this.getMap();\n        if (map === oldMap) {\n            return;\n        }\n        if (oldMap) {\n            var oldView = oldMap.getView();\n            if (oldView) {\n                this.unbindView_(oldView);\n            }\n            this.ovmap_.setTarget(null);\n        }\n        _super.prototype.setMap.call(this, map);\n        if (map) {\n            this.ovmap_.setTarget(this.ovmapDiv_);\n            this.listenerKeys.push(listen(map, ObjectEventType.PROPERTYCHANGE, this.handleMapPropertyChange_, this));\n            var view = map.getView();\n            if (view) {\n                this.bindView_(view);\n                if (view.isDef()) {\n                    this.ovmap_.updateSize();\n                    this.resetExtent_();\n                }\n            }\n        }\n    };\n    /**\n     * Handle map property changes.  This only deals with changes to the map's view.\n     * @param {import(\"../Object.js\").ObjectEvent} event The propertychange event.\n     * @private\n     */\n    OverviewMap.prototype.handleMapPropertyChange_ = function (event) {\n        if (event.key === MapProperty.VIEW) {\n            var oldView = /** @type {import(\"../View.js\").default} */ (event.oldValue);\n            if (oldView) {\n                this.unbindView_(oldView);\n            }\n            var newView = this.getMap().getView();\n            this.bindView_(newView);\n        }\n    };\n    /**\n     * Register listeners for view property changes.\n     * @param {import(\"../View.js\").default} view The view.\n     * @private\n     */\n    OverviewMap.prototype.bindView_ = function (view) {\n        view.addEventListener(getChangeEventType(ViewProperty.ROTATION), this.boundHandleRotationChanged_);\n        // Sync once with the new view\n        this.handleRotationChanged_();\n    };\n    /**\n     * Unregister listeners for view property changes.\n     * @param {import(\"../View.js\").default} view The view.\n     * @private\n     */\n    OverviewMap.prototype.unbindView_ = function (view) {\n        view.removeEventListener(getChangeEventType(ViewProperty.ROTATION), this.boundHandleRotationChanged_);\n    };\n    /**\n     * Handle rotation changes to the main map.\n     * @private\n     */\n    OverviewMap.prototype.handleRotationChanged_ = function () {\n        if (this.rotateWithView_) {\n            this.ovmap_.getView().setRotation(this.getMap().getView().getRotation());\n        }\n    };\n    /**\n     * Reset the overview map extent if the box size (width or\n     * height) is less than the size of the overview map size times minRatio\n     * or is greater than the size of the overview size times maxRatio.\n     *\n     * If the map extent was not reset, the box size can fits in the defined\n     * ratio sizes. This method then checks if is contained inside the overview\n     * map current extent. If not, recenter the overview map to the current\n     * main map center location.\n     * @private\n     */\n    OverviewMap.prototype.validateExtent_ = function () {\n        var map = this.getMap();\n        var ovmap = this.ovmap_;\n        if (!map.isRendered() || !ovmap.isRendered()) {\n            return;\n        }\n        var mapSize = /** @type {import(\"../size.js\").Size} */ (map.getSize());\n        var view = map.getView();\n        var extent = view.calculateExtentInternal(mapSize);\n        if (this.viewExtent_ && equalsExtent(extent, this.viewExtent_)) {\n            // repeats of the same extent may indicate constraint conflicts leading to an endless cycle\n            return;\n        }\n        this.viewExtent_ = extent;\n        var ovmapSize = /** @type {import(\"../size.js\").Size} */ (ovmap.getSize());\n        var ovview = ovmap.getView();\n        var ovextent = ovview.calculateExtentInternal(ovmapSize);\n        var topLeftPixel = ovmap.getPixelFromCoordinateInternal(getTopLeft(extent));\n        var bottomRightPixel = ovmap.getPixelFromCoordinateInternal(getBottomRight(extent));\n        var boxWidth = Math.abs(topLeftPixel[0] - bottomRightPixel[0]);\n        var boxHeight = Math.abs(topLeftPixel[1] - bottomRightPixel[1]);\n        var ovmapWidth = ovmapSize[0];\n        var ovmapHeight = ovmapSize[1];\n        if (boxWidth < ovmapWidth * MIN_RATIO ||\n            boxHeight < ovmapHeight * MIN_RATIO ||\n            boxWidth > ovmapWidth * MAX_RATIO ||\n            boxHeight > ovmapHeight * MAX_RATIO) {\n            this.resetExtent_();\n        }\n        else if (!containsExtent(ovextent, extent)) {\n            this.recenter_();\n        }\n    };\n    /**\n     * Reset the overview map extent to half calculated min and max ratio times\n     * the extent of the main map.\n     * @private\n     */\n    OverviewMap.prototype.resetExtent_ = function () {\n        if (MAX_RATIO === 0 || MIN_RATIO === 0) {\n            return;\n        }\n        var map = this.getMap();\n        var ovmap = this.ovmap_;\n        var mapSize = /** @type {import(\"../size.js\").Size} */ (map.getSize());\n        var view = map.getView();\n        var extent = view.calculateExtentInternal(mapSize);\n        var ovview = ovmap.getView();\n        // get how many times the current map overview could hold different\n        // box sizes using the min and max ratio, pick the step in the middle used\n        // to calculate the extent from the main map to set it to the overview map,\n        var steps = Math.log(MAX_RATIO / MIN_RATIO) / Math.LN2;\n        var ratio = 1 / (Math.pow(2, steps / 2) * MIN_RATIO);\n        scaleFromCenter(extent, ratio);\n        ovview.fitInternal(polygonFromExtent(extent));\n    };\n    /**\n     * Set the center of the overview map to the map center without changing its\n     * resolution.\n     * @private\n     */\n    OverviewMap.prototype.recenter_ = function () {\n        var map = this.getMap();\n        var ovmap = this.ovmap_;\n        var view = map.getView();\n        var ovview = ovmap.getView();\n        ovview.setCenterInternal(view.getCenterInternal());\n    };\n    /**\n     * Update the box using the main map extent\n     * @private\n     */\n    OverviewMap.prototype.updateBox_ = function () {\n        var map = this.getMap();\n        var ovmap = this.ovmap_;\n        if (!map.isRendered() || !ovmap.isRendered()) {\n            return;\n        }\n        var mapSize = /** @type {import(\"../size.js\").Size} */ (map.getSize());\n        var view = map.getView();\n        var ovview = ovmap.getView();\n        var rotation = this.rotateWithView_ ? 0 : -view.getRotation();\n        var overlay = this.boxOverlay_;\n        var box = this.boxOverlay_.getElement();\n        var center = view.getCenterInternal();\n        var resolution = view.getResolution();\n        var ovresolution = ovview.getResolution();\n        var width = mapSize[0] * resolution / ovresolution;\n        var height = mapSize[1] * resolution / ovresolution;\n        // set position using center coordinates\n        overlay.setPosition(center);\n        // set box size calculated from map extent size and overview map resolution\n        if (box) {\n            box.style.width = width + 'px';\n            box.style.height = height + 'px';\n            var transform = 'rotate(' + rotation + 'rad)';\n            box.style.transform = transform;\n        }\n    };\n    /**\n     * @param {MouseEvent} event The event to handle\n     * @private\n     */\n    OverviewMap.prototype.handleClick_ = function (event) {\n        event.preventDefault();\n        this.handleToggle_();\n    };\n    /**\n     * @private\n     */\n    OverviewMap.prototype.handleToggle_ = function () {\n        this.element.classList.toggle(CLASS_COLLAPSED);\n        if (this.collapsed_) {\n            replaceNode(this.collapseLabel_, this.label_);\n        }\n        else {\n            replaceNode(this.label_, this.collapseLabel_);\n        }\n        this.collapsed_ = !this.collapsed_;\n        // manage overview map if it had not been rendered before and control\n        // is expanded\n        var ovmap = this.ovmap_;\n        if (!this.collapsed_) {\n            if (ovmap.isRendered()) {\n                this.viewExtent_ = undefined;\n                ovmap.render();\n                return;\n            }\n            ovmap.updateSize();\n            this.resetExtent_();\n            listenOnce(ovmap, MapEventType.POSTRENDER, function (event) {\n                this.updateBox_();\n            }, this);\n        }\n    };\n    /**\n     * Return `true` if the overview map is collapsible, `false` otherwise.\n     * @return {boolean} True if the widget is collapsible.\n     * @api\n     */\n    OverviewMap.prototype.getCollapsible = function () {\n        return this.collapsible_;\n    };\n    /**\n     * Set whether the overview map should be collapsible.\n     * @param {boolean} collapsible True if the widget is collapsible.\n     * @api\n     */\n    OverviewMap.prototype.setCollapsible = function (collapsible) {\n        if (this.collapsible_ === collapsible) {\n            return;\n        }\n        this.collapsible_ = collapsible;\n        this.element.classList.toggle('ol-uncollapsible');\n        if (!collapsible && this.collapsed_) {\n            this.handleToggle_();\n        }\n    };\n    /**\n     * Collapse or expand the overview map according to the passed parameter. Will\n     * not do anything if the overview map isn't collapsible or if the current\n     * collapsed state is already the one requested.\n     * @param {boolean} collapsed True if the widget is collapsed.\n     * @api\n     */\n    OverviewMap.prototype.setCollapsed = function (collapsed) {\n        if (!this.collapsible_ || this.collapsed_ === collapsed) {\n            return;\n        }\n        this.handleToggle_();\n    };\n    /**\n     * Determine if the overview map is collapsed.\n     * @return {boolean} The overview map is collapsed.\n     * @api\n     */\n    OverviewMap.prototype.getCollapsed = function () {\n        return this.collapsed_;\n    };\n    /**\n     * Return `true` if the overview map view can rotate, `false` otherwise.\n     * @return {boolean} True if the control view can rotate.\n     * @api\n     */\n    OverviewMap.prototype.getRotateWithView = function () {\n        return this.rotateWithView_;\n    };\n    /**\n     * Set whether the overview map view should rotate with the main map view.\n     * @param {boolean} rotateWithView True if the control view should rotate.\n     * @api\n     */\n    OverviewMap.prototype.setRotateWithView = function (rotateWithView) {\n        if (this.rotateWithView_ === rotateWithView) {\n            return;\n        }\n        this.rotateWithView_ = rotateWithView;\n        if (this.getMap().getView().getRotation() !== 0) {\n            if (this.rotateWithView_) {\n                this.handleRotationChanged_();\n            }\n            else {\n                this.ovmap_.getView().setRotation(0);\n            }\n            this.viewExtent_ = undefined;\n            this.validateExtent_();\n            this.updateBox_();\n        }\n    };\n    /**\n     * Return the overview map.\n     * @return {import(\"../PluggableMap.js\").default} Overview map.\n     * @api\n     */\n    OverviewMap.prototype.getOverviewMap = function () {\n        return this.ovmap_;\n    };\n    return OverviewMap;\n}(Control));\n/**\n * Update the overview map element.\n * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n * @this {OverviewMap}\n */\nexport function render(mapEvent) {\n    this.validateExtent_();\n    this.updateBox_();\n}\nexport default OverviewMap;\n//# sourceMappingURL=OverviewMap.js.map"]},"metadata":{},"sourceType":"module"}