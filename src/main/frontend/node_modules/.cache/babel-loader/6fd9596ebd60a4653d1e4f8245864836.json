{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/MapBrowserEvent\n */\n\n\nimport MapEvent from './MapEvent.js';\n/**\n * @classdesc\n * Events emitted as map browser events are instances of this type.\n * See {@link module:ol/PluggableMap~PluggableMap} for which events trigger a map browser event.\n */\n\nvar MapBrowserEvent =\n/** @class */\nfunction (_super) {\n  __extends(MapBrowserEvent, _super);\n  /**\n   * @param {string} type Event type.\n   * @param {import(\"./PluggableMap.js\").default} map Map.\n   * @param {Event} browserEvent Browser event.\n   * @param {boolean=} opt_dragging Is the map currently being dragged?\n   * @param {?import(\"./PluggableMap.js\").FrameState=} opt_frameState Frame state.\n   */\n\n\n  function MapBrowserEvent(type, map, browserEvent, opt_dragging, opt_frameState) {\n    var _this = _super.call(this, type, map, opt_frameState) || this;\n    /**\n     * The original browser event.\n     * @const\n     * @type {Event}\n     * @api\n     */\n\n\n    _this.originalEvent = browserEvent;\n    /**\n     * The map pixel relative to the viewport corresponding to the original browser event.\n     * @type {?import(\"./pixel.js\").Pixel}\n     */\n\n    _this.pixel_ = null;\n    /**\n     * The coordinate in the user projection corresponding to the original browser event.\n     * @type {?import(\"./coordinate.js\").Coordinate}\n     */\n\n    _this.coordinate_ = null;\n    /**\n     * Indicates if the map is currently being dragged. Only set for\n     * `POINTERDRAG` and `POINTERMOVE` events. Default is `false`.\n     *\n     * @type {boolean}\n     * @api\n     */\n\n    _this.dragging = opt_dragging !== undefined ? opt_dragging : false;\n    return _this;\n  }\n\n  Object.defineProperty(MapBrowserEvent.prototype, \"pixel\", {\n    /**\n     * The map pixel relative to the viewport corresponding to the original browser event.\n     * @type {import(\"./pixel.js\").Pixel}\n     * @api\n     */\n    get: function () {\n      if (!this.pixel_) {\n        this.pixel_ = this.map.getEventPixel(this.originalEvent);\n      }\n\n      return this.pixel_;\n    },\n    set: function (pixel) {\n      this.pixel_ = pixel;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapBrowserEvent.prototype, \"coordinate\", {\n    /**\n     * The coordinate corresponding to the original browser event.  This will be in the user\n     * projection if one is set.  Otherwise it will be in the view projection.\n     * @type {import(\"./coordinate.js\").Coordinate}\n     * @api\n     */\n    get: function () {\n      if (!this.coordinate_) {\n        this.coordinate_ = this.map.getCoordinateFromPixel(this.pixel);\n      }\n\n      return this.coordinate_;\n    },\n    set: function (coordinate) {\n      this.coordinate_ = coordinate;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Prevents the default browser action.\n   * See https://developer.mozilla.org/en-US/docs/Web/API/event.preventDefault.\n   * @override\n   * @api\n   */\n\n  MapBrowserEvent.prototype.preventDefault = function () {\n    _super.prototype.preventDefault.call(this);\n\n    this.originalEvent.preventDefault();\n  };\n  /**\n   * Prevents further propagation of the current event.\n   * See https://developer.mozilla.org/en-US/docs/Web/API/event.stopPropagation.\n   * @override\n   * @api\n   */\n\n\n  MapBrowserEvent.prototype.stopPropagation = function () {\n    _super.prototype.stopPropagation.call(this);\n\n    this.originalEvent.stopPropagation();\n  };\n\n  return MapBrowserEvent;\n}(MapEvent);\n\nexport default MapBrowserEvent;","map":{"version":3,"sources":["src/MapBrowserEvent.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAGA,OAAO,QAAP,MAAqB,eAArB;AAEA;;;;;;AAKA,IAAA,eAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA8B,EAAA,SAAA,CAAA,eAAA,EAAA,MAAA,CAAA;AAE5B;;;;;;;;;AAOA,WAAA,eAAA,CAAY,IAAZ,EAAkB,GAAlB,EAAuB,YAAvB,EAAqC,YAArC,EAAmD,cAAnD,EAAiE;AAAjE,QAAA,KAAA,GAEE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,IAAN,EAAY,GAAZ,EAAiB,cAAjB,KAAgC,IAFlC;AAIE;;;;;;;;AAMA,IAAA,KAAI,CAAC,aAAL,GAAqB,YAArB;AAEA;;;;;AAIA,IAAA,KAAI,CAAC,MAAL,GAAc,IAAd;AAEA;;;;;AAIA,IAAA,KAAI,CAAC,WAAL,GAAmB,IAAnB;AAEA;;;;;;;;AAOA,IAAA,KAAI,CAAC,QAAL,GAAgB,YAAY,KAAK,SAAjB,GAA6B,YAA7B,GAA4C,KAA5D;;AAED;;AAOD,EAAA,MAAA,CAAA,cAAA,CAAI,eAAA,CAAA,SAAJ,EAAI,OAAJ,EAAS;AALT;;;;;SAKA,YAAA;AACE,UAAI,CAAC,KAAK,MAAV,EAAkB;AAChB,aAAK,MAAL,GAAc,KAAK,GAAL,CAAS,aAAT,CAAuB,KAAK,aAA5B,CAAd;AACD;;AACD,aAAO,KAAK,MAAZ;AACD,KALQ;SAMT,UAAU,KAAV,EAAe;AACb,WAAK,MAAL,GAAc,KAAd;AACD,KARQ;oBAAA;;AAAA,GAAT;AAgBA,EAAA,MAAA,CAAA,cAAA,CAAI,eAAA,CAAA,SAAJ,EAAI,YAAJ,EAAc;AANd;;;;;;SAMA,YAAA;AACE,UAAI,CAAC,KAAK,WAAV,EAAuB;AACrB,aAAK,WAAL,GAAmB,KAAK,GAAL,CAAS,sBAAT,CAAgC,KAAK,KAArC,CAAnB;AACD;;AACD,aAAO,KAAK,WAAZ;AACD,KALa;SAMd,UAAe,UAAf,EAAyB;AACvB,WAAK,WAAL,GAAmB,UAAnB;AACD,KARa;oBAAA;;AAAA,GAAd;AAUA;;;;;;;AAMA,EAAA,eAAA,CAAA,SAAA,CAAA,cAAA,GAAA,YAAA;AACE,IAAA,MAAA,CAAA,SAAA,CAAM,cAAN,CAAoB,IAApB,CAAoB,IAApB;;AACA,SAAK,aAAL,CAAmB,cAAnB;AACD,GAHD;AAKA;;;;;;;;AAMA,EAAA,eAAA,CAAA,SAAA,CAAA,eAAA,GAAA,YAAA;AACE,IAAA,MAAA,CAAA,SAAA,CAAM,eAAN,CAAqB,IAArB,CAAqB,IAArB;;AACA,SAAK,aAAL,CAAmB,eAAnB;AACD,GAHD;;AAIF,SAAA,eAAA;AAAC,CAhGD,CAA8B,QAA9B,CAAA;;AAmGA,eAAe,eAAf","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/MapBrowserEvent\n */\nimport MapEvent from './MapEvent.js';\n/**\n * @classdesc\n * Events emitted as map browser events are instances of this type.\n * See {@link module:ol/PluggableMap~PluggableMap} for which events trigger a map browser event.\n */\nvar MapBrowserEvent = /** @class */ (function (_super) {\n    __extends(MapBrowserEvent, _super);\n    /**\n     * @param {string} type Event type.\n     * @param {import(\"./PluggableMap.js\").default} map Map.\n     * @param {Event} browserEvent Browser event.\n     * @param {boolean=} opt_dragging Is the map currently being dragged?\n     * @param {?import(\"./PluggableMap.js\").FrameState=} opt_frameState Frame state.\n     */\n    function MapBrowserEvent(type, map, browserEvent, opt_dragging, opt_frameState) {\n        var _this = _super.call(this, type, map, opt_frameState) || this;\n        /**\n         * The original browser event.\n         * @const\n         * @type {Event}\n         * @api\n         */\n        _this.originalEvent = browserEvent;\n        /**\n         * The map pixel relative to the viewport corresponding to the original browser event.\n         * @type {?import(\"./pixel.js\").Pixel}\n         */\n        _this.pixel_ = null;\n        /**\n         * The coordinate in the user projection corresponding to the original browser event.\n         * @type {?import(\"./coordinate.js\").Coordinate}\n         */\n        _this.coordinate_ = null;\n        /**\n         * Indicates if the map is currently being dragged. Only set for\n         * `POINTERDRAG` and `POINTERMOVE` events. Default is `false`.\n         *\n         * @type {boolean}\n         * @api\n         */\n        _this.dragging = opt_dragging !== undefined ? opt_dragging : false;\n        return _this;\n    }\n    Object.defineProperty(MapBrowserEvent.prototype, \"pixel\", {\n        /**\n         * The map pixel relative to the viewport corresponding to the original browser event.\n         * @type {import(\"./pixel.js\").Pixel}\n         * @api\n         */\n        get: function () {\n            if (!this.pixel_) {\n                this.pixel_ = this.map.getEventPixel(this.originalEvent);\n            }\n            return this.pixel_;\n        },\n        set: function (pixel) {\n            this.pixel_ = pixel;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MapBrowserEvent.prototype, \"coordinate\", {\n        /**\n         * The coordinate corresponding to the original browser event.  This will be in the user\n         * projection if one is set.  Otherwise it will be in the view projection.\n         * @type {import(\"./coordinate.js\").Coordinate}\n         * @api\n         */\n        get: function () {\n            if (!this.coordinate_) {\n                this.coordinate_ = this.map.getCoordinateFromPixel(this.pixel);\n            }\n            return this.coordinate_;\n        },\n        set: function (coordinate) {\n            this.coordinate_ = coordinate;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Prevents the default browser action.\n     * See https://developer.mozilla.org/en-US/docs/Web/API/event.preventDefault.\n     * @override\n     * @api\n     */\n    MapBrowserEvent.prototype.preventDefault = function () {\n        _super.prototype.preventDefault.call(this);\n        this.originalEvent.preventDefault();\n    };\n    /**\n     * Prevents further propagation of the current event.\n     * See https://developer.mozilla.org/en-US/docs/Web/API/event.stopPropagation.\n     * @override\n     * @api\n     */\n    MapBrowserEvent.prototype.stopPropagation = function () {\n        _super.prototype.stopPropagation.call(this);\n        this.originalEvent.stopPropagation();\n    };\n    return MapBrowserEvent;\n}(MapEvent));\nexport default MapBrowserEvent;\n//# sourceMappingURL=MapBrowserEvent.js.map"]},"metadata":{},"sourceType":"module"}