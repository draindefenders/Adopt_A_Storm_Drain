{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/source/Image\n */\n\n\nimport { abstract } from '../util.js';\nimport { ENABLE_RASTER_REPROJECTION } from '../reproj/common.js';\nimport ImageState from '../ImageState.js';\nimport { linearFindNearest } from '../array.js';\nimport Event from '../events/Event.js';\nimport { equals } from '../extent.js';\nimport { equivalent } from '../proj.js';\nimport ReprojImage from '../reproj/Image.js';\nimport Source from './Source.js';\n/**\n * @enum {string}\n */\n\nvar ImageSourceEventType = {\n  /**\n   * Triggered when an image starts loading.\n   * @event module:ol/source/Image.ImageSourceEvent#imageloadstart\n   * @api\n   */\n  IMAGELOADSTART: 'imageloadstart',\n\n  /**\n   * Triggered when an image finishes loading.\n   * @event module:ol/source/Image.ImageSourceEvent#imageloadend\n   * @api\n   */\n  IMAGELOADEND: 'imageloadend',\n\n  /**\n   * Triggered if image loading results in an error.\n   * @event module:ol/source/Image.ImageSourceEvent#imageloaderror\n   * @api\n   */\n  IMAGELOADERROR: 'imageloaderror'\n};\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Image~ImageSource} instances are instances of this\n * type.\n */\n\nvar ImageSourceEvent =\n/** @class */\nfunction (_super) {\n  __extends(ImageSourceEvent, _super);\n  /**\n   * @param {string} type Type.\n   * @param {import(\"../Image.js\").default} image The image.\n   */\n\n\n  function ImageSourceEvent(type, image) {\n    var _this = _super.call(this, type) || this;\n    /**\n     * The image related to the event.\n     * @type {import(\"../Image.js\").default}\n     * @api\n     */\n\n\n    _this.image = image;\n    return _this;\n  }\n\n  return ImageSourceEvent;\n}(Event);\n\nexport { ImageSourceEvent };\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions]\n * @property {import(\"../proj.js\").ProjectionLike} [projection]\n * @property {Array<number>} [resolutions]\n * @property {import(\"./State.js\").default} [state]\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for sources providing a single image.\n * @abstract\n * @fires module:ol/source/Image.ImageSourceEvent\n * @api\n */\n\nvar ImageSource =\n/** @class */\nfunction (_super) {\n  __extends(ImageSource, _super);\n  /**\n   * @param {Options} options Single image source options.\n   */\n\n\n  function ImageSource(options) {\n    var _this = _super.call(this, {\n      attributions: options.attributions,\n      projection: options.projection,\n      state: options.state\n    }) || this;\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n\n\n    _this.resolutions_ = options.resolutions !== undefined ? options.resolutions : null;\n    /**\n     * @private\n     * @type {import(\"../reproj/Image.js\").default}\n     */\n\n    _this.reprojectedImage_ = null;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.reprojectedRevision_ = 0;\n    return _this;\n  }\n  /**\n   * @return {Array<number>} Resolutions.\n   * @override\n   */\n\n\n  ImageSource.prototype.getResolutions = function () {\n    return this.resolutions_;\n  };\n  /**\n   * @protected\n   * @param {number} resolution Resolution.\n   * @return {number} Resolution.\n   */\n\n\n  ImageSource.prototype.findNearestResolution = function (resolution) {\n    if (this.resolutions_) {\n      var idx = linearFindNearest(this.resolutions_, resolution, 0);\n      resolution = this.resolutions_[idx];\n    }\n\n    return resolution;\n  };\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../ImageBase.js\").default} Single image.\n   */\n\n\n  ImageSource.prototype.getImage = function (extent, resolution, pixelRatio, projection) {\n    var sourceProjection = this.getProjection();\n\n    if (!ENABLE_RASTER_REPROJECTION || !sourceProjection || !projection || equivalent(sourceProjection, projection)) {\n      if (sourceProjection) {\n        projection = sourceProjection;\n      }\n\n      return this.getImageInternal(extent, resolution, pixelRatio, projection);\n    } else {\n      if (this.reprojectedImage_) {\n        if (this.reprojectedRevision_ == this.getRevision() && equivalent(this.reprojectedImage_.getProjection(), projection) && this.reprojectedImage_.getResolution() == resolution && equals(this.reprojectedImage_.getExtent(), extent)) {\n          return this.reprojectedImage_;\n        }\n\n        this.reprojectedImage_.dispose();\n        this.reprojectedImage_ = null;\n      }\n\n      this.reprojectedImage_ = new ReprojImage(sourceProjection, projection, extent, resolution, pixelRatio, function (extent, resolution, pixelRatio) {\n        return this.getImageInternal(extent, resolution, pixelRatio, sourceProjection);\n      }.bind(this));\n      this.reprojectedRevision_ = this.getRevision();\n      return this.reprojectedImage_;\n    }\n  };\n  /**\n   * @abstract\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../ImageBase.js\").default} Single image.\n   * @protected\n   */\n\n\n  ImageSource.prototype.getImageInternal = function (extent, resolution, pixelRatio, projection) {\n    return abstract();\n  };\n  /**\n   * Handle image change events.\n   * @param {import(\"../events/Event.js\").default} event Event.\n   * @protected\n   */\n\n\n  ImageSource.prototype.handleImageChange = function (event) {\n    var image =\n    /** @type {import(\"../Image.js\").default} */\n    event.target;\n\n    switch (image.getState()) {\n      case ImageState.LOADING:\n        this.loading = true;\n        this.dispatchEvent(new ImageSourceEvent(ImageSourceEventType.IMAGELOADSTART, image));\n        break;\n\n      case ImageState.LOADED:\n        this.loading = false;\n        this.dispatchEvent(new ImageSourceEvent(ImageSourceEventType.IMAGELOADEND, image));\n        break;\n\n      case ImageState.ERROR:\n        this.loading = false;\n        this.dispatchEvent(new ImageSourceEvent(ImageSourceEventType.IMAGELOADERROR, image));\n        break;\n\n      default: // pass\n\n    }\n  };\n\n  return ImageSource;\n}(Source);\n/**\n * Default image load function for image sources that use import(\"../Image.js\").Image image\n * instances.\n * @param {import(\"../Image.js\").default} image Image.\n * @param {string} src Source.\n */\n\n\nexport function defaultImageLoadFunction(image, src) {\n  /** @type {HTMLImageElement|HTMLVideoElement} */\n  image.getImage().src = src;\n}\nexport default ImageSource;","map":{"version":3,"sources":["../src/source/Image.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/source/Image\n */\nimport { abstract } from '../util.js';\nimport { ENABLE_RASTER_REPROJECTION } from '../reproj/common.js';\nimport ImageState from '../ImageState.js';\nimport { linearFindNearest } from '../array.js';\nimport Event from '../events/Event.js';\nimport { equals } from '../extent.js';\nimport { equivalent } from '../proj.js';\nimport ReprojImage from '../reproj/Image.js';\nimport Source from './Source.js';\n/**\n * @enum {string}\n */\nvar ImageSourceEventType = {\n    /**\n     * Triggered when an image starts loading.\n     * @event module:ol/source/Image.ImageSourceEvent#imageloadstart\n     * @api\n     */\n    IMAGELOADSTART: 'imageloadstart',\n    /**\n     * Triggered when an image finishes loading.\n     * @event module:ol/source/Image.ImageSourceEvent#imageloadend\n     * @api\n     */\n    IMAGELOADEND: 'imageloadend',\n    /**\n     * Triggered if image loading results in an error.\n     * @event module:ol/source/Image.ImageSourceEvent#imageloaderror\n     * @api\n     */\n    IMAGELOADERROR: 'imageloaderror'\n};\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Image~ImageSource} instances are instances of this\n * type.\n */\nvar ImageSourceEvent = /** @class */ (function (_super) {\n    __extends(ImageSourceEvent, _super);\n    /**\n     * @param {string} type Type.\n     * @param {import(\"../Image.js\").default} image The image.\n     */\n    function ImageSourceEvent(type, image) {\n        var _this = _super.call(this, type) || this;\n        /**\n         * The image related to the event.\n         * @type {import(\"../Image.js\").default}\n         * @api\n         */\n        _this.image = image;\n        return _this;\n    }\n    return ImageSourceEvent;\n}(Event));\nexport { ImageSourceEvent };\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions]\n * @property {import(\"../proj.js\").ProjectionLike} [projection]\n * @property {Array<number>} [resolutions]\n * @property {import(\"./State.js\").default} [state]\n */\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for sources providing a single image.\n * @abstract\n * @fires module:ol/source/Image.ImageSourceEvent\n * @api\n */\nvar ImageSource = /** @class */ (function (_super) {\n    __extends(ImageSource, _super);\n    /**\n     * @param {Options} options Single image source options.\n     */\n    function ImageSource(options) {\n        var _this = _super.call(this, {\n            attributions: options.attributions,\n            projection: options.projection,\n            state: options.state\n        }) || this;\n        /**\n         * @private\n         * @type {Array<number>}\n         */\n        _this.resolutions_ = options.resolutions !== undefined ?\n            options.resolutions : null;\n        /**\n         * @private\n         * @type {import(\"../reproj/Image.js\").default}\n         */\n        _this.reprojectedImage_ = null;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.reprojectedRevision_ = 0;\n        return _this;\n    }\n    /**\n     * @return {Array<number>} Resolutions.\n     * @override\n     */\n    ImageSource.prototype.getResolutions = function () {\n        return this.resolutions_;\n    };\n    /**\n     * @protected\n     * @param {number} resolution Resolution.\n     * @return {number} Resolution.\n     */\n    ImageSource.prototype.findNearestResolution = function (resolution) {\n        if (this.resolutions_) {\n            var idx = linearFindNearest(this.resolutions_, resolution, 0);\n            resolution = this.resolutions_[idx];\n        }\n        return resolution;\n    };\n    /**\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @param {number} resolution Resolution.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @return {import(\"../ImageBase.js\").default} Single image.\n     */\n    ImageSource.prototype.getImage = function (extent, resolution, pixelRatio, projection) {\n        var sourceProjection = this.getProjection();\n        if (!ENABLE_RASTER_REPROJECTION ||\n            !sourceProjection ||\n            !projection ||\n            equivalent(sourceProjection, projection)) {\n            if (sourceProjection) {\n                projection = sourceProjection;\n            }\n            return this.getImageInternal(extent, resolution, pixelRatio, projection);\n        }\n        else {\n            if (this.reprojectedImage_) {\n                if (this.reprojectedRevision_ == this.getRevision() &&\n                    equivalent(this.reprojectedImage_.getProjection(), projection) &&\n                    this.reprojectedImage_.getResolution() == resolution &&\n                    equals(this.reprojectedImage_.getExtent(), extent)) {\n                    return this.reprojectedImage_;\n                }\n                this.reprojectedImage_.dispose();\n                this.reprojectedImage_ = null;\n            }\n            this.reprojectedImage_ = new ReprojImage(sourceProjection, projection, extent, resolution, pixelRatio, function (extent, resolution, pixelRatio) {\n                return this.getImageInternal(extent, resolution, pixelRatio, sourceProjection);\n            }.bind(this));\n            this.reprojectedRevision_ = this.getRevision();\n            return this.reprojectedImage_;\n        }\n    };\n    /**\n     * @abstract\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @param {number} resolution Resolution.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @return {import(\"../ImageBase.js\").default} Single image.\n     * @protected\n     */\n    ImageSource.prototype.getImageInternal = function (extent, resolution, pixelRatio, projection) {\n        return abstract();\n    };\n    /**\n     * Handle image change events.\n     * @param {import(\"../events/Event.js\").default} event Event.\n     * @protected\n     */\n    ImageSource.prototype.handleImageChange = function (event) {\n        var image = /** @type {import(\"../Image.js\").default} */ (event.target);\n        switch (image.getState()) {\n            case ImageState.LOADING:\n                this.loading = true;\n                this.dispatchEvent(new ImageSourceEvent(ImageSourceEventType.IMAGELOADSTART, image));\n                break;\n            case ImageState.LOADED:\n                this.loading = false;\n                this.dispatchEvent(new ImageSourceEvent(ImageSourceEventType.IMAGELOADEND, image));\n                break;\n            case ImageState.ERROR:\n                this.loading = false;\n                this.dispatchEvent(new ImageSourceEvent(ImageSourceEventType.IMAGELOADERROR, image));\n                break;\n            default:\n            // pass\n        }\n    };\n    return ImageSource;\n}(Source));\n/**\n * Default image load function for image sources that use import(\"../Image.js\").Image image\n * instances.\n * @param {import(\"../Image.js\").default} image Image.\n * @param {string} src Source.\n */\nexport function defaultImageLoadFunction(image, src) {\n    /** @type {HTMLImageElement|HTMLVideoElement} */ (image.getImage()).src = src;\n}\nexport default ImageSource;\n//# sourceMappingURL=Image.js.map"]},"metadata":{},"sourceType":"module"}