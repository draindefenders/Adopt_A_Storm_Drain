{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tim\\\\IdeaProjects\\\\Adopt_A_Storm_Drain\\\\src\\\\main\\\\java\\\\com\\\\adoptastormdrain\\\\Map\\\\frontend\\\\src\\\\components\\\\OLMapFragment.js\";\nimport React from 'react';\nimport Grid from '@material-ui/core/Grid'; // Start Openlayers imports\n\nimport 'ol';\nimport { GeoJSON, XYZ } from 'ol/format';\nimport { Tile as TileLayer, Vector as VectorLayer } from 'ol/layer';\nimport { Vector as VectorSource, OSM as OSMSource, XYZ as XYZSource, TileWMS as TileWMSSource } from 'ol/source';\nimport { Select as SelectInteraction, defaults as DefaultInteractions } from 'ol/interaction';\nimport { Attribution, ScaleLine, ZoomSlider, Zoom, Rotate, MousePosition, OverviewMap, defaults as DefaultControls } from 'ol/control';\nimport { Style, Fill as FillStyle, RegularShape as RegularShapeStyle, Stroke as StrokeStyle } from 'ol/style';\nimport { Projection, get as getProjection } from 'ol/proj'; // End Openlayers imports\n\nclass OLMapFragment extends React.Component {\n  constructor(props) {\n    super(props);\n    this.updateDimensions = this.updateDimensions.bind(this);\n  }\n\n  updateDimensions() {\n    const h = window.innerWidth >= 992 ? window.innerHeight : 400;\n    this.setState({\n      height: h\n    });\n  }\n\n  componentWillMount() {\n    window.addEventListener('resize', this.updateDimensions);\n    this.updateDimensions();\n  }\n\n  componentDidMount() {\n    // Create an Openlayer Map instance with two tile layers\n    const map = new Map({\n      //  Display the map in the div with the id of map\n      target: 'map',\n      layers: [new TileLayer({\n        source: new XYZSource({\n          url: 'https://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png',\n          projection: 'EPSG:3857'\n        })\n      })],\n      // Add in the following map controls\n      controls: DefaultControls().extend([new ZoomSlider(), new MousePosition(), new ScaleLine(), new OverviewMap()]),\n      // Render the tile layers in a map view with a Mercator projection\n      view: new View({\n        projection: 'EPSG:3857',\n        center: ol.proj.fromLonLat([37.41, 8.82]),\n        zoom: 2\n      })\n    });\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.updateDimensions);\n  }\n\n  render() {\n    const style = {\n      width: '100%',\n      height: this.state.height,\n      backgroundColor: '#cccccc'\n    };\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"map\",\n      style: style,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default OLMapFragment;","map":{"version":3,"sources":["C:/Users/Tim/IdeaProjects/Adopt_A_Storm_Drain/src/main/java/com/adoptastormdrain/Map/frontend/src/components/OLMapFragment.js"],"names":["React","Grid","GeoJSON","XYZ","Tile","TileLayer","Vector","VectorLayer","VectorSource","OSM","OSMSource","XYZSource","TileWMS","TileWMSSource","Select","SelectInteraction","defaults","DefaultInteractions","Attribution","ScaleLine","ZoomSlider","Zoom","Rotate","MousePosition","OverviewMap","DefaultControls","Style","Fill","FillStyle","RegularShape","RegularShapeStyle","Stroke","StrokeStyle","Projection","get","getProjection","OLMapFragment","Component","constructor","props","updateDimensions","bind","h","window","innerWidth","innerHeight","setState","height","componentWillMount","addEventListener","componentDidMount","map","Map","target","layers","source","url","projection","controls","extend","view","View","center","ol","proj","fromLonLat","zoom","componentWillUnmount","removeEventListener","render","style","width","state","backgroundColor"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport Grid from '@material-ui/core/Grid'\r\n\r\n// Start Openlayers imports\r\nimport 'ol'\r\nimport {\r\n    GeoJSON,\r\n    XYZ\r\n} from 'ol/format'\r\nimport {\r\n    Tile as TileLayer,\r\n    Vector as VectorLayer\r\n} from 'ol/layer'\r\nimport {\r\n    Vector as VectorSource,\r\n    OSM as OSMSource,\r\n    XYZ as XYZSource,\r\n    TileWMS as TileWMSSource\r\n} from 'ol/source'\r\nimport {\r\n    Select as SelectInteraction,\r\n    defaults as DefaultInteractions\r\n} from 'ol/interaction'\r\nimport {\r\n    Attribution,\r\n    ScaleLine,\r\n    ZoomSlider,\r\n    Zoom,\r\n    Rotate,\r\n    MousePosition,\r\n    OverviewMap,\r\n    defaults as DefaultControls\r\n} from 'ol/control'\r\nimport {\r\n    Style,\r\n    Fill as FillStyle,\r\n    RegularShape as RegularShapeStyle,\r\n    Stroke as StrokeStyle\r\n} from 'ol/style'\r\n\r\nimport {\r\n    Projection,\r\n    get as getProjection\r\n} from 'ol/proj'\r\n\r\n// End Openlayers imports\r\n\r\nclass OLMapFragment extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.updateDimensions = this.updateDimensions.bind(this)\r\n    }\r\n    updateDimensions(){\r\n        const h = window.innerWidth >= 992 ? window.innerHeight : 400\r\n        this.setState({height: h})\r\n    }\r\n    componentWillMount(){\r\n        window.addEventListener('resize', this.updateDimensions)\r\n        this.updateDimensions()\r\n    }\r\n    componentDidMount(){\r\n\r\n        // Create an Openlayer Map instance with two tile layers\r\n        const map = new Map({\r\n            //  Display the map in the div with the id of map\r\n            target: 'map',\r\n            layers: [\r\n                new TileLayer({\r\n                    source: new XYZSource({\r\n                        url: 'https://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png',\r\n                        projection: 'EPSG:3857'\r\n                    })\r\n                })\r\n            ],\r\n            // Add in the following map controls\r\n            controls: DefaultControls().extend([\r\n                new ZoomSlider(),\r\n                new MousePosition(),\r\n                new ScaleLine(),\r\n                new OverviewMap()\r\n            ]),\r\n            // Render the tile layers in a map view with a Mercator projection\r\n            view: new View({\r\n                projection: 'EPSG:3857',\r\n                center: ol.proj.fromLonLat([37.41, 8.82]),\r\n                zoom: 2\r\n            })\r\n        })\r\n    }\r\n    componentWillUnmount(){\r\n        window.removeEventListener('resize', this.updateDimensions)\r\n    }\r\n    render(){\r\n        const style = {\r\n            width: '100%',\r\n            height:this.state.height,\r\n            backgroundColor: '#cccccc',\r\n        }\r\n        return (\r\n            <Grid container>\r\n                <Grid item xs={12}>\r\n                    <div id='map' style={style} >\r\n                    </div>\r\n                </Grid>\r\n            </Grid>\r\n        )\r\n    }\r\n}\r\nexport default OLMapFragment"]},"metadata":{},"sourceType":"module"}