{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/source/Zoomify\n */\n\n\nimport { DEFAULT_TILE_SIZE } from '../tilegrid/common.js';\nimport ImageTile from '../ImageTile.js';\nimport TileState from '../TileState.js';\nimport { expandUrl, createFromTileUrlFunctions } from '../tileurlfunction.js';\nimport { assert } from '../asserts.js';\nimport { createCanvasContext2D } from '../dom.js';\nimport { toSize } from '../size.js';\nimport TileImage from './TileImage.js';\nimport TileGrid from '../tilegrid/TileGrid.js';\n/**\n * @enum {string}\n */\n\nvar TierSizeCalculation = {\n  DEFAULT: 'default',\n  TRUNCATED: 'truncated'\n};\n\nvar CustomTile =\n/** @class */\nfunction (_super) {\n  __extends(CustomTile, _super);\n  /**\n   * @param {import(\"../size.js\").Size} tileSize Full tile size.\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {TileState} state State.\n   * @param {string} src Image source URI.\n   * @param {?string} crossOrigin Cross origin.\n   * @param {import(\"../Tile.js\").LoadFunction} tileLoadFunction Tile load function.\n   * @param {import(\"../Tile.js\").Options=} opt_options Tile options.\n   */\n\n\n  function CustomTile(tileSize, tileCoord, state, src, crossOrigin, tileLoadFunction, opt_options) {\n    var _this = _super.call(this, tileCoord, state, src, crossOrigin, tileLoadFunction, opt_options) || this;\n    /**\n     * @private\n     * @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement}\n     */\n\n\n    _this.zoomifyImage_ = null;\n    /**\n     * @type {import(\"../size.js\").Size}\n     */\n\n    _this.tileSize_ = tileSize;\n    return _this;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  CustomTile.prototype.getImage = function () {\n    if (this.zoomifyImage_) {\n      return this.zoomifyImage_;\n    }\n\n    var image = _super.prototype.getImage.call(this);\n\n    if (this.state == TileState.LOADED) {\n      var tileSize = this.tileSize_;\n\n      if (image.width == tileSize[0] && image.height == tileSize[1]) {\n        this.zoomifyImage_ = image;\n        return image;\n      } else {\n        var context = createCanvasContext2D(tileSize[0], tileSize[1]);\n        context.drawImage(image, 0, 0);\n        this.zoomifyImage_ = context.canvas;\n        return context.canvas;\n      }\n    } else {\n      return image;\n    }\n  };\n\n  return CustomTile;\n}(ImageTile);\n\nexport { CustomTile };\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize] Tile cache size. The default depends on the screen size. Will increase if too small.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value  you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {number} [tilePixelRatio] The pixel ratio used by the tile service. For example, if the tile service advertizes 256px by 256px tiles but actually sends 512px by 512px images (for retina/hidpi devices) then `tilePixelRatio` should be set to `2`\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {string} [url] URL template or base URL of the Zoomify service.\n * A base URL is the fixed part\n * of the URL, excluding the tile group, z, x, and y folder structure, e.g.\n * `http://my.zoomify.info/IMAGE.TIF/`. A URL template must include\n * `{TileGroup}`, `{x}`, `{y}`, and `{z}` placeholders, e.g.\n * `http://my.zoomify.info/IMAGE.TIF/{TileGroup}/{z}-{x}-{y}.jpg`.\n * Internet Imaging Protocol (IIP) with JTL extension can be also used with\n * `{tileIndex}` and `{z}` placeholders, e.g.\n * `http://my.zoomify.info?FIF=IMAGE.TIF&JTL={z},{tileIndex}`.\n * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be\n * used instead of defining each one separately in the `urls` option.\n * @property {string} [tierSizeCalculation] Tier size calculation method: `default` or `truncated`.\n * @property {import(\"../size.js\").Size} [size] Size of the image.\n * @property {import(\"../extent.js\").Extent} [extent] Extent for the TileGrid that is created.\n * Default sets the TileGrid in the\n * fourth quadrant, meaning extent is `[0, -height, width, 0]`. To change the\n * extent to the first quadrant (the default for OpenLayers 2) set the extent\n * as `[0, 0, width, height]`.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number} [tileSize=256] Tile size. Same tile size is used for all zoom levels.\n * @property {number} [zDirection] Indicate which resolution should be used\n * by a renderer if the views resolution does not match any resolution of the tile source.\n * If 0, the nearest resolution will be used. If 1, the nearest lower resolution\n * will be used. If -1, the nearest higher resolution will be used.\n */\n\n/**\n * @classdesc\n * Layer source for tile data in Zoomify format (both Zoomify and Internet\n * Imaging Protocol are supported).\n * @api\n */\n\nvar Zoomify =\n/** @class */\nfunction (_super) {\n  __extends(Zoomify, _super);\n  /**\n   * @param {Options=} opt_options Options.\n   */\n\n\n  function Zoomify(opt_options) {\n    var _this = this;\n\n    var options = opt_options || {};\n    var size = options.size;\n    var tierSizeCalculation = options.tierSizeCalculation !== undefined ? options.tierSizeCalculation : TierSizeCalculation.DEFAULT;\n    var tilePixelRatio = options.tilePixelRatio || 1;\n    var imageWidth = size[0];\n    var imageHeight = size[1];\n    var tierSizeInTiles = [];\n    var tileSize = options.tileSize || DEFAULT_TILE_SIZE;\n    var tileSizeForTierSizeCalculation = tileSize * tilePixelRatio;\n\n    switch (tierSizeCalculation) {\n      case TierSizeCalculation.DEFAULT:\n        while (imageWidth > tileSizeForTierSizeCalculation || imageHeight > tileSizeForTierSizeCalculation) {\n          tierSizeInTiles.push([Math.ceil(imageWidth / tileSizeForTierSizeCalculation), Math.ceil(imageHeight / tileSizeForTierSizeCalculation)]);\n          tileSizeForTierSizeCalculation += tileSizeForTierSizeCalculation;\n        }\n\n        break;\n\n      case TierSizeCalculation.TRUNCATED:\n        var width = imageWidth;\n        var height = imageHeight;\n\n        while (width > tileSizeForTierSizeCalculation || height > tileSizeForTierSizeCalculation) {\n          tierSizeInTiles.push([Math.ceil(width / tileSizeForTierSizeCalculation), Math.ceil(height / tileSizeForTierSizeCalculation)]);\n          width >>= 1;\n          height >>= 1;\n        }\n\n        break;\n\n      default:\n        assert(false, 53); // Unknown `tierSizeCalculation` configured\n\n        break;\n    }\n\n    tierSizeInTiles.push([1, 1]);\n    tierSizeInTiles.reverse();\n    var resolutions = [tilePixelRatio];\n    var tileCountUpToTier = [0];\n\n    for (var i = 1, ii = tierSizeInTiles.length; i < ii; i++) {\n      resolutions.push(tilePixelRatio << i);\n      tileCountUpToTier.push(tierSizeInTiles[i - 1][0] * tierSizeInTiles[i - 1][1] + tileCountUpToTier[i - 1]);\n    }\n\n    resolutions.reverse();\n    var tileGrid = new TileGrid({\n      tileSize: tileSize,\n      extent: options.extent || [0, -imageHeight, imageWidth, 0],\n      resolutions: resolutions\n    });\n    var url = options.url;\n\n    if (url && url.indexOf('{TileGroup}') == -1 && url.indexOf('{tileIndex}') == -1) {\n      url += '{TileGroup}/{z}-{x}-{y}.jpg';\n    }\n\n    var urls = expandUrl(url);\n    var tileWidth = tileSize * tilePixelRatio;\n    /**\n     * @param {string} template Template.\n     * @return {import(\"../Tile.js\").UrlFunction} Tile URL function.\n     */\n\n    function createFromTemplate(template) {\n      return (\n        /**\n         * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile Coordinate.\n         * @param {number} pixelRatio Pixel ratio.\n         * @param {import(\"../proj/Projection.js\").default} projection Projection.\n         * @return {string|undefined} Tile URL.\n         */\n        function (tileCoord, pixelRatio, projection) {\n          if (!tileCoord) {\n            return undefined;\n          } else {\n            var tileCoordZ = tileCoord[0];\n            var tileCoordX = tileCoord[1];\n            var tileCoordY = tileCoord[2];\n            var tileIndex = tileCoordX + tileCoordY * tierSizeInTiles[tileCoordZ][0];\n            var tileGroup = (tileIndex + tileCountUpToTier[tileCoordZ]) / tileWidth | 0;\n            var localContext_1 = {\n              'z': tileCoordZ,\n              'x': tileCoordX,\n              'y': tileCoordY,\n              'tileIndex': tileIndex,\n              'TileGroup': 'TileGroup' + tileGroup\n            };\n            return template.replace(/\\{(\\w+?)\\}/g, function (m, p) {\n              return localContext_1[p];\n            });\n          }\n        }\n      );\n    }\n\n    var tileUrlFunction = createFromTileUrlFunctions(urls.map(createFromTemplate));\n    var ZoomifyTileClass = CustomTile.bind(null, toSize(tileSize * tilePixelRatio));\n    _this = _super.call(this, {\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      projection: options.projection,\n      tilePixelRatio: tilePixelRatio,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileClass: ZoomifyTileClass,\n      tileGrid: tileGrid,\n      tileUrlFunction: tileUrlFunction,\n      transition: options.transition\n    }) || this;\n    /**\n     * @inheritDoc\n     */\n\n    _this.zDirection = options.zDirection;\n    return _this;\n  }\n\n  return Zoomify;\n}(TileImage);\n\nexport default Zoomify;","map":{"version":3,"sources":["../src/source/Zoomify.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/source/Zoomify\n */\nimport { DEFAULT_TILE_SIZE } from '../tilegrid/common.js';\nimport ImageTile from '../ImageTile.js';\nimport TileState from '../TileState.js';\nimport { expandUrl, createFromTileUrlFunctions } from '../tileurlfunction.js';\nimport { assert } from '../asserts.js';\nimport { createCanvasContext2D } from '../dom.js';\nimport { toSize } from '../size.js';\nimport TileImage from './TileImage.js';\nimport TileGrid from '../tilegrid/TileGrid.js';\n/**\n * @enum {string}\n */\nvar TierSizeCalculation = {\n    DEFAULT: 'default',\n    TRUNCATED: 'truncated'\n};\nvar CustomTile = /** @class */ (function (_super) {\n    __extends(CustomTile, _super);\n    /**\n     * @param {import(\"../size.js\").Size} tileSize Full tile size.\n     * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n     * @param {TileState} state State.\n     * @param {string} src Image source URI.\n     * @param {?string} crossOrigin Cross origin.\n     * @param {import(\"../Tile.js\").LoadFunction} tileLoadFunction Tile load function.\n     * @param {import(\"../Tile.js\").Options=} opt_options Tile options.\n     */\n    function CustomTile(tileSize, tileCoord, state, src, crossOrigin, tileLoadFunction, opt_options) {\n        var _this = _super.call(this, tileCoord, state, src, crossOrigin, tileLoadFunction, opt_options) || this;\n        /**\n         * @private\n         * @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement}\n         */\n        _this.zoomifyImage_ = null;\n        /**\n         * @type {import(\"../size.js\").Size}\n         */\n        _this.tileSize_ = tileSize;\n        return _this;\n    }\n    /**\n     * @inheritDoc\n     */\n    CustomTile.prototype.getImage = function () {\n        if (this.zoomifyImage_) {\n            return this.zoomifyImage_;\n        }\n        var image = _super.prototype.getImage.call(this);\n        if (this.state == TileState.LOADED) {\n            var tileSize = this.tileSize_;\n            if (image.width == tileSize[0] && image.height == tileSize[1]) {\n                this.zoomifyImage_ = image;\n                return image;\n            }\n            else {\n                var context = createCanvasContext2D(tileSize[0], tileSize[1]);\n                context.drawImage(image, 0, 0);\n                this.zoomifyImage_ = context.canvas;\n                return context.canvas;\n            }\n        }\n        else {\n            return image;\n        }\n    };\n    return CustomTile;\n}(ImageTile));\nexport { CustomTile };\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize] Tile cache size. The default depends on the screen size. Will increase if too small.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value  you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {number} [tilePixelRatio] The pixel ratio used by the tile service. For example, if the tile service advertizes 256px by 256px tiles but actually sends 512px by 512px images (for retina/hidpi devices) then `tilePixelRatio` should be set to `2`\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {string} [url] URL template or base URL of the Zoomify service.\n * A base URL is the fixed part\n * of the URL, excluding the tile group, z, x, and y folder structure, e.g.\n * `http://my.zoomify.info/IMAGE.TIF/`. A URL template must include\n * `{TileGroup}`, `{x}`, `{y}`, and `{z}` placeholders, e.g.\n * `http://my.zoomify.info/IMAGE.TIF/{TileGroup}/{z}-{x}-{y}.jpg`.\n * Internet Imaging Protocol (IIP) with JTL extension can be also used with\n * `{tileIndex}` and `{z}` placeholders, e.g.\n * `http://my.zoomify.info?FIF=IMAGE.TIF&JTL={z},{tileIndex}`.\n * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be\n * used instead of defining each one separately in the `urls` option.\n * @property {string} [tierSizeCalculation] Tier size calculation method: `default` or `truncated`.\n * @property {import(\"../size.js\").Size} [size] Size of the image.\n * @property {import(\"../extent.js\").Extent} [extent] Extent for the TileGrid that is created.\n * Default sets the TileGrid in the\n * fourth quadrant, meaning extent is `[0, -height, width, 0]`. To change the\n * extent to the first quadrant (the default for OpenLayers 2) set the extent\n * as `[0, 0, width, height]`.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number} [tileSize=256] Tile size. Same tile size is used for all zoom levels.\n * @property {number} [zDirection] Indicate which resolution should be used\n * by a renderer if the views resolution does not match any resolution of the tile source.\n * If 0, the nearest resolution will be used. If 1, the nearest lower resolution\n * will be used. If -1, the nearest higher resolution will be used.\n */\n/**\n * @classdesc\n * Layer source for tile data in Zoomify format (both Zoomify and Internet\n * Imaging Protocol are supported).\n * @api\n */\nvar Zoomify = /** @class */ (function (_super) {\n    __extends(Zoomify, _super);\n    /**\n     * @param {Options=} opt_options Options.\n     */\n    function Zoomify(opt_options) {\n        var _this = this;\n        var options = opt_options || {};\n        var size = options.size;\n        var tierSizeCalculation = options.tierSizeCalculation !== undefined ?\n            options.tierSizeCalculation :\n            TierSizeCalculation.DEFAULT;\n        var tilePixelRatio = options.tilePixelRatio || 1;\n        var imageWidth = size[0];\n        var imageHeight = size[1];\n        var tierSizeInTiles = [];\n        var tileSize = options.tileSize || DEFAULT_TILE_SIZE;\n        var tileSizeForTierSizeCalculation = tileSize * tilePixelRatio;\n        switch (tierSizeCalculation) {\n            case TierSizeCalculation.DEFAULT:\n                while (imageWidth > tileSizeForTierSizeCalculation || imageHeight > tileSizeForTierSizeCalculation) {\n                    tierSizeInTiles.push([\n                        Math.ceil(imageWidth / tileSizeForTierSizeCalculation),\n                        Math.ceil(imageHeight / tileSizeForTierSizeCalculation)\n                    ]);\n                    tileSizeForTierSizeCalculation += tileSizeForTierSizeCalculation;\n                }\n                break;\n            case TierSizeCalculation.TRUNCATED:\n                var width = imageWidth;\n                var height = imageHeight;\n                while (width > tileSizeForTierSizeCalculation || height > tileSizeForTierSizeCalculation) {\n                    tierSizeInTiles.push([\n                        Math.ceil(width / tileSizeForTierSizeCalculation),\n                        Math.ceil(height / tileSizeForTierSizeCalculation)\n                    ]);\n                    width >>= 1;\n                    height >>= 1;\n                }\n                break;\n            default:\n                assert(false, 53); // Unknown `tierSizeCalculation` configured\n                break;\n        }\n        tierSizeInTiles.push([1, 1]);\n        tierSizeInTiles.reverse();\n        var resolutions = [tilePixelRatio];\n        var tileCountUpToTier = [0];\n        for (var i = 1, ii = tierSizeInTiles.length; i < ii; i++) {\n            resolutions.push(tilePixelRatio << i);\n            tileCountUpToTier.push(tierSizeInTiles[i - 1][0] * tierSizeInTiles[i - 1][1] +\n                tileCountUpToTier[i - 1]);\n        }\n        resolutions.reverse();\n        var tileGrid = new TileGrid({\n            tileSize: tileSize,\n            extent: options.extent || [0, -imageHeight, imageWidth, 0],\n            resolutions: resolutions\n        });\n        var url = options.url;\n        if (url && url.indexOf('{TileGroup}') == -1 && url.indexOf('{tileIndex}') == -1) {\n            url += '{TileGroup}/{z}-{x}-{y}.jpg';\n        }\n        var urls = expandUrl(url);\n        var tileWidth = tileSize * tilePixelRatio;\n        /**\n         * @param {string} template Template.\n         * @return {import(\"../Tile.js\").UrlFunction} Tile URL function.\n         */\n        function createFromTemplate(template) {\n            return (\n            /**\n             * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile Coordinate.\n             * @param {number} pixelRatio Pixel ratio.\n             * @param {import(\"../proj/Projection.js\").default} projection Projection.\n             * @return {string|undefined} Tile URL.\n             */\n            function (tileCoord, pixelRatio, projection) {\n                if (!tileCoord) {\n                    return undefined;\n                }\n                else {\n                    var tileCoordZ = tileCoord[0];\n                    var tileCoordX = tileCoord[1];\n                    var tileCoordY = tileCoord[2];\n                    var tileIndex = tileCoordX +\n                        tileCoordY * tierSizeInTiles[tileCoordZ][0];\n                    var tileGroup = ((tileIndex + tileCountUpToTier[tileCoordZ]) / tileWidth) | 0;\n                    var localContext_1 = {\n                        'z': tileCoordZ,\n                        'x': tileCoordX,\n                        'y': tileCoordY,\n                        'tileIndex': tileIndex,\n                        'TileGroup': 'TileGroup' + tileGroup\n                    };\n                    return template.replace(/\\{(\\w+?)\\}/g, function (m, p) {\n                        return localContext_1[p];\n                    });\n                }\n            });\n        }\n        var tileUrlFunction = createFromTileUrlFunctions(urls.map(createFromTemplate));\n        var ZoomifyTileClass = CustomTile.bind(null, toSize(tileSize * tilePixelRatio));\n        _this = _super.call(this, {\n            attributions: options.attributions,\n            cacheSize: options.cacheSize,\n            crossOrigin: options.crossOrigin,\n            projection: options.projection,\n            tilePixelRatio: tilePixelRatio,\n            reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n            tileClass: ZoomifyTileClass,\n            tileGrid: tileGrid,\n            tileUrlFunction: tileUrlFunction,\n            transition: options.transition\n        }) || this;\n        /**\n         * @inheritDoc\n         */\n        _this.zDirection = options.zDirection;\n        return _this;\n    }\n    return Zoomify;\n}(TileImage));\nexport default Zoomify;\n//# sourceMappingURL=Zoomify.js.map"]},"metadata":{},"sourceType":"module"}