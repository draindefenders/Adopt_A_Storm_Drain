{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/format/filter/IsLike\n */\n\n\nimport Comparison from './Comparison.js';\n/**\n * @classdesc\n * Represents a `<PropertyIsLike>` comparison operator.\n * @api\n */\n\nvar IsLike =\n/** @class */\nfunction (_super) {\n  __extends(IsLike, _super);\n  /**\n   * [constructor description]\n   * @param {!string} propertyName Name of the context property to compare.\n   * @param {!string} pattern Text pattern.\n   * @param {string=} opt_wildCard Pattern character which matches any sequence of\n   *    zero or more string characters. Default is '*'.\n   * @param {string=} opt_singleChar pattern character which matches any single\n   *    string character. Default is '.'.\n   * @param {string=} opt_escapeChar Escape character which can be used to escape\n   *    the pattern characters. Default is '!'.\n   * @param {boolean=} opt_matchCase Case-sensitive?\n   */\n\n\n  function IsLike(propertyName, pattern, opt_wildCard, opt_singleChar, opt_escapeChar, opt_matchCase) {\n    var _this = _super.call(this, 'PropertyIsLike', propertyName) || this;\n    /**\n     * @type {!string}\n     */\n\n\n    _this.pattern = pattern;\n    /**\n     * @type {!string}\n     */\n\n    _this.wildCard = opt_wildCard !== undefined ? opt_wildCard : '*';\n    /**\n     * @type {!string}\n     */\n\n    _this.singleChar = opt_singleChar !== undefined ? opt_singleChar : '.';\n    /**\n     * @type {!string}\n     */\n\n    _this.escapeChar = opt_escapeChar !== undefined ? opt_escapeChar : '!';\n    /**\n     * @type {boolean|undefined}\n     */\n\n    _this.matchCase = opt_matchCase;\n    return _this;\n  }\n\n  return IsLike;\n}(Comparison);\n\nexport default IsLike;","map":{"version":3,"sources":["../../src/format/filter/IsLike.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAGA,OAAO,UAAP,MAAuB,iBAAvB;AAEA;;;;;;AAKA,IAAA,MAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAqB,EAAA,SAAA,CAAA,MAAA,EAAA,MAAA,CAAA;AAEnB;;;;;;;;;;;;;;AAYA,WAAA,MAAA,CAAY,YAAZ,EAA0B,OAA1B,EAAmC,YAAnC,EAAiD,cAAjD,EAAiE,cAAjE,EAAiF,aAAjF,EAA8F;AAA9F,QAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,gBAAN,EAAwB,YAAxB,KAAqC,IADvC;AAGE;;;;;AAGA,IAAA,KAAI,CAAC,OAAL,GAAe,OAAf;AAEA;;;;AAGA,IAAA,KAAI,CAAC,QAAL,GAAiB,YAAY,KAAK,SAAlB,GAA+B,YAA/B,GAA8C,GAA9D;AAEA;;;;AAGA,IAAA,KAAI,CAAC,UAAL,GAAmB,cAAc,KAAK,SAApB,GAAiC,cAAjC,GAAkD,GAApE;AAEA;;;;AAGA,IAAA,KAAI,CAAC,UAAL,GAAmB,cAAc,KAAK,SAApB,GAAiC,cAAjC,GAAkD,GAApE;AAEA;;;;AAGA,IAAA,KAAI,CAAC,SAAL,GAAiB,aAAjB;;AAED;;AACH,SAAA,MAAA;AAAC,CA3CD,CAAqB,UAArB,CAAA;;AA6CA,eAAe,MAAf","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/format/filter/IsLike\n */\nimport Comparison from './Comparison.js';\n/**\n * @classdesc\n * Represents a `<PropertyIsLike>` comparison operator.\n * @api\n */\nvar IsLike = /** @class */ (function (_super) {\n    __extends(IsLike, _super);\n    /**\n     * [constructor description]\n     * @param {!string} propertyName Name of the context property to compare.\n     * @param {!string} pattern Text pattern.\n     * @param {string=} opt_wildCard Pattern character which matches any sequence of\n     *    zero or more string characters. Default is '*'.\n     * @param {string=} opt_singleChar pattern character which matches any single\n     *    string character. Default is '.'.\n     * @param {string=} opt_escapeChar Escape character which can be used to escape\n     *    the pattern characters. Default is '!'.\n     * @param {boolean=} opt_matchCase Case-sensitive?\n     */\n    function IsLike(propertyName, pattern, opt_wildCard, opt_singleChar, opt_escapeChar, opt_matchCase) {\n        var _this = _super.call(this, 'PropertyIsLike', propertyName) || this;\n        /**\n         * @type {!string}\n         */\n        _this.pattern = pattern;\n        /**\n         * @type {!string}\n         */\n        _this.wildCard = (opt_wildCard !== undefined) ? opt_wildCard : '*';\n        /**\n         * @type {!string}\n         */\n        _this.singleChar = (opt_singleChar !== undefined) ? opt_singleChar : '.';\n        /**\n         * @type {!string}\n         */\n        _this.escapeChar = (opt_escapeChar !== undefined) ? opt_escapeChar : '!';\n        /**\n         * @type {boolean|undefined}\n         */\n        _this.matchCase = opt_matchCase;\n        return _this;\n    }\n    return IsLike;\n}(Comparison));\nexport default IsLike;\n//# sourceMappingURL=IsLike.js.map"]},"metadata":{},"sourceType":"module"}