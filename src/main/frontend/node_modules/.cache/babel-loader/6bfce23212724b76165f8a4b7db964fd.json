{"ast":null,"code":"/**\n * @module ol/render/canvas/ExecutorGroup\n */\nimport { numberSafeCompareFunction } from '../../array.js';\nimport { createCanvasContext2D } from '../../dom.js';\nimport { buffer, createEmpty, extendCoordinate } from '../../extent.js';\nimport { transform2D } from '../../geom/flat/transform.js';\nimport { isEmpty } from '../../obj.js';\nimport BuilderType from './BuilderType.js';\nimport { create as createTransform, compose as composeTransform } from '../../transform.js';\nimport Executor from './Executor.js';\n/**\n * @const\n * @type {Array<BuilderType>}\n */\n\nvar ORDER = [BuilderType.POLYGON, BuilderType.CIRCLE, BuilderType.LINE_STRING, BuilderType.IMAGE, BuilderType.TEXT, BuilderType.DEFAULT];\n\nvar ExecutorGroup =\n/** @class */\nfunction () {\n  /**\n   * @param {import(\"../../extent.js\").Extent} maxExtent Max extent for clipping. When a\n   * `maxExtent` was set on the Buillder for this executor group, the same `maxExtent`\n   * should be set here, unless the target context does not exceet that extent (which\n   * can be the case when rendering to tiles).\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {boolean} overlaps The executor group can have overlapping geometries.\n   * @param {!Object<string, !Object<BuilderType, import(\"./Builder.js\").SerializableInstructions>>} allInstructions\n   * The serializable instructions.\n   * @param {number=} opt_renderBuffer Optional rendering buffer.\n   */\n  function ExecutorGroup(maxExtent, resolution, pixelRatio, overlaps, allInstructions, opt_renderBuffer) {\n    /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.maxExtent_ = maxExtent;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.overlaps_ = overlaps;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.pixelRatio_ = pixelRatio;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.resolution_ = resolution;\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n\n    this.renderBuffer_ = opt_renderBuffer;\n    /**\n     * @private\n     * @type {!Object<string, !Object<BuilderType, import(\"./Executor\").default>>}\n     */\n\n    this.executorsByZIndex_ = {};\n    /**\n     * @private\n     * @type {CanvasRenderingContext2D}\n     */\n\n    this.hitDetectionContext_ = null;\n    /**\n     * @private\n     * @type {import(\"../../transform.js\").Transform}\n     */\n\n    this.hitDetectionTransform_ = createTransform();\n    this.createExecutors_(allInstructions);\n  }\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   */\n\n\n  ExecutorGroup.prototype.clip = function (context, transform) {\n    var flatClipCoords = this.getClipCoords(transform);\n    context.beginPath();\n    context.moveTo(flatClipCoords[0], flatClipCoords[1]);\n    context.lineTo(flatClipCoords[2], flatClipCoords[3]);\n    context.lineTo(flatClipCoords[4], flatClipCoords[5]);\n    context.lineTo(flatClipCoords[6], flatClipCoords[7]);\n    context.clip();\n  };\n  /**\n   * Create executors and populate them using the provided instructions.\n   * @private\n   * @param {!Object<string, !Object<BuilderType, import(\"./Builder.js\").SerializableInstructions>>} allInstructions The serializable instructions\n   */\n\n\n  ExecutorGroup.prototype.createExecutors_ = function (allInstructions) {\n    for (var zIndex in allInstructions) {\n      var executors = this.executorsByZIndex_[zIndex];\n\n      if (executors === undefined) {\n        executors = {};\n        this.executorsByZIndex_[zIndex] = executors;\n      }\n\n      var instructionByZindex = allInstructions[zIndex];\n\n      for (var builderType in instructionByZindex) {\n        var instructions = instructionByZindex[builderType];\n        executors[builderType] = new Executor(this.resolution_, this.pixelRatio_, this.overlaps_, instructions);\n      }\n    }\n  };\n  /**\n   * @param {Array<BuilderType>} executors Executors.\n   * @return {boolean} Has executors of the provided types.\n   */\n\n\n  ExecutorGroup.prototype.hasExecutors = function (executors) {\n    for (var zIndex in this.executorsByZIndex_) {\n      var candidates = this.executorsByZIndex_[zIndex];\n\n      for (var i = 0, ii = executors.length; i < ii; ++i) {\n        if (executors[i] in candidates) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  };\n  /**\n   * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {number} rotation Rotation.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @param {function(import(\"../../Feature.js\").FeatureLike): T} callback Feature callback.\n   * @param {Array<import(\"../../Feature.js\").FeatureLike>} declutteredFeatures Decluttered features.\n   * @return {T|undefined} Callback result.\n   * @template T\n   */\n\n\n  ExecutorGroup.prototype.forEachFeatureAtCoordinate = function (coordinate, resolution, rotation, hitTolerance, callback, declutteredFeatures) {\n    hitTolerance = Math.round(hitTolerance);\n    var contextSize = hitTolerance * 2 + 1;\n    var transform = composeTransform(this.hitDetectionTransform_, hitTolerance + 0.5, hitTolerance + 0.5, 1 / resolution, -1 / resolution, -rotation, -coordinate[0], -coordinate[1]);\n\n    if (!this.hitDetectionContext_) {\n      this.hitDetectionContext_ = createCanvasContext2D(contextSize, contextSize);\n    }\n\n    var context = this.hitDetectionContext_;\n\n    if (context.canvas.width !== contextSize || context.canvas.height !== contextSize) {\n      context.canvas.width = contextSize;\n      context.canvas.height = contextSize;\n    } else {\n      context.clearRect(0, 0, contextSize, contextSize);\n    }\n    /**\n     * @type {import(\"../../extent.js\").Extent}\n     */\n\n\n    var hitExtent;\n\n    if (this.renderBuffer_ !== undefined) {\n      hitExtent = createEmpty();\n      extendCoordinate(hitExtent, coordinate);\n      buffer(hitExtent, resolution * (this.renderBuffer_ + hitTolerance), hitExtent);\n    }\n\n    var mask = getCircleArray(hitTolerance);\n    var builderType;\n    /**\n     * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n     * @return {?} Callback result.\n     */\n\n    function featureCallback(feature) {\n      var imageData = context.getImageData(0, 0, contextSize, contextSize).data;\n\n      for (var i_1 = 0; i_1 < contextSize; i_1++) {\n        for (var j_1 = 0; j_1 < contextSize; j_1++) {\n          if (mask[i_1][j_1]) {\n            if (imageData[(j_1 * contextSize + i_1) * 4 + 3] > 0) {\n              var result_1 = void 0;\n\n              if (!(declutteredFeatures && (builderType == BuilderType.IMAGE || builderType == BuilderType.TEXT)) || declutteredFeatures.indexOf(feature) !== -1) {\n                result_1 = callback(feature);\n              }\n\n              if (result_1) {\n                return result_1;\n              } else {\n                context.clearRect(0, 0, contextSize, contextSize);\n                return undefined;\n              }\n            }\n          }\n        }\n      }\n    }\n    /** @type {Array<number>} */\n\n\n    var zs = Object.keys(this.executorsByZIndex_).map(Number);\n    zs.sort(numberSafeCompareFunction);\n    var i, j, executors, executor, result;\n\n    for (i = zs.length - 1; i >= 0; --i) {\n      var zIndexKey = zs[i].toString();\n      executors = this.executorsByZIndex_[zIndexKey];\n\n      for (j = ORDER.length - 1; j >= 0; --j) {\n        builderType = ORDER[j];\n        executor = executors[builderType];\n\n        if (executor !== undefined) {\n          result = executor.executeHitDetection(context, transform, rotation, featureCallback, hitExtent);\n\n          if (result) {\n            return result;\n          }\n        }\n      }\n    }\n\n    return undefined;\n  };\n  /**\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   * @return {Array<number>} Clip coordinates.\n   */\n\n\n  ExecutorGroup.prototype.getClipCoords = function (transform) {\n    var maxExtent = this.maxExtent_;\n\n    if (!maxExtent) {\n      return null;\n    }\n\n    var minX = maxExtent[0];\n    var minY = maxExtent[1];\n    var maxX = maxExtent[2];\n    var maxY = maxExtent[3];\n    var flatClipCoords = [minX, minY, minX, maxY, maxX, maxY, maxX, minY];\n    transform2D(flatClipCoords, 0, 8, 2, transform, flatClipCoords);\n    return flatClipCoords;\n  };\n  /**\n   * @return {boolean} Is empty.\n   */\n\n\n  ExecutorGroup.prototype.isEmpty = function () {\n    return isEmpty(this.executorsByZIndex_);\n  };\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   * @param {number} viewRotation View rotation.\n   * @param {boolean} snapToPixel Snap point symbols and test to integer pixel.\n   * @param {Array<BuilderType>=} opt_builderTypes Ordered replay types to replay.\n   *     Default is {@link module:ol/render/replay~ORDER}\n   * @param {Object<string, import(\"../canvas.js\").DeclutterGroup>=} opt_declutterReplays Declutter replays.\n   */\n\n\n  ExecutorGroup.prototype.execute = function (context, transform, viewRotation, snapToPixel, opt_builderTypes, opt_declutterReplays) {\n    /** @type {Array<number>} */\n    var zs = Object.keys(this.executorsByZIndex_).map(Number);\n    zs.sort(numberSafeCompareFunction); // setup clipping so that the parts of over-simplified geometries are not\n    // visible outside the current extent when panning\n\n    if (this.maxExtent_) {\n      context.save();\n      this.clip(context, transform);\n    }\n\n    var builderTypes = opt_builderTypes ? opt_builderTypes : ORDER;\n    var i, ii, j, jj, replays, replay;\n\n    for (i = 0, ii = zs.length; i < ii; ++i) {\n      var zIndexKey = zs[i].toString();\n      replays = this.executorsByZIndex_[zIndexKey];\n\n      for (j = 0, jj = builderTypes.length; j < jj; ++j) {\n        var builderType = builderTypes[j];\n        replay = replays[builderType];\n\n        if (replay !== undefined) {\n          if (opt_declutterReplays && (builderType == BuilderType.IMAGE || builderType == BuilderType.TEXT)) {\n            var declutter = opt_declutterReplays[zIndexKey];\n\n            if (!declutter) {\n              opt_declutterReplays[zIndexKey] = [replay, transform.slice(0)];\n            } else {\n              declutter.push(replay, transform.slice(0));\n            }\n          } else {\n            replay.execute(context, transform, viewRotation, snapToPixel);\n          }\n        }\n      }\n    }\n\n    if (this.maxExtent_) {\n      context.restore();\n    }\n  };\n\n  return ExecutorGroup;\n}();\n/**\n * This cache is used for storing calculated pixel circles for increasing performance.\n * It is a static property to allow each Replaygroup to access it.\n * @type {Object<number, Array<Array<(boolean|undefined)>>>}\n */\n\n\nvar circleArrayCache = {\n  0: [[true]]\n};\n/**\n * This method fills a row in the array from the given coordinate to the\n * middle with `true`.\n * @param {Array<Array<(boolean|undefined)>>} array The array that will be altered.\n * @param {number} x X coordinate.\n * @param {number} y Y coordinate.\n */\n\nfunction fillCircleArrayRowToMiddle(array, x, y) {\n  var i;\n  var radius = Math.floor(array.length / 2);\n\n  if (x >= radius) {\n    for (i = radius; i < x; i++) {\n      array[i][y] = true;\n    }\n  } else if (x < radius) {\n    for (i = x + 1; i < radius; i++) {\n      array[i][y] = true;\n    }\n  }\n}\n/**\n * This methods creates a circle inside a fitting array. Points inside the\n * circle are marked by true, points on the outside are undefined.\n * It uses the midpoint circle algorithm.\n * A cache is used to increase performance.\n * @param {number} radius Radius.\n * @returns {Array<Array<(boolean|undefined)>>} An array with marked circle points.\n */\n\n\nexport function getCircleArray(radius) {\n  if (circleArrayCache[radius] !== undefined) {\n    return circleArrayCache[radius];\n  }\n\n  var arraySize = radius * 2 + 1;\n  var arr = new Array(arraySize);\n\n  for (var i = 0; i < arraySize; i++) {\n    arr[i] = new Array(arraySize);\n  }\n\n  var x = radius;\n  var y = 0;\n  var error = 0;\n\n  while (x >= y) {\n    fillCircleArrayRowToMiddle(arr, radius + x, radius + y);\n    fillCircleArrayRowToMiddle(arr, radius + y, radius + x);\n    fillCircleArrayRowToMiddle(arr, radius - y, radius + x);\n    fillCircleArrayRowToMiddle(arr, radius - x, radius + y);\n    fillCircleArrayRowToMiddle(arr, radius - x, radius - y);\n    fillCircleArrayRowToMiddle(arr, radius - y, radius - x);\n    fillCircleArrayRowToMiddle(arr, radius + y, radius - x);\n    fillCircleArrayRowToMiddle(arr, radius + x, radius - y);\n    y++;\n    error += 1 + 2 * y;\n\n    if (2 * (error - x) + 1 > 0) {\n      x -= 1;\n      error += 1 - 2 * x;\n    }\n  }\n\n  circleArrayCache[radius] = arr;\n  return arr;\n}\n/**\n * @param {!Object<string, Array<*>>} declutterReplays Declutter replays.\n * @param {CanvasRenderingContext2D} context Context.\n * @param {number} rotation Rotation.\n * @param {number} opacity Opacity.\n * @param {boolean} snapToPixel Snap point symbols and text to integer pixels.\n * @param {Array<import(\"../../PluggableMap.js\").DeclutterItems>} declutterItems Declutter items.\n */\n\nexport function replayDeclutter(declutterReplays, context, rotation, opacity, snapToPixel, declutterItems) {\n  var zs = Object.keys(declutterReplays).map(Number).sort(numberSafeCompareFunction);\n\n  for (var z = 0, zz = zs.length; z < zz; ++z) {\n    var executorData = declutterReplays[zs[z].toString()];\n    var currentExecutor = void 0;\n\n    for (var i = 0, ii = executorData.length; i < ii;) {\n      var executor = executorData[i++];\n\n      if (executor !== currentExecutor) {\n        currentExecutor = executor;\n        declutterItems.push({\n          items: executor.declutterItems,\n          opacity: opacity\n        });\n      }\n\n      var transform = executorData[i++];\n      executor.execute(context, transform, rotation, snapToPixel);\n    }\n  }\n}\nexport default ExecutorGroup;","map":{"version":3,"sources":["../../src/render/canvas/ExecutorGroup.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @module ol/render/canvas/ExecutorGroup\n */\nimport { numberSafeCompareFunction } from '../../array.js';\nimport { createCanvasContext2D } from '../../dom.js';\nimport { buffer, createEmpty, extendCoordinate } from '../../extent.js';\nimport { transform2D } from '../../geom/flat/transform.js';\nimport { isEmpty } from '../../obj.js';\nimport BuilderType from './BuilderType.js';\nimport { create as createTransform, compose as composeTransform } from '../../transform.js';\nimport Executor from './Executor.js';\n/**\n * @const\n * @type {Array<BuilderType>}\n */\nvar ORDER = [\n    BuilderType.POLYGON,\n    BuilderType.CIRCLE,\n    BuilderType.LINE_STRING,\n    BuilderType.IMAGE,\n    BuilderType.TEXT,\n    BuilderType.DEFAULT\n];\nvar ExecutorGroup = /** @class */ (function () {\n    /**\n     * @param {import(\"../../extent.js\").Extent} maxExtent Max extent for clipping. When a\n     * `maxExtent` was set on the Buillder for this executor group, the same `maxExtent`\n     * should be set here, unless the target context does not exceet that extent (which\n     * can be the case when rendering to tiles).\n     * @param {number} resolution Resolution.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {boolean} overlaps The executor group can have overlapping geometries.\n     * @param {!Object<string, !Object<BuilderType, import(\"./Builder.js\").SerializableInstructions>>} allInstructions\n     * The serializable instructions.\n     * @param {number=} opt_renderBuffer Optional rendering buffer.\n     */\n    function ExecutorGroup(maxExtent, resolution, pixelRatio, overlaps, allInstructions, opt_renderBuffer) {\n        /**\n         * @private\n         * @type {import(\"../../extent.js\").Extent}\n         */\n        this.maxExtent_ = maxExtent;\n        /**\n         * @private\n         * @type {boolean}\n         */\n        this.overlaps_ = overlaps;\n        /**\n         * @private\n         * @type {number}\n         */\n        this.pixelRatio_ = pixelRatio;\n        /**\n         * @private\n         * @type {number}\n         */\n        this.resolution_ = resolution;\n        /**\n         * @private\n         * @type {number|undefined}\n         */\n        this.renderBuffer_ = opt_renderBuffer;\n        /**\n         * @private\n         * @type {!Object<string, !Object<BuilderType, import(\"./Executor\").default>>}\n         */\n        this.executorsByZIndex_ = {};\n        /**\n         * @private\n         * @type {CanvasRenderingContext2D}\n         */\n        this.hitDetectionContext_ = null;\n        /**\n         * @private\n         * @type {import(\"../../transform.js\").Transform}\n         */\n        this.hitDetectionTransform_ = createTransform();\n        this.createExecutors_(allInstructions);\n    }\n    /**\n     * @param {CanvasRenderingContext2D} context Context.\n     * @param {import(\"../../transform.js\").Transform} transform Transform.\n     */\n    ExecutorGroup.prototype.clip = function (context, transform) {\n        var flatClipCoords = this.getClipCoords(transform);\n        context.beginPath();\n        context.moveTo(flatClipCoords[0], flatClipCoords[1]);\n        context.lineTo(flatClipCoords[2], flatClipCoords[3]);\n        context.lineTo(flatClipCoords[4], flatClipCoords[5]);\n        context.lineTo(flatClipCoords[6], flatClipCoords[7]);\n        context.clip();\n    };\n    /**\n     * Create executors and populate them using the provided instructions.\n     * @private\n     * @param {!Object<string, !Object<BuilderType, import(\"./Builder.js\").SerializableInstructions>>} allInstructions The serializable instructions\n     */\n    ExecutorGroup.prototype.createExecutors_ = function (allInstructions) {\n        for (var zIndex in allInstructions) {\n            var executors = this.executorsByZIndex_[zIndex];\n            if (executors === undefined) {\n                executors = {};\n                this.executorsByZIndex_[zIndex] = executors;\n            }\n            var instructionByZindex = allInstructions[zIndex];\n            for (var builderType in instructionByZindex) {\n                var instructions = instructionByZindex[builderType];\n                executors[builderType] = new Executor(this.resolution_, this.pixelRatio_, this.overlaps_, instructions);\n            }\n        }\n    };\n    /**\n     * @param {Array<BuilderType>} executors Executors.\n     * @return {boolean} Has executors of the provided types.\n     */\n    ExecutorGroup.prototype.hasExecutors = function (executors) {\n        for (var zIndex in this.executorsByZIndex_) {\n            var candidates = this.executorsByZIndex_[zIndex];\n            for (var i = 0, ii = executors.length; i < ii; ++i) {\n                if (executors[i] in candidates) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\n    /**\n     * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n     * @param {number} resolution Resolution.\n     * @param {number} rotation Rotation.\n     * @param {number} hitTolerance Hit tolerance in pixels.\n     * @param {function(import(\"../../Feature.js\").FeatureLike): T} callback Feature callback.\n     * @param {Array<import(\"../../Feature.js\").FeatureLike>} declutteredFeatures Decluttered features.\n     * @return {T|undefined} Callback result.\n     * @template T\n     */\n    ExecutorGroup.prototype.forEachFeatureAtCoordinate = function (coordinate, resolution, rotation, hitTolerance, callback, declutteredFeatures) {\n        hitTolerance = Math.round(hitTolerance);\n        var contextSize = hitTolerance * 2 + 1;\n        var transform = composeTransform(this.hitDetectionTransform_, hitTolerance + 0.5, hitTolerance + 0.5, 1 / resolution, -1 / resolution, -rotation, -coordinate[0], -coordinate[1]);\n        if (!this.hitDetectionContext_) {\n            this.hitDetectionContext_ = createCanvasContext2D(contextSize, contextSize);\n        }\n        var context = this.hitDetectionContext_;\n        if (context.canvas.width !== contextSize || context.canvas.height !== contextSize) {\n            context.canvas.width = contextSize;\n            context.canvas.height = contextSize;\n        }\n        else {\n            context.clearRect(0, 0, contextSize, contextSize);\n        }\n        /**\n         * @type {import(\"../../extent.js\").Extent}\n         */\n        var hitExtent;\n        if (this.renderBuffer_ !== undefined) {\n            hitExtent = createEmpty();\n            extendCoordinate(hitExtent, coordinate);\n            buffer(hitExtent, resolution * (this.renderBuffer_ + hitTolerance), hitExtent);\n        }\n        var mask = getCircleArray(hitTolerance);\n        var builderType;\n        /**\n         * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n         * @return {?} Callback result.\n         */\n        function featureCallback(feature) {\n            var imageData = context.getImageData(0, 0, contextSize, contextSize).data;\n            for (var i_1 = 0; i_1 < contextSize; i_1++) {\n                for (var j_1 = 0; j_1 < contextSize; j_1++) {\n                    if (mask[i_1][j_1]) {\n                        if (imageData[(j_1 * contextSize + i_1) * 4 + 3] > 0) {\n                            var result_1 = void 0;\n                            if (!(declutteredFeatures && (builderType == BuilderType.IMAGE || builderType == BuilderType.TEXT)) ||\n                                declutteredFeatures.indexOf(feature) !== -1) {\n                                result_1 = callback(feature);\n                            }\n                            if (result_1) {\n                                return result_1;\n                            }\n                            else {\n                                context.clearRect(0, 0, contextSize, contextSize);\n                                return undefined;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        /** @type {Array<number>} */\n        var zs = Object.keys(this.executorsByZIndex_).map(Number);\n        zs.sort(numberSafeCompareFunction);\n        var i, j, executors, executor, result;\n        for (i = zs.length - 1; i >= 0; --i) {\n            var zIndexKey = zs[i].toString();\n            executors = this.executorsByZIndex_[zIndexKey];\n            for (j = ORDER.length - 1; j >= 0; --j) {\n                builderType = ORDER[j];\n                executor = executors[builderType];\n                if (executor !== undefined) {\n                    result = executor.executeHitDetection(context, transform, rotation, featureCallback, hitExtent);\n                    if (result) {\n                        return result;\n                    }\n                }\n            }\n        }\n        return undefined;\n    };\n    /**\n     * @param {import(\"../../transform.js\").Transform} transform Transform.\n     * @return {Array<number>} Clip coordinates.\n     */\n    ExecutorGroup.prototype.getClipCoords = function (transform) {\n        var maxExtent = this.maxExtent_;\n        if (!maxExtent) {\n            return null;\n        }\n        var minX = maxExtent[0];\n        var minY = maxExtent[1];\n        var maxX = maxExtent[2];\n        var maxY = maxExtent[3];\n        var flatClipCoords = [minX, minY, minX, maxY, maxX, maxY, maxX, minY];\n        transform2D(flatClipCoords, 0, 8, 2, transform, flatClipCoords);\n        return flatClipCoords;\n    };\n    /**\n     * @return {boolean} Is empty.\n     */\n    ExecutorGroup.prototype.isEmpty = function () {\n        return isEmpty(this.executorsByZIndex_);\n    };\n    /**\n     * @param {CanvasRenderingContext2D} context Context.\n     * @param {import(\"../../transform.js\").Transform} transform Transform.\n     * @param {number} viewRotation View rotation.\n     * @param {boolean} snapToPixel Snap point symbols and test to integer pixel.\n     * @param {Array<BuilderType>=} opt_builderTypes Ordered replay types to replay.\n     *     Default is {@link module:ol/render/replay~ORDER}\n     * @param {Object<string, import(\"../canvas.js\").DeclutterGroup>=} opt_declutterReplays Declutter replays.\n     */\n    ExecutorGroup.prototype.execute = function (context, transform, viewRotation, snapToPixel, opt_builderTypes, opt_declutterReplays) {\n        /** @type {Array<number>} */\n        var zs = Object.keys(this.executorsByZIndex_).map(Number);\n        zs.sort(numberSafeCompareFunction);\n        // setup clipping so that the parts of over-simplified geometries are not\n        // visible outside the current extent when panning\n        if (this.maxExtent_) {\n            context.save();\n            this.clip(context, transform);\n        }\n        var builderTypes = opt_builderTypes ? opt_builderTypes : ORDER;\n        var i, ii, j, jj, replays, replay;\n        for (i = 0, ii = zs.length; i < ii; ++i) {\n            var zIndexKey = zs[i].toString();\n            replays = this.executorsByZIndex_[zIndexKey];\n            for (j = 0, jj = builderTypes.length; j < jj; ++j) {\n                var builderType = builderTypes[j];\n                replay = replays[builderType];\n                if (replay !== undefined) {\n                    if (opt_declutterReplays &&\n                        (builderType == BuilderType.IMAGE || builderType == BuilderType.TEXT)) {\n                        var declutter = opt_declutterReplays[zIndexKey];\n                        if (!declutter) {\n                            opt_declutterReplays[zIndexKey] = [replay, transform.slice(0)];\n                        }\n                        else {\n                            declutter.push(replay, transform.slice(0));\n                        }\n                    }\n                    else {\n                        replay.execute(context, transform, viewRotation, snapToPixel);\n                    }\n                }\n            }\n        }\n        if (this.maxExtent_) {\n            context.restore();\n        }\n    };\n    return ExecutorGroup;\n}());\n/**\n * This cache is used for storing calculated pixel circles for increasing performance.\n * It is a static property to allow each Replaygroup to access it.\n * @type {Object<number, Array<Array<(boolean|undefined)>>>}\n */\nvar circleArrayCache = {\n    0: [[true]]\n};\n/**\n * This method fills a row in the array from the given coordinate to the\n * middle with `true`.\n * @param {Array<Array<(boolean|undefined)>>} array The array that will be altered.\n * @param {number} x X coordinate.\n * @param {number} y Y coordinate.\n */\nfunction fillCircleArrayRowToMiddle(array, x, y) {\n    var i;\n    var radius = Math.floor(array.length / 2);\n    if (x >= radius) {\n        for (i = radius; i < x; i++) {\n            array[i][y] = true;\n        }\n    }\n    else if (x < radius) {\n        for (i = x + 1; i < radius; i++) {\n            array[i][y] = true;\n        }\n    }\n}\n/**\n * This methods creates a circle inside a fitting array. Points inside the\n * circle are marked by true, points on the outside are undefined.\n * It uses the midpoint circle algorithm.\n * A cache is used to increase performance.\n * @param {number} radius Radius.\n * @returns {Array<Array<(boolean|undefined)>>} An array with marked circle points.\n */\nexport function getCircleArray(radius) {\n    if (circleArrayCache[radius] !== undefined) {\n        return circleArrayCache[radius];\n    }\n    var arraySize = radius * 2 + 1;\n    var arr = new Array(arraySize);\n    for (var i = 0; i < arraySize; i++) {\n        arr[i] = new Array(arraySize);\n    }\n    var x = radius;\n    var y = 0;\n    var error = 0;\n    while (x >= y) {\n        fillCircleArrayRowToMiddle(arr, radius + x, radius + y);\n        fillCircleArrayRowToMiddle(arr, radius + y, radius + x);\n        fillCircleArrayRowToMiddle(arr, radius - y, radius + x);\n        fillCircleArrayRowToMiddle(arr, radius - x, radius + y);\n        fillCircleArrayRowToMiddle(arr, radius - x, radius - y);\n        fillCircleArrayRowToMiddle(arr, radius - y, radius - x);\n        fillCircleArrayRowToMiddle(arr, radius + y, radius - x);\n        fillCircleArrayRowToMiddle(arr, radius + x, radius - y);\n        y++;\n        error += 1 + 2 * y;\n        if (2 * (error - x) + 1 > 0) {\n            x -= 1;\n            error += 1 - 2 * x;\n        }\n    }\n    circleArrayCache[radius] = arr;\n    return arr;\n}\n/**\n * @param {!Object<string, Array<*>>} declutterReplays Declutter replays.\n * @param {CanvasRenderingContext2D} context Context.\n * @param {number} rotation Rotation.\n * @param {number} opacity Opacity.\n * @param {boolean} snapToPixel Snap point symbols and text to integer pixels.\n * @param {Array<import(\"../../PluggableMap.js\").DeclutterItems>} declutterItems Declutter items.\n */\nexport function replayDeclutter(declutterReplays, context, rotation, opacity, snapToPixel, declutterItems) {\n    var zs = Object.keys(declutterReplays).map(Number).sort(numberSafeCompareFunction);\n    for (var z = 0, zz = zs.length; z < zz; ++z) {\n        var executorData = declutterReplays[zs[z].toString()];\n        var currentExecutor = void 0;\n        for (var i = 0, ii = executorData.length; i < ii;) {\n            var executor = executorData[i++];\n            if (executor !== currentExecutor) {\n                currentExecutor = executor;\n                declutterItems.push({\n                    items: executor.declutterItems,\n                    opacity: opacity\n                });\n            }\n            var transform = executorData[i++];\n            executor.execute(context, transform, rotation, snapToPixel);\n        }\n    }\n}\nexport default ExecutorGroup;\n//# sourceMappingURL=ExecutorGroup.js.map"]},"metadata":{},"sourceType":"module"}