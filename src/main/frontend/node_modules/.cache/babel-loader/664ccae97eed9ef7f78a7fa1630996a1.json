{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/control/ScaleLine\n */\n\n\nimport { getChangeEventType } from '../Object.js';\nimport { assert } from '../asserts.js';\nimport Control from './Control.js';\nimport { CLASS_UNSELECTABLE } from '../css.js';\nimport { getPointResolution, METERS_PER_UNIT } from '../proj.js';\nimport ProjUnits from '../proj/Units.js';\n/**\n * @type {string}\n */\n\nvar UNITS_PROP = 'units';\n/**\n * Units for the scale line. Supported values are `'degrees'`, `'imperial'`,\n * `'nautical'`, `'metric'`, `'us'`.\n * @enum {string}\n */\n\nexport var Units = {\n  DEGREES: 'degrees',\n  IMPERIAL: 'imperial',\n  NAUTICAL: 'nautical',\n  METRIC: 'metric',\n  US: 'us'\n};\n/**\n * @const\n * @type {Array<number>}\n */\n\nvar LEADING_DIGITS = [1, 2, 5];\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-scale-line'] CSS Class name.\n * @property {number} [minWidth=64] Minimum width in pixels.\n * @property {function(import(\"../MapEvent.js\").default)} [render] Function called when the control\n * should be re-rendered. This is called in a `requestAnimationFrame` callback.\n * @property {HTMLElement|string} [target] Specify a target if you want the control\n * to be rendered outside of the map's viewport.\n * @property {Units|string} [units='metric'] Units.\n * @property {boolean} [bar=false] Render scalebars instead of a line.\n * @property {number} [steps=4] Number of steps the scalebar should use. Use even numbers\n * for best results. Only applies when `bar` is `true`.\n * @property {boolean} [text=false] Render the text scale above of the scalebar. Only applies\n * when `bar` is `true`.\n */\n\n/**\n * @classdesc\n * A control displaying rough y-axis distances, calculated for the center of the\n * viewport. For conformal projections (e.g. EPSG:3857, the default view\n * projection in OpenLayers), the scale is valid for all directions.\n * No scale line will be shown when the y-axis distance of a pixel at the\n * viewport center cannot be calculated in the view projection.\n * By default the scale line will show in the bottom left portion of the map,\n * but this can be changed by using the css selector `.ol-scale-line`.\n * When specifying `bar` as `true`, a scalebar will be rendered instead\n * of a scaleline.\n *\n * @api\n */\n\nvar ScaleLine =\n/** @class */\nfunction (_super) {\n  __extends(ScaleLine, _super);\n  /**\n   * @param {Options=} opt_options Scale line options.\n   */\n\n\n  function ScaleLine(opt_options) {\n    var _this = this;\n\n    var options = opt_options ? opt_options : {};\n    var className = options.className !== undefined ? options.className : options.bar ? 'ol-scale-bar' : 'ol-scale-line';\n    _this = _super.call(this, {\n      element: document.createElement('div'),\n      render: options.render || render,\n      target: options.target\n    }) || this;\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n\n    _this.innerElement_ = document.createElement('div');\n    _this.innerElement_.className = className + '-inner';\n    _this.element.className = className + ' ' + CLASS_UNSELECTABLE;\n\n    _this.element.appendChild(_this.innerElement_);\n    /**\n     * @private\n     * @type {?import(\"../View.js\").State}\n     */\n\n\n    _this.viewState_ = null;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.minWidth_ = options.minWidth !== undefined ? options.minWidth : 64;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    _this.renderedVisible_ = false;\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n\n    _this.renderedWidth_ = undefined;\n    /**\n     * @private\n     * @type {string}\n     */\n\n    _this.renderedHTML_ = '';\n\n    _this.addEventListener(getChangeEventType(UNITS_PROP), _this.handleUnitsChanged_);\n\n    _this.setUnits(options.units || Units.METRIC);\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n\n    _this.scaleBar_ = options.bar || false;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.scaleBarSteps_ = options.steps || 4;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    _this.scaleBarText_ = options.text || false;\n    return _this;\n  }\n  /**\n   * Return the units to use in the scale line.\n   * @return {Units} The units\n   * to use in the scale line.\n   * @observable\n   * @api\n   */\n\n\n  ScaleLine.prototype.getUnits = function () {\n    return this.get(UNITS_PROP);\n  };\n  /**\n   * @private\n   */\n\n\n  ScaleLine.prototype.handleUnitsChanged_ = function () {\n    this.updateElement_();\n  };\n  /**\n   * Set the units to use in the scale line.\n   * @param {Units} units The units to use in the scale line.\n   * @observable\n   * @api\n   */\n\n\n  ScaleLine.prototype.setUnits = function (units) {\n    this.set(UNITS_PROP, units);\n  };\n  /**\n   * @private\n   */\n\n\n  ScaleLine.prototype.updateElement_ = function () {\n    var viewState = this.viewState_;\n\n    if (!viewState) {\n      if (this.renderedVisible_) {\n        this.element.style.display = 'none';\n        this.renderedVisible_ = false;\n      }\n\n      return;\n    }\n\n    var center = viewState.center;\n    var projection = viewState.projection;\n    var units = this.getUnits();\n    var pointResolutionUnits = units == Units.DEGREES ? ProjUnits.DEGREES : ProjUnits.METERS;\n    var pointResolution = getPointResolution(projection, viewState.resolution, center, pointResolutionUnits);\n    var nominalCount = this.minWidth_ * pointResolution;\n    var suffix = '';\n\n    if (units == Units.DEGREES) {\n      var metersPerDegree = METERS_PER_UNIT[ProjUnits.DEGREES];\n      nominalCount *= metersPerDegree;\n\n      if (nominalCount < metersPerDegree / 60) {\n        suffix = '\\u2033'; // seconds\n\n        pointResolution *= 3600;\n      } else if (nominalCount < metersPerDegree) {\n        suffix = '\\u2032'; // minutes\n\n        pointResolution *= 60;\n      } else {\n        suffix = '\\u00b0'; // degrees\n      }\n    } else if (units == Units.IMPERIAL) {\n      if (nominalCount < 0.9144) {\n        suffix = 'in';\n        pointResolution /= 0.0254;\n      } else if (nominalCount < 1609.344) {\n        suffix = 'ft';\n        pointResolution /= 0.3048;\n      } else {\n        suffix = 'mi';\n        pointResolution /= 1609.344;\n      }\n    } else if (units == Units.NAUTICAL) {\n      pointResolution /= 1852;\n      suffix = 'nm';\n    } else if (units == Units.METRIC) {\n      if (nominalCount < 0.001) {\n        suffix = 'Î¼m';\n        pointResolution *= 1000000;\n      } else if (nominalCount < 1) {\n        suffix = 'mm';\n        pointResolution *= 1000;\n      } else if (nominalCount < 1000) {\n        suffix = 'm';\n      } else {\n        suffix = 'km';\n        pointResolution /= 1000;\n      }\n    } else if (units == Units.US) {\n      if (nominalCount < 0.9144) {\n        suffix = 'in';\n        pointResolution *= 39.37;\n      } else if (nominalCount < 1609.344) {\n        suffix = 'ft';\n        pointResolution /= 0.30480061;\n      } else {\n        suffix = 'mi';\n        pointResolution /= 1609.3472;\n      }\n    } else {\n      assert(false, 33); // Invalid units\n    }\n\n    var i = 3 * Math.floor(Math.log(this.minWidth_ * pointResolution) / Math.log(10));\n    var count, width, decimalCount;\n\n    while (true) {\n      decimalCount = Math.floor(i / 3);\n      var decimal = Math.pow(10, decimalCount);\n      count = LEADING_DIGITS[(i % 3 + 3) % 3] * decimal;\n      width = Math.round(count / pointResolution);\n\n      if (isNaN(width)) {\n        this.element.style.display = 'none';\n        this.renderedVisible_ = false;\n        return;\n      } else if (width >= this.minWidth_) {\n        break;\n      }\n\n      ++i;\n    }\n\n    var html;\n\n    if (this.scaleBar_) {\n      html = this.createScaleBar(width, count, suffix);\n    } else {\n      html = count.toFixed(decimalCount < 0 ? -decimalCount : 0) + ' ' + suffix;\n    }\n\n    if (this.renderedHTML_ != html) {\n      this.innerElement_.innerHTML = html;\n      this.renderedHTML_ = html;\n    }\n\n    if (this.renderedWidth_ != width) {\n      this.innerElement_.style.width = width + 'px';\n      this.renderedWidth_ = width;\n    }\n\n    if (!this.renderedVisible_) {\n      this.element.style.display = '';\n      this.renderedVisible_ = true;\n    }\n  };\n  /**\n   * @private\n   * @param {number} width The current width of the scalebar.\n   * @param {number} scale The current scale.\n   * @param {string} suffix The suffix to append to the scale text.\n   * @returns {string} The stringified HTML of the scalebar.\n   */\n\n\n  ScaleLine.prototype.createScaleBar = function (width, scale, suffix) {\n    var mapScale = '1 : ' + Math.round(this.getScaleForResolution()).toLocaleString();\n    var scaleSteps = [];\n    var stepWidth = width / this.scaleBarSteps_;\n    var backgroundColor = '#ffffff';\n\n    for (var i = 0; i < this.scaleBarSteps_; i++) {\n      if (i === 0) {\n        // create the first marker at position 0\n        scaleSteps.push(this.createMarker('absolute', i));\n      }\n\n      scaleSteps.push('<div>' + '<div ' + 'class=\"ol-scale-singlebar\" ' + 'style=' + '\"width: ' + stepWidth + 'px;' + 'background-color: ' + backgroundColor + ';\"' + '>' + '</div>' + this.createMarker('relative', i) + (\n      /*render text every second step, except when only 2 steps */\n      i % 2 === 0 || this.scaleBarSteps_ === 2 ? this.createStepText(i, width, false, scale, suffix) : '') + '</div>');\n\n      if (i === this.scaleBarSteps_ - 1) {\n        {\n          /*render text at the end */\n        }\n        scaleSteps.push(this.createStepText(i + 1, width, true, scale, suffix));\n      } // switch colors of steps between black and white\n\n\n      if (backgroundColor === '#ffffff') {\n        backgroundColor = '#000000';\n      } else {\n        backgroundColor = '#ffffff';\n      }\n    }\n\n    var scaleBarText;\n\n    if (this.scaleBarText_) {\n      scaleBarText = '<div ' + 'class=\"ol-scale-text\" ' + 'style=\"width: ' + width + 'px;\">' + mapScale + '</div>';\n    } else {\n      scaleBarText = '';\n    }\n\n    var container = '<div ' + 'style=\"display: flex;\">' + scaleBarText + scaleSteps.join('') + '</div>';\n    return container;\n  };\n  /**\n   * Creates a marker at given position\n   * @param {string} position - The position, absolute or relative\n   * @param {number} i - The iterator\n   * @returns {string} The stringified div containing the marker\n   */\n\n\n  ScaleLine.prototype.createMarker = function (position, i) {\n    var top = position === 'absolute' ? 3 : -10;\n    return '<div ' + 'class=\"ol-scale-step-marker\" ' + 'style=\"position: ' + position + ';' + 'top: ' + top + 'px;\"' + '></div>';\n  };\n  /**\n   * Creates the label for a marker marker at given position\n   * @param {number} i - The iterator\n   * @param {number} width - The width the scalebar will currently use\n   * @param {boolean} isLast - Flag indicating if we add the last step text\n   * @param {number} scale - The current scale for the whole scalebar\n   * @param {string} suffix - The suffix for the scale\n   * @returns {string} The stringified div containing the step text\n   */\n\n\n  ScaleLine.prototype.createStepText = function (i, width, isLast, scale, suffix) {\n    var length = i === 0 ? 0 : Math.round(scale / this.scaleBarSteps_ * i * 100) / 100;\n    var lengthString = length + (i === 0 ? '' : ' ' + suffix);\n    var margin = i === 0 ? -3 : width / this.scaleBarSteps_ * -1;\n    var minWidth = i === 0 ? 0 : width / this.scaleBarSteps_ * 2;\n    return '<div ' + 'class=\"ol-scale-step-text\" ' + 'style=\"' + 'margin-left: ' + margin + 'px;' + 'text-align: ' + (i === 0 ? 'left' : 'center') + '; ' + 'min-width: ' + minWidth + 'px;' + 'left: ' + (isLast ? width + 'px' : 'unset') + ';\"' + '>' + lengthString + '</div>';\n  };\n  /**\n   * Returns the appropriate scale for the given resolution and units.\n   * @return {number} The appropriate scale.\n   */\n\n\n  ScaleLine.prototype.getScaleForResolution = function () {\n    var resolution = this.getMap().getView().getResolution();\n    var dpi = 25.4 / 0.28;\n    var mpu = this.viewState_.projection.getMetersPerUnit();\n    var inchesPerMeter = 39.37;\n    return parseFloat(resolution.toString()) * mpu * inchesPerMeter * dpi;\n  };\n\n  return ScaleLine;\n}(Control);\n/**\n * Update the scale line element.\n * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n * @this {ScaleLine}\n */\n\n\nexport function render(mapEvent) {\n  var frameState = mapEvent.frameState;\n\n  if (!frameState) {\n    this.viewState_ = null;\n  } else {\n    this.viewState_ = frameState.viewState;\n  }\n\n  this.updateElement_();\n}\nexport default ScaleLine;","map":{"version":3,"sources":["../src/control/ScaleLine.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/control/ScaleLine\n */\nimport { getChangeEventType } from '../Object.js';\nimport { assert } from '../asserts.js';\nimport Control from './Control.js';\nimport { CLASS_UNSELECTABLE } from '../css.js';\nimport { getPointResolution, METERS_PER_UNIT } from '../proj.js';\nimport ProjUnits from '../proj/Units.js';\n/**\n * @type {string}\n */\nvar UNITS_PROP = 'units';\n/**\n * Units for the scale line. Supported values are `'degrees'`, `'imperial'`,\n * `'nautical'`, `'metric'`, `'us'`.\n * @enum {string}\n */\nexport var Units = {\n    DEGREES: 'degrees',\n    IMPERIAL: 'imperial',\n    NAUTICAL: 'nautical',\n    METRIC: 'metric',\n    US: 'us'\n};\n/**\n * @const\n * @type {Array<number>}\n */\nvar LEADING_DIGITS = [1, 2, 5];\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-scale-line'] CSS Class name.\n * @property {number} [minWidth=64] Minimum width in pixels.\n * @property {function(import(\"../MapEvent.js\").default)} [render] Function called when the control\n * should be re-rendered. This is called in a `requestAnimationFrame` callback.\n * @property {HTMLElement|string} [target] Specify a target if you want the control\n * to be rendered outside of the map's viewport.\n * @property {Units|string} [units='metric'] Units.\n * @property {boolean} [bar=false] Render scalebars instead of a line.\n * @property {number} [steps=4] Number of steps the scalebar should use. Use even numbers\n * for best results. Only applies when `bar` is `true`.\n * @property {boolean} [text=false] Render the text scale above of the scalebar. Only applies\n * when `bar` is `true`.\n */\n/**\n * @classdesc\n * A control displaying rough y-axis distances, calculated for the center of the\n * viewport. For conformal projections (e.g. EPSG:3857, the default view\n * projection in OpenLayers), the scale is valid for all directions.\n * No scale line will be shown when the y-axis distance of a pixel at the\n * viewport center cannot be calculated in the view projection.\n * By default the scale line will show in the bottom left portion of the map,\n * but this can be changed by using the css selector `.ol-scale-line`.\n * When specifying `bar` as `true`, a scalebar will be rendered instead\n * of a scaleline.\n *\n * @api\n */\nvar ScaleLine = /** @class */ (function (_super) {\n    __extends(ScaleLine, _super);\n    /**\n     * @param {Options=} opt_options Scale line options.\n     */\n    function ScaleLine(opt_options) {\n        var _this = this;\n        var options = opt_options ? opt_options : {};\n        var className = options.className !== undefined ? options.className :\n            options.bar ? 'ol-scale-bar' : 'ol-scale-line';\n        _this = _super.call(this, {\n            element: document.createElement('div'),\n            render: options.render || render,\n            target: options.target\n        }) || this;\n        /**\n         * @private\n         * @type {HTMLElement}\n         */\n        _this.innerElement_ = document.createElement('div');\n        _this.innerElement_.className = className + '-inner';\n        _this.element.className = className + ' ' + CLASS_UNSELECTABLE;\n        _this.element.appendChild(_this.innerElement_);\n        /**\n         * @private\n         * @type {?import(\"../View.js\").State}\n         */\n        _this.viewState_ = null;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.minWidth_ = options.minWidth !== undefined ? options.minWidth : 64;\n        /**\n         * @private\n         * @type {boolean}\n         */\n        _this.renderedVisible_ = false;\n        /**\n         * @private\n         * @type {number|undefined}\n         */\n        _this.renderedWidth_ = undefined;\n        /**\n         * @private\n         * @type {string}\n         */\n        _this.renderedHTML_ = '';\n        _this.addEventListener(getChangeEventType(UNITS_PROP), _this.handleUnitsChanged_);\n        _this.setUnits(options.units || Units.METRIC);\n        /**\n         * @private\n         * @type {boolean}\n         */\n        _this.scaleBar_ = options.bar || false;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.scaleBarSteps_ = options.steps || 4;\n        /**\n         * @private\n         * @type {boolean}\n         */\n        _this.scaleBarText_ = options.text || false;\n        return _this;\n    }\n    /**\n     * Return the units to use in the scale line.\n     * @return {Units} The units\n     * to use in the scale line.\n     * @observable\n     * @api\n     */\n    ScaleLine.prototype.getUnits = function () {\n        return this.get(UNITS_PROP);\n    };\n    /**\n     * @private\n     */\n    ScaleLine.prototype.handleUnitsChanged_ = function () {\n        this.updateElement_();\n    };\n    /**\n     * Set the units to use in the scale line.\n     * @param {Units} units The units to use in the scale line.\n     * @observable\n     * @api\n     */\n    ScaleLine.prototype.setUnits = function (units) {\n        this.set(UNITS_PROP, units);\n    };\n    /**\n     * @private\n     */\n    ScaleLine.prototype.updateElement_ = function () {\n        var viewState = this.viewState_;\n        if (!viewState) {\n            if (this.renderedVisible_) {\n                this.element.style.display = 'none';\n                this.renderedVisible_ = false;\n            }\n            return;\n        }\n        var center = viewState.center;\n        var projection = viewState.projection;\n        var units = this.getUnits();\n        var pointResolutionUnits = units == Units.DEGREES ?\n            ProjUnits.DEGREES :\n            ProjUnits.METERS;\n        var pointResolution = getPointResolution(projection, viewState.resolution, center, pointResolutionUnits);\n        var nominalCount = this.minWidth_ * pointResolution;\n        var suffix = '';\n        if (units == Units.DEGREES) {\n            var metersPerDegree = METERS_PER_UNIT[ProjUnits.DEGREES];\n            nominalCount *= metersPerDegree;\n            if (nominalCount < metersPerDegree / 60) {\n                suffix = '\\u2033'; // seconds\n                pointResolution *= 3600;\n            }\n            else if (nominalCount < metersPerDegree) {\n                suffix = '\\u2032'; // minutes\n                pointResolution *= 60;\n            }\n            else {\n                suffix = '\\u00b0'; // degrees\n            }\n        }\n        else if (units == Units.IMPERIAL) {\n            if (nominalCount < 0.9144) {\n                suffix = 'in';\n                pointResolution /= 0.0254;\n            }\n            else if (nominalCount < 1609.344) {\n                suffix = 'ft';\n                pointResolution /= 0.3048;\n            }\n            else {\n                suffix = 'mi';\n                pointResolution /= 1609.344;\n            }\n        }\n        else if (units == Units.NAUTICAL) {\n            pointResolution /= 1852;\n            suffix = 'nm';\n        }\n        else if (units == Units.METRIC) {\n            if (nominalCount < 0.001) {\n                suffix = 'Î¼m';\n                pointResolution *= 1000000;\n            }\n            else if (nominalCount < 1) {\n                suffix = 'mm';\n                pointResolution *= 1000;\n            }\n            else if (nominalCount < 1000) {\n                suffix = 'm';\n            }\n            else {\n                suffix = 'km';\n                pointResolution /= 1000;\n            }\n        }\n        else if (units == Units.US) {\n            if (nominalCount < 0.9144) {\n                suffix = 'in';\n                pointResolution *= 39.37;\n            }\n            else if (nominalCount < 1609.344) {\n                suffix = 'ft';\n                pointResolution /= 0.30480061;\n            }\n            else {\n                suffix = 'mi';\n                pointResolution /= 1609.3472;\n            }\n        }\n        else {\n            assert(false, 33); // Invalid units\n        }\n        var i = 3 * Math.floor(Math.log(this.minWidth_ * pointResolution) / Math.log(10));\n        var count, width, decimalCount;\n        while (true) {\n            decimalCount = Math.floor(i / 3);\n            var decimal = Math.pow(10, decimalCount);\n            count = LEADING_DIGITS[((i % 3) + 3) % 3] * decimal;\n            width = Math.round(count / pointResolution);\n            if (isNaN(width)) {\n                this.element.style.display = 'none';\n                this.renderedVisible_ = false;\n                return;\n            }\n            else if (width >= this.minWidth_) {\n                break;\n            }\n            ++i;\n        }\n        var html;\n        if (this.scaleBar_) {\n            html = this.createScaleBar(width, count, suffix);\n        }\n        else {\n            html = count.toFixed(decimalCount < 0 ? -decimalCount : 0) + ' ' + suffix;\n        }\n        if (this.renderedHTML_ != html) {\n            this.innerElement_.innerHTML = html;\n            this.renderedHTML_ = html;\n        }\n        if (this.renderedWidth_ != width) {\n            this.innerElement_.style.width = width + 'px';\n            this.renderedWidth_ = width;\n        }\n        if (!this.renderedVisible_) {\n            this.element.style.display = '';\n            this.renderedVisible_ = true;\n        }\n    };\n    /**\n     * @private\n     * @param {number} width The current width of the scalebar.\n     * @param {number} scale The current scale.\n     * @param {string} suffix The suffix to append to the scale text.\n     * @returns {string} The stringified HTML of the scalebar.\n     */\n    ScaleLine.prototype.createScaleBar = function (width, scale, suffix) {\n        var mapScale = '1 : ' + Math.round(this.getScaleForResolution()).toLocaleString();\n        var scaleSteps = [];\n        var stepWidth = width / this.scaleBarSteps_;\n        var backgroundColor = '#ffffff';\n        for (var i = 0; i < this.scaleBarSteps_; i++) {\n            if (i === 0) {\n                // create the first marker at position 0\n                scaleSteps.push(this.createMarker('absolute', i));\n            }\n            scaleSteps.push('<div>' +\n                '<div ' +\n                'class=\"ol-scale-singlebar\" ' +\n                'style=' +\n                '\"width: ' + stepWidth + 'px;' +\n                'background-color: ' + backgroundColor + ';\"' +\n                '>' +\n                '</div>' +\n                this.createMarker('relative', i) +\n                /*render text every second step, except when only 2 steps */\n                (i % 2 === 0 || this.scaleBarSteps_ === 2 ?\n                    this.createStepText(i, width, false, scale, suffix) :\n                    '') +\n                '</div>');\n            if (i === this.scaleBarSteps_ - 1) {\n                { /*render text at the end */ }\n                scaleSteps.push(this.createStepText(i + 1, width, true, scale, suffix));\n            }\n            // switch colors of steps between black and white\n            if (backgroundColor === '#ffffff') {\n                backgroundColor = '#000000';\n            }\n            else {\n                backgroundColor = '#ffffff';\n            }\n        }\n        var scaleBarText;\n        if (this.scaleBarText_) {\n            scaleBarText = '<div ' +\n                'class=\"ol-scale-text\" ' +\n                'style=\"width: ' + width + 'px;\">' +\n                mapScale +\n                '</div>';\n        }\n        else {\n            scaleBarText = '';\n        }\n        var container = '<div ' +\n            'style=\"display: flex;\">' +\n            scaleBarText +\n            scaleSteps.join('') +\n            '</div>';\n        return container;\n    };\n    /**\n     * Creates a marker at given position\n     * @param {string} position - The position, absolute or relative\n     * @param {number} i - The iterator\n     * @returns {string} The stringified div containing the marker\n     */\n    ScaleLine.prototype.createMarker = function (position, i) {\n        var top = position === 'absolute' ? 3 : -10;\n        return '<div ' +\n            'class=\"ol-scale-step-marker\" ' +\n            'style=\"position: ' + position + ';' +\n            'top: ' + top + 'px;\"' +\n            '></div>';\n    };\n    /**\n     * Creates the label for a marker marker at given position\n     * @param {number} i - The iterator\n     * @param {number} width - The width the scalebar will currently use\n     * @param {boolean} isLast - Flag indicating if we add the last step text\n     * @param {number} scale - The current scale for the whole scalebar\n     * @param {string} suffix - The suffix for the scale\n     * @returns {string} The stringified div containing the step text\n     */\n    ScaleLine.prototype.createStepText = function (i, width, isLast, scale, suffix) {\n        var length = i === 0 ? 0 : Math.round((scale / this.scaleBarSteps_ * i) * 100) / 100;\n        var lengthString = length + (i === 0 ? '' : ' ' + suffix);\n        var margin = i === 0 ? -3 : width / this.scaleBarSteps_ * -1;\n        var minWidth = i === 0 ? 0 : width / this.scaleBarSteps_ * 2;\n        return '<div ' +\n            'class=\"ol-scale-step-text\" ' +\n            'style=\"' +\n            'margin-left: ' + margin + 'px;' +\n            'text-align: ' + (i === 0 ? 'left' : 'center') + '; ' +\n            'min-width: ' + minWidth + 'px;' +\n            'left: ' + (isLast ? width + 'px' : 'unset') + ';\"' +\n            '>' +\n            lengthString +\n            '</div>';\n    };\n    /**\n     * Returns the appropriate scale for the given resolution and units.\n     * @return {number} The appropriate scale.\n     */\n    ScaleLine.prototype.getScaleForResolution = function () {\n        var resolution = this.getMap().getView().getResolution();\n        var dpi = 25.4 / 0.28;\n        var mpu = this.viewState_.projection.getMetersPerUnit();\n        var inchesPerMeter = 39.37;\n        return parseFloat(resolution.toString()) * mpu * inchesPerMeter * dpi;\n    };\n    return ScaleLine;\n}(Control));\n/**\n * Update the scale line element.\n * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n * @this {ScaleLine}\n */\nexport function render(mapEvent) {\n    var frameState = mapEvent.frameState;\n    if (!frameState) {\n        this.viewState_ = null;\n    }\n    else {\n        this.viewState_ = frameState.viewState;\n    }\n    this.updateElement_();\n}\nexport default ScaleLine;\n//# sourceMappingURL=ScaleLine.js.map"]},"metadata":{},"sourceType":"module"}